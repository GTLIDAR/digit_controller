/*
 * Automatically Generated from Mathematica.
 * Tue 17 Aug 2021 12:17:40 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif
#include "T_leftFoot.hh"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t3408;
  double t3730;
  double t3768;
  double t3731;
  double t3762;
  double t3770;
  double t3794;
  double t3696;
  double t3698;
  double t3700;
  double t3764;
  double t3771;
  double t3772;
  double t3802;
  double t3804;
  double t3807;
  double t3848;
  double t3643;
  double t3662;
  double t3667;
  double t3835;
  double t3836;
  double t3837;
  double t3839;
  double t3841;
  double t3847;
  double t3850;
  double t3866;
  double t3867;
  double t3869;
  double t3871;
  double t3872;
  double t3703;
  double t3720;
  double t3729;
  double t3800;
  double t3815;
  double t3825;
  double t3884;
  double t3887;
  double t3889;
  double t3604;
  double t3642;
  double t3668;
  double t3678;
  double t3826;
  double t3849;
  double t3873;
  double t3875;
  double t3890;
  double t3894;
  double t3898;
  double t3901;
  double t3903;
  double t3906;
  double t3922;
  double t3924;
  double t3927;
  double t3928;
  double t3938;
  double t3939;
  double t3959;
  double t3960;
  double t3961;
  double t3883;
  double t3909;
  double t3910;
  double t3912;
  double t3944;
  double t3946;
  double t3949;
  double t3950;
  double t3951;
  double t3952;
  double t3953;
  double t3954;
  double t3968;
  double t3969;
  double t3971;
  double t3972;
  double t3974;
  double t3978;
  double t3983;
  double t3984;
  double t3985;
  double t3599;
  double t3601;
  double t3948;
  double t3958;
  double t3966;
  double t3967;
  double t3980;
  double t3981;
  double t3986;
  double t3987;
  double t3988;
  double t3989;
  double t3990;
  double t3991;
  double t3999;
  double t4000;
  double t4002;
  double t4005;
  double t4007;
  double t4008;
  double t3410;
  double t3415;
  double t3417;
  double t3573;
  double t4028;
  double t4029;
  double t4031;
  double t3982;
  double t3995;
  double t3996;
  double t3997;
  double t4010;
  double t4014;
  double t4017;
  double t4020;
  double t4021;
  double t4022;
  double t4023;
  double t4026;
  double t4037;
  double t4041;
  double t4042;
  double t4043;
  double t4046;
  double t4048;
  double t4016;
  double t4027;
  double t4032;
  double t4034;
  double t4049;
  double t4054;
  double t4061;
  double t4062;
  double t4064;
  double t4065;
  double t4066;
  double t4067;
  double t4056;
  double t4071;
  double t4072;
  double t4073;
  double t4074;
  double t4075;
  double t4077;
  double t4083;
  double t3454;
  double t3577;
  double t3595;
  double t4113;
  double t4115;
  double t4120;
  double t4121;
  double t4122;
  double t4116;
  double t4117;
  double t4118;
  double t4119;
  double t4123;
  double t4124;
  double t4126;
  double t4131;
  double t4132;
  double t4136;
  double t4137;
  double t4138;
  double t4139;
  double t4142;
  double t4143;
  double t4147;
  double t4148;
  double t4114;
  double t4125;
  double t4133;
  double t4134;
  double t4135;
  double t4141;
  double t4151;
  double t4152;
  double t4156;
  double t4158;
  double t4159;
  double t4160;
  double t4163;
  double t4167;
  double t4168;
  double t4169;
  double t4154;
  double t4162;
  double t4170;
  double t4171;
  double t4173;
  double t4174;
  double t4175;
  double t4176;
  double t4179;
  double t4181;
  double t4182;
  double t4183;
  double t4172;
  double t4177;
  double t4186;
  double t4188;
  double t4193;
  double t4195;
  double t4196;
  double t4197;
  double t4200;
  double t4201;
  double t4202;
  double t4204;
  double t4057;
  double t4060;
  double t4189;
  double t4199;
  double t4205;
  double t4206;
  double t4208;
  double t4210;
  double t4211;
  double t4212;
  double t4215;
  double t4216;
  double t4217;
  double t4219;
  double t4069;
  double t4070;
  double t4084;
  double t4086;
  double t4207;
  double t4213;
  double t4221;
  double t4222;
  double t4088;
  double t4089;
  double t4224;
  double t4225;
  double t4226;
  double t4227;
  double t4091;
  double t4092;
  double t4229;
  double t4230;
  double t4231;
  double t4232;
  double t4096;
  double t4097;
  double t4100;
  double t4101;
  double t4103;
  double t4105;
  double t4257;
  double t4259;
  double t4260;
  double t4253;
  double t4254;
  double t4255;
  double t4256;
  double t4261;
  double t4262;
  double t4264;
  double t4265;
  double t4266;
  double t4271;
  double t4272;
  double t4273;
  double t4274;
  double t4276;
  double t4277;
  double t4278;
  double t4280;
  double t4252;
  double t4263;
  double t4267;
  double t4268;
  double t4270;
  double t4275;
  double t4281;
  double t4282;
  double t4285;
  double t4286;
  double t4289;
  double t4290;
  double t4293;
  double t4294;
  double t4295;
  double t4296;
  double t4284;
  double t4291;
  double t4297;
  double t4298;
  double t4300;
  double t4301;
  double t4302;
  double t4303;
  double t4305;
  double t4307;
  double t4309;
  double t4310;
  double t4299;
  double t4304;
  double t4311;
  double t4314;
  double t4317;
  double t4321;
  double t4324;
  double t4325;
  double t4328;
  double t4329;
  double t4330;
  double t4332;
  double t4316;
  double t4327;
  double t4333;
  double t4334;
  double t4336;
  double t4337;
  double t4338;
  double t4339;
  double t4341;
  double t4346;
  double t4347;
  double t4348;
  double t4335;
  double t4340;
  double t4349;
  double t4350;
  double t4352;
  double t4353;
  double t4354;
  double t4355;
  double t4357;
  double t4358;
  double t4359;
  double t4360;
  double t4055;
  double t4068;
  double t4078;
  double t4079;
  double t4082;
  double t4087;
  double t4090;
  double t4093;
  double t4094;
  double t4095;
  double t4098;
  double t4102;
  double t4106;
  double t4107;
  double t4109;
  double t4111;
  double t4223;
  double t4228;
  double t4233;
  double t4236;
  double t4237;
  double t4238;
  double t4239;
  double t4242;
  double t4243;
  double t4244;
  double t4245;
  double t4246;
  double t4247;
  double t4248;
  double t4249;
  double t4250;
  double t4351;
  double t4356;
  double t4361;
  double t4362;
  double t4363;
  double t4365;
  double t4366;
  double t4367;
  double t4368;
  double t4369;
  double t4370;
  double t4371;
  double t4372;
  double t4373;
  double t4374;
  double t4375;
  double t4386;
  double t4387;
  double t4388;
  double t4390;
  double t4391;
  double t4393;
  double t4395;
  double t4396;
  double t4397;
  double t4408;
  double t4409;
  double t4410;
  double t4411;
  double t4413;
  double t4414;
  double t4415;
  double t4416;
  double t4418;
  double t4419;
  double t4422;
  double t4423;
  double t4534;
  double t4537;
  double t4544;
  double t4439;
  double t4440;
  double t4443;
  double t4444;
  double t4445;
  double t4448;
  double t4449;
  double t4450;
  double t4451;
  double t4453;
  double t4454;
  double t4455;
  double t4456;
  double t4458;
  double t4459;
  double t4460;
  double t4461;
  double t4463;
  double t4465;
  double t4466;
  double t4467;
  double t4469;
  double t4470;
  double t4471;
  double t4473;
  double t4474;
  double t4475;
  double t4477;
  double t4478;
  double t4479;
  double t4480;
  double t4482;
  double t4483;
  double t4484;
  double t4485;
  double t4487;
  double t4488;
  double t4489;
  double t4490;
  double t4493;
  double t4494;
  double t4495;
  double t4496;
  double t4498;
  double t4499;
  double t4500;
  double t4502;
  double t4503;
  double t4504;
  double t4506;
  double t4507;
  double t4508;
  double t4509;
  double t4511;
  double t4512;
  double t4513;
  double t4514;
  double t4516;
  double t4517;
  double t4518;
  double t4519;
  double t4522;
  double t4523;
  double t4524;
  double t4525;
  double t4527;
  double t4528;
  double t4529;
  double t4531;
  double t4532;
  double t4535;
  double t4536;
  double t4538;
  double t4539;
  double t4540;
  double t4542;
  double t4543;
  double t4545;
  double t4546;
  double t4547;
  double t4548;
  double t4549;
  double t4551;
  double t4553;
  double t4554;
  double t4555;
  double t4556;
  double t4557;
  double t4558;
  double t4441;
  double t4442;
  double t4447;
  double t4452;
  double t4457;
  double t4462;
  double t4468;
  double t4472;
  double t4476;
  double t4481;
  double t4486;
  double t4491;
  double t4497;
  double t4501;
  double t4505;
  double t4510;
  double t4515;
  double t4521;
  double t4526;
  double t4530;
  double t4541;
  double t4550;
  double t4560;
  double t4561;
  double t4562;
  double t4563;
  double t4564;
  double t4566;
  double t4569;
  double t4570;
  double t4571;
  double t4572;
  double t4573;
  double t4574;
  double t4575;
  double t4576;
  double t4577;
  double t4578;
  double t4579;
  double t4580;
  double t4581;
  double t4582;
  double t4583;
  double t4584;
  double t4585;
  double t4586;
  double t4587;
  double t4588;
  double t4589;
  double t4590;
  double t4591;
  double t4592;
  double t4593;
  double t4594;
  double t4596;
  double t4597;
  double t4598;
  double t4599;
  double t4600;
  double t4601;
  double t4602;
  double t4603;
  double t4604;
  double t4605;
  double t4606;
  double t4607;
  double t4608;
  double t4609;
  double t4610;
  double t4611;
  double t4612;
  double t4613;
  double t4614;
  double t4615;
  double t4616;
  double t4617;
  double t4618;
  double t4619;
  double t4620;
  double t4621;
  double t4622;
  t3408 = Sin(var1[4]);
  t3730 = Cos(var1[4]);
  t3768 = Cos(var1[5]);
  t3731 = Cos(var1[6]);
  t3762 = Sin(var1[5]);
  t3770 = Sin(var1[6]);
  t3794 = Sin(var1[7]);
  t3696 = Cos(var1[7]);
  t3698 = -1.*t3696;
  t3700 = 1. + t3698;
  t3764 = t3730*t3731*t3762;
  t3771 = -1.*t3730*t3768*t3770;
  t3772 = t3764 + t3771;
  t3802 = t3730*t3768*t3731;
  t3804 = t3730*t3762*t3770;
  t3807 = t3802 + t3804;
  t3848 = Sin(var1[8]);
  t3643 = Cos(var1[8]);
  t3662 = -1.*t3643;
  t3667 = 1. + t3662;
  t3835 = -0.8656776547239999*t3700;
  t3836 = 1. + t3835;
  t3837 = t3836*t3772;
  t3839 = -0.340999127418*t3700*t3807;
  t3841 = -0.930418*t3408*t3794;
  t3847 = t3837 + t3839 + t3841;
  t3850 = -0.340999127418*t3700*t3772;
  t3866 = -0.134322983001*t3700;
  t3867 = 1. + t3866;
  t3869 = t3867*t3807;
  t3871 = -0.366501*t3408*t3794;
  t3872 = t3850 + t3869 + t3871;
  t3703 = -1.000000637725*t3700;
  t3720 = 1. + t3703;
  t3729 = -1.*t3720*t3408;
  t3800 = -0.930418*t3772*t3794;
  t3815 = -0.366501*t3807*t3794;
  t3825 = t3729 + t3800 + t3815;
  t3884 = Cos(var1[9]);
  t3887 = -1.*t3884;
  t3889 = 1. + t3887;
  t3604 = Sin(var1[10]);
  t3642 = Sin(var1[9]);
  t3668 = -1.000000637725*t3667;
  t3678 = 1. + t3668;
  t3826 = t3678*t3825;
  t3849 = 0.366501*t3847*t3848;
  t3873 = -0.930418*t3872*t3848;
  t3875 = t3826 + t3849 + t3873;
  t3890 = -0.134322983001*t3667;
  t3894 = 1. + t3890;
  t3898 = t3894*t3847;
  t3901 = 0.340999127418*t3667*t3872;
  t3903 = -0.366501*t3825*t3848;
  t3906 = t3898 + t3901 + t3903;
  t3922 = 0.340999127418*t3667*t3847;
  t3924 = -0.8656776547239999*t3667;
  t3927 = 1. + t3924;
  t3928 = t3927*t3872;
  t3938 = 0.930418*t3825*t3848;
  t3939 = t3922 + t3928 + t3938;
  t3959 = Cos(var1[10]);
  t3960 = -1.*t3959;
  t3961 = 1. + t3960;
  t3883 = -0.930418*t3642*t3875;
  t3909 = 0.340999127418*t3889*t3906;
  t3910 = -0.8656776547239999*t3889;
  t3912 = 1. + t3910;
  t3944 = t3912*t3939;
  t3946 = t3883 + t3909 + t3944;
  t3949 = 0.366501*t3642*t3875;
  t3950 = -0.134322983001*t3889;
  t3951 = 1. + t3950;
  t3952 = t3951*t3906;
  t3953 = 0.340999127418*t3889*t3939;
  t3954 = t3949 + t3952 + t3953;
  t3968 = -1.000000637725*t3889;
  t3969 = 1. + t3968;
  t3971 = t3969*t3875;
  t3972 = -0.366501*t3642*t3906;
  t3974 = 0.930418*t3642*t3939;
  t3978 = t3971 + t3972 + t3974;
  t3983 = Cos(var1[11]);
  t3984 = -1.*t3983;
  t3985 = 1. + t3984;
  t3599 = Sin(var1[12]);
  t3601 = Sin(var1[11]);
  t3948 = 0.930418*t3604*t3946;
  t3958 = -0.366501*t3604*t3954;
  t3966 = -1.000000637725*t3961;
  t3967 = 1. + t3966;
  t3980 = t3967*t3978;
  t3981 = t3948 + t3958 + t3980;
  t3986 = -0.8656776547239999*t3961;
  t3987 = 1. + t3986;
  t3988 = t3987*t3946;
  t3989 = 0.340999127418*t3961*t3954;
  t3990 = -0.930418*t3604*t3978;
  t3991 = t3988 + t3989 + t3990;
  t3999 = 0.340999127418*t3961*t3946;
  t4000 = -0.134322983001*t3961;
  t4002 = 1. + t4000;
  t4005 = t4002*t3954;
  t4007 = 0.366501*t3604*t3978;
  t4008 = t3999 + t4005 + t4007;
  t3410 = Cos(var1[13]);
  t3415 = -1.*t3410;
  t3417 = 1. + t3415;
  t3573 = Sin(var1[13]);
  t4028 = Cos(var1[12]);
  t4029 = -1.*t4028;
  t4031 = 1. + t4029;
  t3982 = 0.366501*t3601*t3981;
  t3995 = 0.340999127418*t3985*t3991;
  t3996 = -0.134322983001*t3985;
  t3997 = 1. + t3996;
  t4010 = t3997*t4008;
  t4014 = t3982 + t3995 + t4010;
  t4017 = -0.930418*t3601*t3981;
  t4020 = -0.8656776547239999*t3985;
  t4021 = 1. + t4020;
  t4022 = t4021*t3991;
  t4023 = 0.340999127418*t3985*t4008;
  t4026 = t4017 + t4022 + t4023;
  t4037 = -1.000000637725*t3985;
  t4041 = 1. + t4037;
  t4042 = t4041*t3981;
  t4043 = 0.930418*t3601*t3991;
  t4046 = -0.366501*t3601*t4008;
  t4048 = t4042 + t4043 + t4046;
  t4016 = -0.366501*t3599*t4014;
  t4027 = 0.930418*t3599*t4026;
  t4032 = -1.000000637725*t4031;
  t4034 = 1. + t4032;
  t4049 = t4034*t4048;
  t4054 = t4016 + t4027 + t4049;
  t4061 = 0.340999127418*t4031*t4014;
  t4062 = -0.8656776547239999*t4031;
  t4064 = 1. + t4062;
  t4065 = t4064*t4026;
  t4066 = -0.930418*t3599*t4048;
  t4067 = t4061 + t4065 + t4066;
  t4056 = -0.120666640478*t3417;
  t4071 = -0.134322983001*t4031;
  t4072 = 1. + t4071;
  t4073 = t4072*t4014;
  t4074 = 0.340999127418*t4031*t4026;
  t4075 = 0.366501*t3599*t4048;
  t4077 = t4073 + t4074 + t4075;
  t4083 = 0.444895486988*t3417;
  t3454 = -0.175248972904*t3417;
  t3577 = -0.553471*t3573;
  t3595 = t3454 + t3577;
  t4113 = Cos(var1[3]);
  t4115 = Sin(var1[3]);
  t4120 = t4113*t3768*t3408;
  t4121 = t4115*t3762;
  t4122 = t4120 + t4121;
  t4116 = -1.*t3768*t4115;
  t4117 = t4113*t3408*t3762;
  t4118 = t4116 + t4117;
  t4119 = t3731*t4118;
  t4123 = -1.*t4122*t3770;
  t4124 = t4119 + t4123;
  t4126 = t3731*t4122;
  t4131 = t4118*t3770;
  t4132 = t4126 + t4131;
  t4136 = -0.340999127418*t3700*t4124;
  t4137 = t3867*t4132;
  t4138 = 0.366501*t4113*t3730*t3794;
  t4139 = t4136 + t4137 + t4138;
  t4142 = t3836*t4124;
  t4143 = -0.340999127418*t3700*t4132;
  t4147 = 0.930418*t4113*t3730*t3794;
  t4148 = t4142 + t4143 + t4147;
  t4114 = t4113*t3730*t3720;
  t4125 = -0.930418*t4124*t3794;
  t4133 = -0.366501*t4132*t3794;
  t4134 = t4114 + t4125 + t4133;
  t4135 = t3678*t4134;
  t4141 = -0.930418*t4139*t3848;
  t4151 = 0.366501*t4148*t3848;
  t4152 = t4135 + t4141 + t4151;
  t4156 = 0.340999127418*t3667*t4139;
  t4158 = t3894*t4148;
  t4159 = -0.366501*t4134*t3848;
  t4160 = t4156 + t4158 + t4159;
  t4163 = t3927*t4139;
  t4167 = 0.340999127418*t3667*t4148;
  t4168 = 0.930418*t4134*t3848;
  t4169 = t4163 + t4167 + t4168;
  t4154 = -0.930418*t3642*t4152;
  t4162 = 0.340999127418*t3889*t4160;
  t4170 = t3912*t4169;
  t4171 = t4154 + t4162 + t4170;
  t4173 = 0.366501*t3642*t4152;
  t4174 = t3951*t4160;
  t4175 = 0.340999127418*t3889*t4169;
  t4176 = t4173 + t4174 + t4175;
  t4179 = t3969*t4152;
  t4181 = -0.366501*t3642*t4160;
  t4182 = 0.930418*t3642*t4169;
  t4183 = t4179 + t4181 + t4182;
  t4172 = 0.930418*t3604*t4171;
  t4177 = -0.366501*t3604*t4176;
  t4186 = t3967*t4183;
  t4188 = t4172 + t4177 + t4186;
  t4193 = t3987*t4171;
  t4195 = 0.340999127418*t3961*t4176;
  t4196 = -0.930418*t3604*t4183;
  t4197 = t4193 + t4195 + t4196;
  t4200 = 0.340999127418*t3961*t4171;
  t4201 = t4002*t4176;
  t4202 = 0.366501*t3604*t4183;
  t4204 = t4200 + t4201 + t4202;
  t4057 = 0.803828*t3573;
  t4060 = t4056 + t4057;
  t4189 = 0.366501*t3601*t4188;
  t4199 = 0.340999127418*t3985*t4197;
  t4205 = t3997*t4204;
  t4206 = t4189 + t4199 + t4205;
  t4208 = -0.930418*t3601*t4188;
  t4210 = t4021*t4197;
  t4211 = 0.340999127418*t3985*t4204;
  t4212 = t4208 + t4210 + t4211;
  t4215 = t4041*t4188;
  t4216 = 0.930418*t3601*t4197;
  t4217 = -0.366501*t3601*t4204;
  t4219 = t4215 + t4216 + t4217;
  t4069 = -0.952469601425*t3417;
  t4070 = 1. + t4069;
  t4084 = -0.218018*t3573;
  t4086 = t4083 + t4084;
  t4207 = -0.366501*t3599*t4206;
  t4213 = 0.930418*t3599*t4212;
  t4221 = t4034*t4219;
  t4222 = t4207 + t4213 + t4221;
  t4088 = -0.693671301908*t3417;
  t4089 = 1. + t4088;
  t4224 = 0.340999127418*t4031*t4206;
  t4225 = t4064*t4212;
  t4226 = -0.930418*t3599*t4219;
  t4227 = t4224 + t4225 + t4226;
  t4091 = -0.803828*t3573;
  t4092 = t4056 + t4091;
  t4229 = t4072*t4206;
  t4230 = 0.340999127418*t4031*t4212;
  t4231 = 0.366501*t3599*t4219;
  t4232 = t4229 + t4230 + t4231;
  t4096 = -0.353861996165*t3417;
  t4097 = 1. + t4096;
  t4100 = 0.218018*t3573;
  t4101 = t4083 + t4100;
  t4103 = 0.553471*t3573;
  t4105 = t3454 + t4103;
  t4257 = t3768*t4115*t3408;
  t4259 = -1.*t4113*t3762;
  t4260 = t4257 + t4259;
  t4253 = t4113*t3768;
  t4254 = t4115*t3408*t3762;
  t4255 = t4253 + t4254;
  t4256 = t3731*t4255;
  t4261 = -1.*t4260*t3770;
  t4262 = t4256 + t4261;
  t4264 = t3731*t4260;
  t4265 = t4255*t3770;
  t4266 = t4264 + t4265;
  t4271 = -0.340999127418*t3700*t4262;
  t4272 = t3867*t4266;
  t4273 = 0.366501*t3730*t4115*t3794;
  t4274 = t4271 + t4272 + t4273;
  t4276 = t3836*t4262;
  t4277 = -0.340999127418*t3700*t4266;
  t4278 = 0.930418*t3730*t4115*t3794;
  t4280 = t4276 + t4277 + t4278;
  t4252 = t3730*t3720*t4115;
  t4263 = -0.930418*t4262*t3794;
  t4267 = -0.366501*t4266*t3794;
  t4268 = t4252 + t4263 + t4267;
  t4270 = t3678*t4268;
  t4275 = -0.930418*t4274*t3848;
  t4281 = 0.366501*t4280*t3848;
  t4282 = t4270 + t4275 + t4281;
  t4285 = 0.340999127418*t3667*t4274;
  t4286 = t3894*t4280;
  t4289 = -0.366501*t4268*t3848;
  t4290 = t4285 + t4286 + t4289;
  t4293 = t3927*t4274;
  t4294 = 0.340999127418*t3667*t4280;
  t4295 = 0.930418*t4268*t3848;
  t4296 = t4293 + t4294 + t4295;
  t4284 = -0.930418*t3642*t4282;
  t4291 = 0.340999127418*t3889*t4290;
  t4297 = t3912*t4296;
  t4298 = t4284 + t4291 + t4297;
  t4300 = 0.366501*t3642*t4282;
  t4301 = t3951*t4290;
  t4302 = 0.340999127418*t3889*t4296;
  t4303 = t4300 + t4301 + t4302;
  t4305 = t3969*t4282;
  t4307 = -0.366501*t3642*t4290;
  t4309 = 0.930418*t3642*t4296;
  t4310 = t4305 + t4307 + t4309;
  t4299 = 0.930418*t3604*t4298;
  t4304 = -0.366501*t3604*t4303;
  t4311 = t3967*t4310;
  t4314 = t4299 + t4304 + t4311;
  t4317 = t3987*t4298;
  t4321 = 0.340999127418*t3961*t4303;
  t4324 = -0.930418*t3604*t4310;
  t4325 = t4317 + t4321 + t4324;
  t4328 = 0.340999127418*t3961*t4298;
  t4329 = t4002*t4303;
  t4330 = 0.366501*t3604*t4310;
  t4332 = t4328 + t4329 + t4330;
  t4316 = 0.366501*t3601*t4314;
  t4327 = 0.340999127418*t3985*t4325;
  t4333 = t3997*t4332;
  t4334 = t4316 + t4327 + t4333;
  t4336 = -0.930418*t3601*t4314;
  t4337 = t4021*t4325;
  t4338 = 0.340999127418*t3985*t4332;
  t4339 = t4336 + t4337 + t4338;
  t4341 = t4041*t4314;
  t4346 = 0.930418*t3601*t4325;
  t4347 = -0.366501*t3601*t4332;
  t4348 = t4341 + t4346 + t4347;
  t4335 = -0.366501*t3599*t4334;
  t4340 = 0.930418*t3599*t4339;
  t4349 = t4034*t4348;
  t4350 = t4335 + t4340 + t4349;
  t4352 = 0.340999127418*t4031*t4334;
  t4353 = t4064*t4339;
  t4354 = -0.930418*t3599*t4348;
  t4355 = t4352 + t4353 + t4354;
  t4357 = t4072*t4334;
  t4358 = 0.340999127418*t4031*t4339;
  t4359 = 0.366501*t3599*t4348;
  t4360 = t4357 + t4358 + t4359;
  t4055 = t3595*t4054;
  t4068 = t4060*t4067;
  t4078 = t4070*t4077;
  t4079 = t4055 + t4068 + t4078;
  t4082 = -0.041507*t4079;
  t4087 = t4086*t4054;
  t4090 = t4089*t4067;
  t4093 = t4092*t4077;
  t4094 = t4087 + t4090 + t4093;
  t4095 = 0.105372*t4094;
  t4098 = t4097*t4054;
  t4102 = t4101*t4067;
  t4106 = t4105*t4077;
  t4107 = t4098 + t4102 + t4106;
  t4109 = 0.993566*t4107;
  t4111 = t4082 + t4095 + t4109;
  t4223 = t3595*t4222;
  t4228 = t4060*t4227;
  t4233 = t4070*t4232;
  t4236 = t4223 + t4228 + t4233;
  t4237 = -0.041507*t4236;
  t4238 = t4086*t4222;
  t4239 = t4089*t4227;
  t4242 = t4092*t4232;
  t4243 = t4238 + t4239 + t4242;
  t4244 = 0.105372*t4243;
  t4245 = t4097*t4222;
  t4246 = t4101*t4227;
  t4247 = t4105*t4232;
  t4248 = t4245 + t4246 + t4247;
  t4249 = 0.993566*t4248;
  t4250 = t4237 + t4244 + t4249;
  t4351 = t3595*t4350;
  t4356 = t4060*t4355;
  t4361 = t4070*t4360;
  t4362 = t4351 + t4356 + t4361;
  t4363 = -0.041507*t4362;
  t4365 = t4086*t4350;
  t4366 = t4089*t4355;
  t4367 = t4092*t4360;
  t4368 = t4365 + t4366 + t4367;
  t4369 = 0.105372*t4368;
  t4370 = t4097*t4350;
  t4371 = t4101*t4355;
  t4372 = t4105*t4360;
  t4373 = t4370 + t4371 + t4372;
  t4374 = 0.993566*t4373;
  t4375 = t4363 + t4369 + t4374;
  t4386 = 0.930418*t4079;
  t4387 = 0.366501*t4094;
  t4388 = t4386 + t4387;
  t4390 = 0.930418*t4236;
  t4391 = 0.366501*t4243;
  t4393 = t4390 + t4391;
  t4395 = 0.930418*t4362;
  t4396 = 0.366501*t4368;
  t4397 = t4395 + t4396;
  t4408 = -0.364143*t4079;
  t4409 = 0.924432*t4094;
  t4410 = -0.113252*t4107;
  t4411 = t4408 + t4409 + t4410;
  t4413 = -0.364143*t4236;
  t4414 = 0.924432*t4243;
  t4415 = -0.113252*t4248;
  t4416 = t4413 + t4414 + t4415;
  t4418 = -0.364143*t4362;
  t4419 = 0.924432*t4368;
  t4422 = -0.113252*t4373;
  t4423 = t4418 + t4419 + t4422;
  t4534 = -0.444895486988*t3417;
  t4537 = 0.175248972904*t3417;
  t4544 = 0.120666640478*t3417;
  t4439 = -1.*t3731;
  t4440 = 1. + t4439;
  t4443 = -0.04500040093286238*t3700;
  t4444 = -0.0846680539949003*t3794;
  t4445 = t4443 + t4444;
  t4448 = 1.296332362046933e-7*var1[7];
  t4449 = 0.07877668146182712*t3700;
  t4450 = -0.04186915633414423*t3794;
  t4451 = t4448 + t4449 + t4450;
  t4453 = -3.2909349868922137e-7*var1[7];
  t4454 = 0.03103092645718495*t3700;
  t4455 = -0.016492681424499736*t3794;
  t4456 = t4453 + t4454 + t4455;
  t4458 = 1.296332362046933e-7*var1[8];
  t4459 = -0.14128592423750855*t3667;
  t4460 = -0.04186915633414423*t3848;
  t4461 = t4458 + t4459 + t4460;
  t4463 = 3.2909349868922137e-7*var1[8];
  t4465 = 0.055653945343889656*t3667;
  t4466 = 0.016492681424499736*t3848;
  t4467 = t4463 + t4465 + t4466;
  t4469 = -0.04500040093286238*t3667;
  t4470 = 0.15185209683981668*t3848;
  t4471 = t4469 + t4470;
  t4473 = 0.039853038461262744*t3889;
  t4474 = -0.23670515095269612*t3642;
  t4475 = t4473 + t4474;
  t4477 = -1.5981976069815686e-7*var1[9];
  t4478 = 0.08675267452931407*t3889;
  t4479 = 0.014606169134372047*t3642;
  t4480 = t4477 + t4478 + t4479;
  t4482 = -6.295460977284962e-8*var1[9];
  t4483 = -0.22023473313910558*t3889;
  t4484 = -0.03707996069223323*t3642;
  t4485 = t4482 + t4483 + t4484;
  t4487 = -1.6084556086870008e-7*var1[10];
  t4488 = -0.29135406957765553*t3961;
  t4489 = -0.02832985722118838*t3604;
  t4490 = t4487 + t4488 + t4489;
  t4493 = -4.0833068682577724e-7*var1[10];
  t4494 = 0.11476729583292707*t3961;
  t4495 = 0.0111594154470601*t3604;
  t4496 = t4493 + t4494 + t4495;
  t4498 = 0.03044854601678662*t3961;
  t4499 = -0.3131431996991197*t3604;
  t4500 = t4498 + t4499;
  t4502 = -0.26285954081199375*t3985;
  t4503 = -0.634735404786378*t3601;
  t4504 = t4502 + t4503;
  t4506 = 6.369237629068993e-8*var1[11];
  t4507 = -0.5905692458505322*t3985;
  t4508 = 0.24456909227538925*t3601;
  t4509 = t4506 + t4507 + t4508;
  t4511 = 1.6169269214444473e-7*var1[11];
  t4512 = 0.2326311605896123*t3985;
  t4513 = -0.09633822312984319*t3601;
  t4514 = t4511 + t4512 + t4513;
  t4516 = 1.7876586242383724e-7*var1[12];
  t4517 = 0.3243041141817093*t4031;
  t4518 = 0.02270383571304597*t3599;
  t4519 = t4516 + t4517 + t4518;
  t4522 = 7.041766963257243e-8*var1[12];
  t4523 = -0.8232948486053725*t4031;
  t4524 = -0.05763710717422546*t3599;
  t4525 = t4522 + t4523 + t4524;
  t4527 = 0.06194758047549556*t4031;
  t4528 = -0.8848655643005321*t3599;
  t4529 = t4527 + t4528;
  t4531 = -2.7989049814696287e-7*var1[13];
  t4532 = 0.15748067958019524*t3417;
  t4535 = t4534 + t4100;
  t4536 = -0.528674719304*t4535;
  t4538 = t4537 + t4103;
  t4539 = 0.29871295412*t4538;
  t4540 = t4531 + t4532 + t4536 + t4539;
  t4542 = -1.9271694180831932e-7*var1[13];
  t4543 = -0.3667264808254521*t3417;
  t4545 = t4544 + t4091;
  t4546 = 0.29871295412*t4545;
  t4547 = t4534 + t4084;
  t4548 = 0.445034169498*t4547;
  t4549 = t4542 + t4543 + t4546 + t4548;
  t4551 = 7.591321355439789e-8*var1[13];
  t4553 = 0.2845150083511607*t3417;
  t4554 = t4537 + t3577;
  t4555 = 0.445034169498*t4554;
  t4556 = t4544 + t4057;
  t4557 = -0.528674719304*t4556;
  t4558 = t4551 + t4553 + t4555 + t4557;
  t4441 = 0.091*t3730*t4440*t3762;
  t4442 = 0.091*t3730*t3768*t3770;
  t4447 = -1.*t3408*t4445;
  t4452 = t3772*t4451;
  t4457 = t3807*t4456;
  t4462 = t3872*t4461;
  t4468 = t3847*t4467;
  t4472 = t3825*t4471;
  t4476 = t4475*t3875;
  t4481 = t4480*t3906;
  t4486 = t4485*t3939;
  t4491 = t4490*t3946;
  t4497 = t4496*t3954;
  t4501 = t4500*t3978;
  t4505 = t4504*t3981;
  t4510 = t4509*t3991;
  t4515 = t4514*t4008;
  t4521 = t4519*t4014;
  t4526 = t4525*t4026;
  t4530 = t4529*t4048;
  t4541 = t4540*t4054;
  t4550 = t4549*t4067;
  t4560 = t4558*t4077;
  t4561 = 0.425556*t4079;
  t4562 = -0.850685*t4094;
  t4563 = 0.069082*t4107;
  t4564 = var1[2] + t4441 + t4442 + t4447 + t4452 + t4457 + t4462 + t4468 + t4472 + t4476 + t4481 + t4486 + t4491 + t4497 + t4501 + t4505 + t4510 + t4515 + t4521 + t4526 + t4530 + t4541 + t4550 + t4560 + t4561 + t4562 + t4563;
  t4566 = 0.091*t4440*t4118;
  t4569 = 0.091*t4122*t3770;
  t4570 = t4113*t3730*t4445;
  t4571 = t4124*t4451;
  t4572 = t4132*t4456;
  t4573 = t4139*t4461;
  t4574 = t4148*t4467;
  t4575 = t4134*t4471;
  t4576 = t4475*t4152;
  t4577 = t4480*t4160;
  t4578 = t4485*t4169;
  t4579 = t4490*t4171;
  t4580 = t4496*t4176;
  t4581 = t4500*t4183;
  t4582 = t4504*t4188;
  t4583 = t4509*t4197;
  t4584 = t4514*t4204;
  t4585 = t4519*t4206;
  t4586 = t4525*t4212;
  t4587 = t4529*t4219;
  t4588 = t4540*t4222;
  t4589 = t4549*t4227;
  t4590 = t4558*t4232;
  t4591 = 0.425556*t4236;
  t4592 = -0.850685*t4243;
  t4593 = 0.069082*t4248;
  t4594 = var1[0] + t4566 + t4569 + t4570 + t4571 + t4572 + t4573 + t4574 + t4575 + t4576 + t4577 + t4578 + t4579 + t4580 + t4581 + t4582 + t4583 + t4584 + t4585 + t4586 + t4587 + t4588 + t4589 + t4590 + t4591 + t4592 + t4593;
  t4596 = 0.091*t4440*t4255;
  t4597 = 0.091*t4260*t3770;
  t4598 = t3730*t4115*t4445;
  t4599 = t4262*t4451;
  t4600 = t4266*t4456;
  t4601 = t4274*t4461;
  t4602 = t4280*t4467;
  t4603 = t4268*t4471;
  t4604 = t4475*t4282;
  t4605 = t4480*t4290;
  t4606 = t4485*t4296;
  t4607 = t4490*t4298;
  t4608 = t4496*t4303;
  t4609 = t4500*t4310;
  t4610 = t4504*t4314;
  t4611 = t4509*t4325;
  t4612 = t4514*t4332;
  t4613 = t4519*t4334;
  t4614 = t4525*t4339;
  t4615 = t4529*t4348;
  t4616 = t4540*t4350;
  t4617 = t4549*t4355;
  t4618 = t4558*t4360;
  t4619 = 0.425556*t4362;
  t4620 = -0.850685*t4368;
  t4621 = 0.069082*t4373;
  t4622 = var1[1] + t4596 + t4597 + t4598 + t4599 + t4600 + t4601 + t4602 + t4603 + t4604 + t4605 + t4606 + t4607 + t4608 + t4609 + t4610 + t4611 + t4612 + t4613 + t4614 + t4615 + t4616 + t4617 + t4618 + t4619 + t4620 + t4621;
  p_output1[0]=-1.*t3408*t4111 + t3730*t4113*t4250 + t3730*t4115*t4375;
  p_output1[1]=t3730*t3762*t4111 + t4118*t4250 + t4255*t4375;
  p_output1[2]=t3730*t3768*t4111 + t4122*t4250 + t4260*t4375;
  p_output1[3]=0;
  p_output1[4]=-1.*t3408*t4388 + t3730*t4113*t4393 + t3730*t4115*t4397;
  p_output1[5]=t3730*t3762*t4388 + t4118*t4393 + t4255*t4397;
  p_output1[6]=t3730*t3768*t4388 + t4122*t4393 + t4260*t4397;
  p_output1[7]=0;
  p_output1[8]=-1.*t3408*t4411 + t3730*t4113*t4416 + t3730*t4115*t4423;
  p_output1[9]=t3730*t3762*t4411 + t4118*t4416 + t4255*t4423;
  p_output1[10]=t3730*t3768*t4411 + t4122*t4416 + t4260*t4423;
  p_output1[11]=0;
  p_output1[12]=-1.*t3408*t4564 + t3730*t4113*t4594 + t3730*t4115*t4622 - 1.*t3730*t4113*var1[0] - 1.*t3730*t4115*var1[1] + t3408*var1[2];
  p_output1[13]=t3730*t3762*t4564 + t4118*t4594 + t4255*t4622 - 1.*t4118*var1[0] - 1.*t4255*var1[1] - 1.*t3730*t3762*var1[2];
  p_output1[14]=t3730*t3768*t4564 + t4122*t4594 + t4260*t4622 - 1.*t4122*var1[0] - 1.*t4260*var1[1] - 1.*t3730*t3768*var1[2];
  p_output1[15]=1.;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 4, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "T_leftFoot.hh"

namespace SymExpression
{

void T_leftFoot_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
