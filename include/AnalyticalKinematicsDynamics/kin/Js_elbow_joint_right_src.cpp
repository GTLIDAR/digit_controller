/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:55:47 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Js_elbow_joint_right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t62;
  double t113;
  double t135;
  double t204;
  double t314;
  double t348;
  double t346;
  double t357;
  double t368;
  double t389;
  double t397;
  double t399;
  double t652;
  double t633;
  double t769;
  double t781;
  double t432;
  double t446;
  double t454;
  double t476;
  double t477;
  double t478;
  double t785;
  double t802;
  double t817;
  double t833;
  double t837;
  double t847;
  double t911;
  double t912;
  double t913;
  double t757;
  double t820;
  double t851;
  double t857;
  double t864;
  double t870;
  double t873;
  double t958;
  double t967;
  double t971;
  double t638;
  double t680;
  double t725;
  double t889;
  double t890;
  double t904;
  double t37;
  double t942;
  double t944;
  double t949;
  double t1090;
  double t1094;
  double t1101;
  double t1063;
  double t1079;
  double t1086;
  double t741;
  double t742;
  double t747;
  double t1274;
  double t1285;
  double t1291;
  double t1294;
  double t1257;
  double t1265;
  double t1268;
  double t1472;
  double t1479;
  double t1485;
  double t1448;
  double t1633;
  double t1643;
  double t1653;
  double t1671;
  double t1536;
  double t1547;
  double t1449;
  double t1450;
  double t1496;
  double t1500;
  double t1738;
  double t1743;
  double t1745;
  double t1752;
  double t1764;
  double t1768;
  double t1769;
  double t1785;
  double t1838;
  double t1843;
  double t1845;
  double t1851;
  double t1762;
  double t1830;
  double t1852;
  double t1859;
  double t1550;
  double t1559;
  double t1919;
  double t1926;
  double t1933;
  double t1938;
  double t1607;
  double t1618;
  double t1861;
  double t1864;
  double t1878;
  double t1879;
  double t1978;
  double t1981;
  double t1986;
  double t1987;
  double t2065;
  double t2070;
  double t2090;
  double t2092;
  double t1453;
  double t1494;
  double t1507;
  double t1513;
  double t1895;
  double t1899;
  double t1907;
  double t1917;
  double t2140;
  double t2141;
  double t2148;
  double t2157;
  double t1548;
  double t1562;
  double t1566;
  double t1570;
  double t2006;
  double t2022;
  double t2024;
  double t2029;
  double t2164;
  double t2187;
  double t2189;
  double t2194;
  double t2042;
  double t2047;
  double t2053;
  double t2058;
  double t1619;
  double t1652;
  double t1699;
  double t1711;
  double t2294;
  double t2315;
  double t2318;
  double t2327;
  double t2331;
  double t2336;
  double t2338;
  double t2345;
  double t2529;
  double t2547;
  double t2560;
  double t2569;
  double t2567;
  double t2662;
  double t2577;
  double t2623;
  double t2627;
  double t2674;
  double t2680;
  double t2684;
  double t2687;
  double t2766;
  double t2816;
  double t2724;
  double t2896;
  double t2586;
  double t2844;
  double t2571;
  double t2808;
  double t2811;
  double t2823;
  double t2841;
  double t2845;
  double t2875;
  double t2882;
  double t2886;
  double t2894;
  double t2897;
  double t2901;
  double t2902;
  double t2908;
  double t2912;
  double t2926;
  double t2930;
  double t2943;
  double t2946;
  double t2949;
  double t2970;
  double t2971;
  double t2737;
  double t2761;
  double t2763;
  double t2769;
  double t2885;
  double t2922;
  double t2974;
  double t2992;
  double t3000;
  double t3015;
  double t3028;
  double t3035;
  double t2573;
  double t2587;
  double t2599;
  double t2606;
  double t3038;
  double t3043;
  double t3052;
  double t3055;
  double t3108;
  double t3119;
  double t3130;
  double t3131;
  double t2789;
  double t2798;
  double t2799;
  double t2805;
  double t2634;
  double t2683;
  double t2693;
  double t2718;
  double t3086;
  double t3088;
  double t3090;
  double t3098;
  double t3216;
  double t3225;
  double t3226;
  double t3227;
  double t3234;
  double t3240;
  double t3243;
  double t3248;
  double t2739;
  double t2764;
  double t2779;
  double t2787;
  double t3356;
  double t3364;
  double t3366;
  double t3367;
  double t3388;
  double t3391;
  double t3392;
  double t3394;
  t62 = Cos(var1[3]);
  t113 = Sin(var1[3]);
  t135 = Cos(var1[4]);
  t204 = Sin(var1[4]);
  t314 = Cos(var1[5]);
  t348 = Sin(var1[5]);
  t346 = t62*t314*t204;
  t357 = t113*t348;
  t368 = t346 + t357;
  t389 = -1.*t314*t113;
  t397 = t62*t204*t348;
  t399 = t389 + t397;
  t652 = Cos(var1[24]);
  t633 = Sin(var1[24]);
  t769 = -1.*t652;
  t781 = 1. + t769;
  t432 = t314*t113*t204;
  t446 = -1.*t62*t348;
  t454 = t432 + t446;
  t476 = t62*t314;
  t477 = t113*t204*t348;
  t478 = t476 + t477;
  t785 = 0.4*t781;
  t802 = -0.12*t633;
  t817 = 0. + t785 + t802;
  t833 = -0.12*t781;
  t837 = -0.4*t633;
  t847 = 0. + t833 + t837;
  t911 = t817*t454;
  t912 = t847*t478;
  t913 = 0. + var1[1] + t911 + t912;
  t757 = -1.*var1[2];
  t820 = -1.*t135*t314*t817;
  t851 = -1.*t135*t847*t348;
  t857 = 0. + t757 + t820 + t851;
  t864 = -1.*t633*t454;
  t870 = t652*t478;
  t873 = t864 + t870;
  t958 = t652*t454;
  t967 = t633*t478;
  t971 = t958 + t967;
  t638 = -1.*t633*t368;
  t680 = t652*t399;
  t725 = t638 + t680;
  t889 = -1.*t135*t314*t633;
  t890 = t652*t135*t348;
  t904 = t889 + t890;
  t37 = -1.*var1[0];
  t942 = t652*t135*t314;
  t944 = t135*t633*t348;
  t949 = t942 + t944;
  t1090 = -1.*t817*t368;
  t1094 = -1.*t847*t399;
  t1101 = 0. + t37 + t1090 + t1094;
  t1063 = t135*t314*t817;
  t1079 = t135*t847*t348;
  t1086 = 0. + var1[2] + t1063 + t1079;
  t741 = t652*t368;
  t742 = t633*t399;
  t747 = t741 + t742;
  t1274 = -1.*var1[1];
  t1285 = -1.*t817*t454;
  t1291 = -1.*t847*t478;
  t1294 = 0. + t1274 + t1285 + t1291;
  t1257 = t817*t368;
  t1265 = t847*t399;
  t1268 = 0. + var1[0] + t1257 + t1265;
  t1472 = Cos(var1[25]);
  t1479 = -1.*t1472;
  t1485 = 1. + t1479;
  t1448 = Sin(var1[25]);
  t1633 = 0.104528*t1448;
  t1643 = 0. + t1633;
  t1653 = 0.994522*t1448;
  t1671 = 0. + t1653;
  t1536 = -0.104528*t1448;
  t1547 = 0. + t1536;
  t1449 = -0.994522*t1448;
  t1450 = 0. + t1449;
  t1496 = -0.9890740084840001*t1485;
  t1500 = 1. + t1496;
  t1738 = -0.056500534356700764*t1485;
  t1743 = 0.040271188976*t1643;
  t1745 = 0.38315650737400003*t1671;
  t1752 = 0. + t1738 + t1743 + t1745;
  t1764 = 1.1345904784751044e-7*var1[25];
  t1768 = 0.04027119345689465*t1485;
  t1769 = -0.05650052807*t1547;
  t1785 = t1764 + t1768 + t1769;
  t1838 = -1.1924972351948546e-8*var1[25];
  t1843 = 0.38315655000705834*t1485;
  t1845 = -0.05650052807*t1450;
  t1851 = t1838 + t1843 + t1845;
  t1762 = t1752*t204;
  t1830 = -1.*t1785*t904;
  t1852 = -1.*t1851*t949;
  t1859 = 0. + t757 + t820 + t1762 + t851 + t1830 + t1852;
  t1550 = -0.010926102783999999*t1485;
  t1559 = 1. + t1550;
  t1919 = t135*t1752*t113;
  t1926 = t1785*t873;
  t1933 = t1851*t971;
  t1938 = 0. + var1[1] + t1919 + t911 + t912 + t1926 + t1933;
  t1607 = -1.0000001112680001*t1485;
  t1618 = 1. + t1607;
  t1861 = t135*t1450*t113;
  t1864 = -0.103955395616*t1485*t873;
  t1878 = t1500*t971;
  t1879 = t1861 + t1864 + t1878;
  t1978 = t135*t1547*t113;
  t1981 = t1559*t873;
  t1986 = -0.103955395616*t1485*t971;
  t1987 = t1978 + t1981 + t1986;
  t2065 = t1618*t135*t113;
  t2070 = t1643*t873;
  t2090 = t1671*t971;
  t2092 = t2065 + t2070 + t2090;
  t1453 = t62*t135*t1450;
  t1494 = -0.103955395616*t1485*t725;
  t1507 = t1500*t747;
  t1513 = t1453 + t1494 + t1507;
  t1895 = -1.*t1450*t204;
  t1899 = -0.103955395616*t1485*t904;
  t1907 = t1500*t949;
  t1917 = t1895 + t1899 + t1907;
  t2140 = -1.*t1752*t204;
  t2141 = t1785*t904;
  t2148 = t1851*t949;
  t2157 = 0. + var1[2] + t1063 + t2140 + t1079 + t2141 + t2148;
  t1548 = t62*t135*t1547;
  t1562 = t1559*t725;
  t1566 = -0.103955395616*t1485*t747;
  t1570 = t1548 + t1562 + t1566;
  t2006 = -1.*t1547*t204;
  t2022 = t1559*t904;
  t2024 = -0.103955395616*t1485*t949;
  t2029 = t2006 + t2022 + t2024;
  t2164 = -1.*t62*t135*t1752;
  t2187 = -1.*t1785*t725;
  t2189 = -1.*t1851*t747;
  t2194 = 0. + t37 + t2164 + t1090 + t1094 + t2187 + t2189;
  t2042 = -1.*t1618*t204;
  t2047 = t1643*t904;
  t2053 = t1671*t949;
  t2058 = t2042 + t2047 + t2053;
  t1619 = t1618*t62*t135;
  t1652 = t1643*t725;
  t1699 = t1671*t747;
  t1711 = t1619 + t1652 + t1699;
  t2294 = t62*t135*t1752;
  t2315 = t1785*t725;
  t2318 = t1851*t747;
  t2327 = 0. + var1[0] + t2294 + t1257 + t1265 + t2315 + t2318;
  t2331 = -1.*t135*t1752*t113;
  t2336 = -1.*t1785*t873;
  t2338 = -1.*t1851*t971;
  t2345 = 0. + t1274 + t2331 + t1285 + t1291 + t2336 + t2338;
  t2529 = Cos(var1[26]);
  t2547 = -1.*t2529;
  t2560 = 1. + t2547;
  t2569 = Sin(var1[26]);
  t2567 = -0.49726168403800003*t2560;
  t2662 = 0.051978134642000004*t2560;
  t2577 = -0.05226439969100001*t2560;
  t2623 = -0.5054634410180001*t2560;
  t2627 = 1. + t2623;
  t2674 = -0.707107*t2569;
  t2680 = t2662 + t2674;
  t2684 = -0.073913*t2569;
  t2687 = t2567 + t2684;
  t2766 = 0.703234*t2569;
  t2816 = -0.051978134642000004*t2560;
  t2724 = 0.707107*t2569;
  t2896 = 0.05226439969100001*t2560;
  t2586 = -0.703234*t2569;
  t2844 = 0.49726168403800003*t2560;
  t2571 = 0.073913*t2569;
  t2808 = 1.5601527583902087e-7*var1[26];
  t2811 = 0.09582494577057615*t2560;
  t2823 = t2816 + t2674;
  t2841 = -0.231098203479*t2823;
  t2845 = t2844 + t2684;
  t2875 = 0.164383620275*t2845;
  t2882 = t2808 + t2811 + t2841 + t2875;
  t2886 = 1.639789470231751e-8*var1[26];
  t2894 = -0.22983603018311177*t2560;
  t2897 = t2896 + t2766;
  t2901 = 0.164383620275*t2897;
  t2902 = t2816 + t2724;
  t2908 = 0.18957839082800002*t2902;
  t2912 = t2886 + t2894 + t2901 + t2908;
  t2926 = -1.568745163810375e-7*var1[26];
  t2930 = 0.08219200580743281*t2560;
  t2943 = t2896 + t2586;
  t2946 = -0.231098203479*t2943;
  t2949 = t2844 + t2571;
  t2970 = 0.18957839082800002*t2949;
  t2971 = t2926 + t2930 + t2946 + t2970;
  t2737 = t2662 + t2724;
  t2761 = -0.9945383682050002*t2560;
  t2763 = 1. + t2761;
  t2769 = t2577 + t2766;
  t2885 = t2882*t1879;
  t2922 = t2912*t1987;
  t2974 = t2971*t2092;
  t2992 = 0. + var1[1] + t1919 + t911 + t912 + t1926 + t1933 + t2885 + t2922 + t2974;
  t3000 = -1.*t2882*t1917;
  t3015 = -1.*t2912*t2029;
  t3028 = -1.*t2971*t2058;
  t3035 = 0. + t757 + t820 + t1762 + t851 + t1830 + t1852 + t3000 + t3015 + t3028;
  t2573 = t2567 + t2571;
  t2587 = t2577 + t2586;
  t2599 = -0.500001190325*t2560;
  t2606 = 1. + t2599;
  t3038 = t2627*t1879;
  t3043 = t2680*t1987;
  t3052 = t2687*t2092;
  t3055 = t3038 + t3043 + t3052;
  t3108 = t2737*t1879;
  t3119 = t2763*t1987;
  t3130 = t2769*t2092;
  t3131 = t3108 + t3119 + t3130;
  t2789 = t2627*t1917;
  t2798 = t2680*t2029;
  t2799 = t2687*t2058;
  t2805 = t2789 + t2798 + t2799;
  t2634 = t2627*t1513;
  t2683 = t2680*t1570;
  t2693 = t2687*t1711;
  t2718 = t2634 + t2683 + t2693;
  t3086 = t2737*t1917;
  t3088 = t2763*t2029;
  t3090 = t2769*t2058;
  t3098 = t3086 + t3088 + t3090;
  t3216 = -1.*t2882*t1513;
  t3225 = -1.*t2912*t1570;
  t3226 = -1.*t2971*t1711;
  t3227 = 0. + t37 + t2164 + t1090 + t1094 + t2187 + t2189 + t3216 + t3225 + t3226;
  t3234 = t2882*t1917;
  t3240 = t2912*t2029;
  t3243 = t2971*t2058;
  t3248 = 0. + var1[2] + t1063 + t2140 + t1079 + t2141 + t2148 + t3234 + t3240 + t3243;
  t2739 = t2737*t1513;
  t2764 = t2763*t1570;
  t2779 = t2769*t1711;
  t2787 = t2739 + t2764 + t2779;
  t3356 = -1.*t2882*t1879;
  t3364 = -1.*t2912*t1987;
  t3366 = -1.*t2971*t2092;
  t3367 = 0. + t1274 + t2331 + t1285 + t1291 + t2336 + t2338 + t3356 + t3364 + t3366;
  t3388 = t2882*t1513;
  t3391 = t2912*t1570;
  t3392 = t2971*t1711;
  t3394 = 0. + var1[0] + t2294 + t1257 + t1265 + t2315 + t2318 + t3388 + t3391 + t3392;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=1.;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=1.;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=var1[1];
  p_output1[19]=t37;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=-1.*t62*var1[2];
  p_output1[25]=-1.*t113*var1[2];
  p_output1[26]=t62*var1[0] + t113*var1[1];
  p_output1[27]=-1.*t113;
  p_output1[28]=t62;
  p_output1[29]=0;
  p_output1[30]=-1.*t204*var1[1] - 1.*t113*t135*var1[2];
  p_output1[31]=t204*var1[0] + t135*t62*var1[2];
  p_output1[32]=t113*t135*var1[0] - 1.*t135*t62*var1[1];
  p_output1[33]=t135*t62;
  p_output1[34]=t113*t135;
  p_output1[35]=-1.*t204;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=-0.12*t368 - 0.4*t399 + t204*var1[1] + t113*t135*var1[2];
  p_output1[145]=-0.12*t454 - 0.4*t478 - 1.*t204*var1[0] - 1.*t135*t62*var1[2];
  p_output1[146]=-0.12*t135*t314 - 0.4*t135*t348 - 1.*t113*t135*var1[0] + t135*t62*var1[1];
  p_output1[147]=0. - 1.*t135*t62;
  p_output1[148]=0. - 1.*t113*t135;
  p_output1[149]=0. + t204;
  p_output1[150]=0.385267*t135*t62 + 0.005906*t725 + 0.056191*t747 - 0.994522*(t857*t873 + t904*t913) + 0.104528*(t913*t949 + t857*t971);
  p_output1[151]=0.385267*t113*t135 + 0.005906*t873 - 0.994522*(t1086*t725 + t1101*t904) + 0.104528*(t1086*t747 + t1101*t949) + 0.056191*t971;
  p_output1[152]=-0.385267*t204 - 0.994522*(t1294*t725 + t1268*t873) + 0.005906*t904 + 0.056191*t949 + 0.104528*(t1294*t747 + t1268*t971);
  p_output1[153]=0. - 0.994522*t725 + 0.104528*t747;
  p_output1[154]=0. - 0.994522*t873 + 0.104528*t971;
  p_output1[155]=0. - 0.994522*t904 + 0.104528*t949;
  p_output1[156]=0.151261*t1513 + 0.249652*t1570 + 0.176528*t1711 - 0.703234*(t1859*t1879 + t1917*t1938) - 0.073913*(t1859*t1987 + t1938*t2029) + 0.707107*(t1938*t2058 + t1859*t2092);
  p_output1[157]=0.151261*t1879 + 0.249652*t1987 + 0.176528*t2092 - 0.703234*(t1513*t2157 + t1917*t2194) - 0.073913*(t1570*t2157 + t2029*t2194) + 0.707107*(t1711*t2157 + t2058*t2194);
  p_output1[158]=0.151261*t1917 + 0.249652*t2029 + 0.176528*t2058 - 0.703234*(t1879*t2327 + t1513*t2345) - 0.073913*(t1987*t2327 + t1570*t2345) + 0.707107*(t2092*t2327 + t1711*t2345);
  p_output1[159]=0. - 0.703234*t1513 - 0.073913*t1570 + 0.707107*t1711;
  p_output1[160]=0. - 0.703234*t1879 - 0.073913*t1987 + 0.707107*t2092;
  p_output1[161]=0. - 0.703234*t1917 - 0.073913*t2029 + 0.707107*t2058;
  p_output1[162]=0.137779*(t1513*t2573 + t1570*t2587 + t1711*t2606) - 0.189941*t2718 - 0.019964*t2787 + 0.104528*(t2805*t2992 + t3035*t3055) - 0.994522*(t2992*t3098 + t3035*t3131);
  p_output1[163]=0.137779*(t1879*t2573 + t1987*t2587 + t2092*t2606) - 0.189941*t3055 - 0.019964*t3131 + 0.104528*(t2805*t3227 + t2718*t3248) - 0.994522*(t3098*t3227 + t2787*t3248);
  p_output1[164]=0.137779*(t1917*t2573 + t2029*t2587 + t2058*t2606) - 0.189941*t2805 - 0.019964*t3098 + 0.104528*(t2718*t3367 + t3055*t3394) - 0.994522*(t2787*t3367 + t3131*t3394);
  p_output1[165]=0. + 0.104528*t2718 - 0.994522*t2787;
  p_output1[166]=0. + 0.104528*t3055 - 0.994522*t3131;
  p_output1[167]=0. + 0.104528*t2805 - 0.994522*t3098;
}



void Js_elbow_joint_right_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
