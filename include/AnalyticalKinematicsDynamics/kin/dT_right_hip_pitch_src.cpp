/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:09:50 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dT_right_hip_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t163;
  double t915;
  double t794;
  double t809;
  double t883;
  double t1160;
  double t922;
  double t1121;
  double t1171;
  double t7;
  double t198;
  double t398;
  double t1149;
  double t1185;
  double t1187;
  double t1262;
  double t1275;
  double t1376;
  double t1826;
  double t1835;
  double t1838;
  double t236;
  double t359;
  double t436;
  double t1221;
  double t1244;
  double t1254;
  double t1387;
  double t1464;
  double t1538;
  double t1567;
  double t1577;
  double t1629;
  double t1751;
  double t1763;
  double t1766;
  double t1767;
  double t1945;
  double t1949;
  double t1957;
  double t1969;
  double t2025;
  double t2029;
  double t2030;
  double t2032;
  double t2040;
  double t2073;
  double t1479;
  double t1512;
  double t2509;
  double t2491;
  double t2528;
  double t2533;
  double t2565;
  double t2566;
  double t2576;
  double t55;
  double t56;
  double t2535;
  double t2581;
  double t2582;
  double t2613;
  double t2614;
  double t2626;
  double t1943;
  double t1944;
  double t2609;
  double t2638;
  double t2654;
  double t2136;
  double t2167;
  double t2665;
  double t2678;
  double t2704;
  double t2209;
  double t2235;
  double t2742;
  double t2744;
  double t2749;
  double t2358;
  double t2383;
  double t2391;
  double t2396;
  double t2994;
  double t3004;
  double t3014;
  double t2948;
  double t3023;
  double t3025;
  double t3035;
  double t3043;
  double t3072;
  double t3029;
  double t3076;
  double t3100;
  double t3105;
  double t3115;
  double t3117;
  double t3124;
  double t3131;
  double t3133;
  double t3213;
  double t3216;
  double t3212;
  double t3222;
  double t3234;
  double t3258;
  double t3269;
  double t3279;
  double t3304;
  double t3330;
  double t3338;
  double t3344;
  double t3358;
  double t3471;
  double t3479;
  double t3484;
  double t3490;
  double t3500;
  double t3505;
  double t3507;
  double t3508;
  double t3515;
  double t3525;
  double t3536;
  double t3537;
  double t3769;
  double t3781;
  double t3790;
  double t3801;
  double t3802;
  double t3808;
  double t3798;
  double t3810;
  double t3814;
  double t3816;
  double t3825;
  double t3827;
  double t3768;
  double t3815;
  double t3828;
  double t3829;
  double t3841;
  double t3847;
  double t3856;
  double t3868;
  double t3878;
  double t3885;
  double t3886;
  double t3891;
  double t3986;
  double t3996;
  double t4007;
  double t4033;
  double t4039;
  double t4044;
  double t3978;
  double t4025;
  double t4048;
  double t4052;
  double t4056;
  double t4058;
  double t4071;
  double t4077;
  double t4087;
  double t4088;
  double t4093;
  double t4097;
  double t4320;
  double t4327;
  double t4331;
  double t4338;
  double t4350;
  double t4352;
  double t4360;
  double t4365;
  double t4351;
  double t4371;
  double t4376;
  double t4394;
  double t4395;
  double t4396;
  double t4417;
  double t4418;
  double t4425;
  double t4522;
  double t4524;
  double t4525;
  double t4520;
  double t4526;
  double t4527;
  double t4546;
  double t4548;
  double t4550;
  double t4528;
  double t4555;
  double t4556;
  double t4559;
  double t4560;
  double t4573;
  double t4576;
  double t4578;
  double t4581;
  double t4630;
  double t4639;
  double t4629;
  double t4641;
  double t4642;
  double t4647;
  double t4651;
  double t4656;
  double t4661;
  double t4663;
  double t4666;
  double t4670;
  double t4675;
  double t4727;
  double t4729;
  double t4730;
  double t4732;
  double t4743;
  double t4752;
  double t4753;
  double t4755;
  double t4759;
  double t4771;
  double t4774;
  double t4777;
  double t4845;
  double t4847;
  double t4848;
  double t4851;
  double t4852;
  double t4853;
  double t4849;
  double t4854;
  double t4856;
  double t4864;
  double t4866;
  double t4871;
  double t4879;
  double t4880;
  double t4881;
  double t5026;
  double t5047;
  double t5051;
  double t5070;
  double t5075;
  double t5079;
  double t5064;
  double t5081;
  double t5083;
  double t5101;
  double t5107;
  double t5109;
  double t5119;
  double t5130;
  double t5134;
  double t5323;
  double t5324;
  double t5329;
  double t5339;
  double t5340;
  double t5342;
  double t5347;
  double t5356;
  double t5363;
  double t5370;
  double t5447;
  double t5449;
  double t5453;
  double t5461;
  double t5479;
  double t5480;
  double t5491;
  double t5493;
  double t5505;
  double t5508;
  double t5512;
  double t5525;
  double t5655;
  double t5664;
  double t5665;
  double t5675;
  double t5681;
  double t5682;
  double t5650;
  double t5669;
  double t5685;
  double t5686;
  double t5693;
  double t5698;
  double t5710;
  double t5713;
  double t5734;
  double t5735;
  double t5738;
  double t5754;
  double t1470;
  double t1824;
  double t2077;
  double t2085;
  double t2168;
  double t2204;
  double t2238;
  double t2268;
  double t2271;
  double t2310;
  double t2389;
  double t2420;
  double t2424;
  double t2436;
  double t2658;
  double t2722;
  double t2759;
  double t2782;
  double t2797;
  double t2801;
  double t2827;
  double t2864;
  double t2889;
  double t2897;
  double t2923;
  double t2925;
  double t2926;
  double t2933;
  double t3102;
  double t3120;
  double t3141;
  double t3144;
  double t3148;
  double t3153;
  double t3161;
  double t3167;
  double t3170;
  double t3171;
  double t3172;
  double t3174;
  double t3177;
  double t3190;
  double t3243;
  double t3308;
  double t3364;
  double t3383;
  double t3392;
  double t3396;
  double t3414;
  double t3416;
  double t3420;
  double t3421;
  double t3423;
  double t3426;
  double t3437;
  double t3439;
  double t3499;
  double t3514;
  double t3548;
  double t3551;
  double t3558;
  double t3578;
  double t3583;
  double t3610;
  double t3614;
  double t3621;
  double t3623;
  double t3651;
  double t3710;
  double t3712;
  double t3836;
  double t3872;
  double t3892;
  double t3893;
  double t3900;
  double t3901;
  double t3903;
  double t3907;
  double t3908;
  double t3912;
  double t3917;
  double t3930;
  double t3931;
  double t3940;
  double t4055;
  double t4085;
  double t4106;
  double t4111;
  double t4142;
  double t4161;
  double t4171;
  double t4172;
  double t4173;
  double t4177;
  double t4182;
  double t4185;
  double t4188;
  double t4192;
  double t4212;
  double t4221;
  double t4232;
  double t4235;
  double t4238;
  double t4249;
  double t4250;
  double t4264;
  double t4265;
  double t4267;
  double t4272;
  double t4276;
  double t4279;
  double t4294;
  double t4391;
  double t4406;
  double t4435;
  double t4439;
  double t4481;
  double t4483;
  double t4490;
  double t4493;
  double t4495;
  double t4510;
  double t4511;
  double t4512;
  double t4513;
  double t4514;
  double t4557;
  double t4574;
  double t4586;
  double t4588;
  double t4599;
  double t4604;
  double t4608;
  double t4613;
  double t4615;
  double t4616;
  double t4617;
  double t4619;
  double t4621;
  double t4622;
  double t4645;
  double t4662;
  double t4678;
  double t4690;
  double t4692;
  double t4694;
  double t4695;
  double t4697;
  double t4698;
  double t4709;
  double t4711;
  double t4717;
  double t4720;
  double t4721;
  double t4740;
  double t4758;
  double t4783;
  double t4787;
  double t4796;
  double t4797;
  double t4808;
  double t4811;
  double t4816;
  double t4818;
  double t4820;
  double t4823;
  double t4826;
  double t4829;
  double t4862;
  double t4877;
  double t4927;
  double t4928;
  double t4958;
  double t4967;
  double t4969;
  double t4970;
  double t4978;
  double t4979;
  double t4992;
  double t5004;
  double t5006;
  double t5008;
  double t5090;
  double t5114;
  double t5139;
  double t5144;
  double t5157;
  double t5168;
  double t5182;
  double t5193;
  double t5199;
  double t5227;
  double t5267;
  double t5278;
  double t5281;
  double t5291;
  double t5336;
  double t5345;
  double t5374;
  double t5382;
  double t5390;
  double t5391;
  double t5396;
  double t5398;
  double t5402;
  double t5410;
  double t5422;
  double t5425;
  double t5427;
  double t5429;
  double t5462;
  double t5498;
  double t5530;
  double t5542;
  double t5549;
  double t5556;
  double t5567;
  double t5568;
  double t5585;
  double t5595;
  double t5603;
  double t5606;
  double t5616;
  double t5634;
  double t5687;
  double t5732;
  double t5758;
  double t5760;
  double t5777;
  double t5782;
  double t5785;
  double t5787;
  double t5788;
  double t5791;
  double t5795;
  double t5798;
  double t5802;
  double t5819;
  double t6719;
  double t6721;
  double t6738;
  double t6740;
  double t6687;
  double t6693;
  double t6776;
  double t6779;
  double t6788;
  double t6791;
  double t6744;
  double t6747;
  double t6751;
  double t6753;
  double t6829;
  double t6830;
  double t6837;
  double t6840;
  double t6803;
  double t6812;
  double t6818;
  double t6825;
  double t6859;
  double t6870;
  double t6873;
  double t6876;
  double t6704;
  double t6707;
  double t6711;
  double t6715;
  double t7018;
  double t7019;
  double t7021;
  double t7033;
  double t7038;
  double t7040;
  double t7051;
  double t7060;
  double t7063;
  double t7108;
  double t7114;
  double t7115;
  double t7119;
  double t7124;
  double t7125;
  double t7134;
  double t7136;
  double t7140;
  t163 = Cos(var1[3]);
  t915 = Cos(var1[4]);
  t794 = Cos(var1[18]);
  t809 = -1.*t794;
  t883 = 1. + t809;
  t1160 = Cos(var1[17]);
  t922 = Cos(var1[5]);
  t1121 = Sin(var1[17]);
  t1171 = Sin(var1[5]);
  t7 = Sin(var1[19]);
  t198 = Sin(var1[18]);
  t398 = Sin(var1[4]);
  t1149 = -1.*t163*t915*t922*t1121;
  t1185 = t1160*t163*t915*t1171;
  t1187 = t1149 + t1185;
  t1262 = t1160*t163*t915*t922;
  t1275 = t163*t915*t1121*t1171;
  t1376 = t1262 + t1275;
  t1826 = Cos(var1[19]);
  t1835 = -1.*t1826;
  t1838 = 1. + t1835;
  t236 = -0.366501*t198;
  t359 = 0. + t236;
  t436 = -1.*t163*t359*t398;
  t1221 = 0.340999127418*t883*t1187;
  t1244 = -0.134322983001*t883;
  t1254 = 1. + t1244;
  t1387 = t1254*t1376;
  t1464 = t436 + t1221 + t1387;
  t1538 = 0.930418*t198;
  t1567 = 0. + t1538;
  t1577 = -1.*t163*t1567*t398;
  t1629 = -0.8656776547239999*t883;
  t1751 = 1. + t1629;
  t1763 = t1751*t1187;
  t1766 = 0.340999127418*t883*t1376;
  t1767 = t1577 + t1763 + t1766;
  t1945 = -1.000000637725*t883;
  t1949 = 1. + t1945;
  t1957 = -1.*t1949*t163*t398;
  t1969 = -0.930418*t198;
  t2025 = 0. + t1969;
  t2029 = t2025*t1187;
  t2030 = 0.366501*t198;
  t2032 = 0. + t2030;
  t2040 = t2032*t1376;
  t2073 = t1957 + t2029 + t2040;
  t1479 = 0.366501*t7;
  t1512 = 0. + t1479;
  t2509 = Sin(var1[3]);
  t2491 = t163*t922*t398;
  t2528 = t2509*t1171;
  t2533 = t2491 + t2528;
  t2565 = t922*t2509;
  t2566 = -1.*t163*t398*t1171;
  t2576 = t2565 + t2566;
  t55 = 0.930418*t7;
  t56 = 0. + t55;
  t2535 = t1121*t2533;
  t2581 = t1160*t2576;
  t2582 = t2535 + t2581;
  t2613 = t1160*t2533;
  t2614 = -1.*t1121*t2576;
  t2626 = t2613 + t2614;
  t1943 = -1.000000637725*t1838;
  t1944 = 1. + t1943;
  t2609 = 0.340999127418*t883*t2582;
  t2638 = t1751*t2626;
  t2654 = t2609 + t2638;
  t2136 = -0.8656776547239999*t1838;
  t2167 = 1. + t2136;
  t2665 = t1254*t2582;
  t2678 = 0.340999127418*t883*t2626;
  t2704 = t2665 + t2678;
  t2209 = -0.930418*t7;
  t2235 = 0. + t2209;
  t2742 = t2032*t2582;
  t2744 = t2025*t2626;
  t2749 = t2742 + t2744;
  t2358 = -0.134322983001*t1838;
  t2383 = 1. + t2358;
  t2391 = -0.366501*t7;
  t2396 = 0. + t2391;
  t2994 = -1.*t922*t2509;
  t3004 = t163*t398*t1171;
  t3014 = t2994 + t3004;
  t2948 = -1.*t1121*t2533;
  t3023 = t1160*t3014;
  t3025 = t2948 + t3023;
  t3035 = -1.*t1160*t2533;
  t3043 = -1.*t1121*t3014;
  t3072 = t3035 + t3043;
  t3029 = 0.340999127418*t883*t3025;
  t3076 = t1751*t3072;
  t3100 = t3029 + t3076;
  t3105 = t1254*t3025;
  t3115 = 0.340999127418*t883*t3072;
  t3117 = t3105 + t3115;
  t3124 = t2032*t3025;
  t3131 = t2025*t3072;
  t3133 = t3124 + t3131;
  t3213 = t1121*t3014;
  t3216 = t2613 + t3213;
  t3212 = t163*t915*t359;
  t3222 = t1254*t3216;
  t3234 = t3212 + t3029 + t3222;
  t3258 = t163*t915*t1567;
  t3269 = t1751*t3025;
  t3279 = 0.340999127418*t883*t3216;
  t3304 = t3258 + t3269 + t3279;
  t3330 = t1949*t163*t915;
  t3338 = t2025*t3025;
  t3344 = t2032*t3216;
  t3358 = t3330 + t3338 + t3344;
  t3471 = -1.000000637725*t163*t915*t198;
  t3479 = -0.930418*t794*t3025;
  t3484 = 0.366501*t794*t3216;
  t3490 = t3471 + t3479 + t3484;
  t3500 = -0.366501*t794*t163*t915;
  t3505 = 0.340999127418*t198*t3025;
  t3507 = -0.134322983001*t198*t3216;
  t3508 = t3500 + t3505 + t3507;
  t3515 = 0.930418*t794*t163*t915;
  t3525 = -0.8656776547239999*t198*t3025;
  t3536 = 0.340999127418*t198*t3216;
  t3537 = t3515 + t3525 + t3536;
  t3769 = -1.*t922*t2509*t398;
  t3781 = t163*t1171;
  t3790 = t3769 + t3781;
  t3801 = -1.*t163*t922;
  t3802 = -1.*t2509*t398*t1171;
  t3808 = t3801 + t3802;
  t3798 = -1.*t1121*t3790;
  t3810 = t1160*t3808;
  t3814 = t3798 + t3810;
  t3816 = t1160*t3790;
  t3825 = t1121*t3808;
  t3827 = t3816 + t3825;
  t3768 = -1.*t915*t359*t2509;
  t3815 = 0.340999127418*t883*t3814;
  t3828 = t1254*t3827;
  t3829 = t3768 + t3815 + t3828;
  t3841 = -1.*t915*t1567*t2509;
  t3847 = t1751*t3814;
  t3856 = 0.340999127418*t883*t3827;
  t3868 = t3841 + t3847 + t3856;
  t3878 = -1.*t1949*t915*t2509;
  t3885 = t2025*t3814;
  t3886 = t2032*t3827;
  t3891 = t3878 + t3885 + t3886;
  t3986 = -1.*t915*t922*t1121*t2509;
  t3996 = t1160*t915*t2509*t1171;
  t4007 = t3986 + t3996;
  t4033 = t1160*t915*t922*t2509;
  t4039 = t915*t1121*t2509*t1171;
  t4044 = t4033 + t4039;
  t3978 = -1.*t359*t2509*t398;
  t4025 = 0.340999127418*t883*t4007;
  t4048 = t1254*t4044;
  t4052 = t3978 + t4025 + t4048;
  t4056 = -1.*t1567*t2509*t398;
  t4058 = t1751*t4007;
  t4071 = 0.340999127418*t883*t4044;
  t4077 = t4056 + t4058 + t4071;
  t4087 = -1.*t1949*t2509*t398;
  t4088 = t2025*t4007;
  t4093 = t2032*t4044;
  t4097 = t4087 + t4088 + t4093;
  t4320 = t922*t2509*t398;
  t4327 = -1.*t163*t1171;
  t4331 = t4320 + t4327;
  t4338 = t1121*t4331;
  t4350 = t4338 + t3810;
  t4352 = t1160*t4331;
  t4360 = -1.*t1121*t3808;
  t4365 = t4352 + t4360;
  t4351 = 0.340999127418*t883*t4350;
  t4371 = t1751*t4365;
  t4376 = t4351 + t4371;
  t4394 = t1254*t4350;
  t4395 = 0.340999127418*t883*t4365;
  t4396 = t4394 + t4395;
  t4417 = t2032*t4350;
  t4418 = t2025*t4365;
  t4425 = t4417 + t4418;
  t4522 = t163*t922;
  t4524 = t2509*t398*t1171;
  t4525 = t4522 + t4524;
  t4520 = -1.*t1121*t4331;
  t4526 = t1160*t4525;
  t4527 = t4520 + t4526;
  t4546 = -1.*t1160*t4331;
  t4548 = -1.*t1121*t4525;
  t4550 = t4546 + t4548;
  t4528 = 0.340999127418*t883*t4527;
  t4555 = t1751*t4550;
  t4556 = t4528 + t4555;
  t4559 = t1254*t4527;
  t4560 = 0.340999127418*t883*t4550;
  t4573 = t4559 + t4560;
  t4576 = t2032*t4527;
  t4578 = t2025*t4550;
  t4581 = t4576 + t4578;
  t4630 = t1121*t4525;
  t4639 = t4352 + t4630;
  t4629 = t915*t359*t2509;
  t4641 = t1254*t4639;
  t4642 = t4629 + t4528 + t4641;
  t4647 = t915*t1567*t2509;
  t4651 = t1751*t4527;
  t4656 = 0.340999127418*t883*t4639;
  t4661 = t4647 + t4651 + t4656;
  t4663 = t1949*t915*t2509;
  t4666 = t2025*t4527;
  t4670 = t2032*t4639;
  t4675 = t4663 + t4666 + t4670;
  t4727 = -1.000000637725*t915*t198*t2509;
  t4729 = -0.930418*t794*t4527;
  t4730 = 0.366501*t794*t4639;
  t4732 = t4727 + t4729 + t4730;
  t4743 = -0.366501*t794*t915*t2509;
  t4752 = 0.340999127418*t198*t4527;
  t4753 = -0.134322983001*t198*t4639;
  t4755 = t4743 + t4752 + t4753;
  t4759 = 0.930418*t794*t915*t2509;
  t4771 = -0.8656776547239999*t198*t4527;
  t4774 = 0.340999127418*t198*t4639;
  t4777 = t4759 + t4771 + t4774;
  t4845 = -1.*t915*t922*t1121;
  t4847 = t1160*t915*t1171;
  t4848 = t4845 + t4847;
  t4851 = -1.*t1160*t915*t922;
  t4852 = -1.*t915*t1121*t1171;
  t4853 = t4851 + t4852;
  t4849 = 0.340999127418*t883*t4848;
  t4854 = t1751*t4853;
  t4856 = t4849 + t4854;
  t4864 = t1254*t4848;
  t4866 = 0.340999127418*t883*t4853;
  t4871 = t4864 + t4866;
  t4879 = t2032*t4848;
  t4880 = t2025*t4853;
  t4881 = t4879 + t4880;
  t5026 = t915*t922*t1121;
  t5047 = -1.*t1160*t915*t1171;
  t5051 = t5026 + t5047;
  t5070 = t1160*t915*t922;
  t5075 = t915*t1121*t1171;
  t5079 = t5070 + t5075;
  t5064 = 0.340999127418*t883*t5051;
  t5081 = t1751*t5079;
  t5083 = t5064 + t5081;
  t5101 = t1254*t5051;
  t5107 = 0.340999127418*t883*t5079;
  t5109 = t5101 + t5107;
  t5119 = t2032*t5051;
  t5130 = t2025*t5079;
  t5134 = t5119 + t5130;
  t5323 = -1.*t359*t398;
  t5324 = t1254*t5079;
  t5329 = t5323 + t4849 + t5324;
  t5339 = -1.*t1567*t398;
  t5340 = t1751*t4848;
  t5342 = t5339 + t5340 + t5107;
  t5347 = -1.*t1949*t398;
  t5356 = t2025*t4848;
  t5363 = t2032*t5079;
  t5370 = t5347 + t5356 + t5363;
  t5447 = 1.000000637725*t198*t398;
  t5449 = -0.930418*t794*t4848;
  t5453 = 0.366501*t794*t5079;
  t5461 = t5447 + t5449 + t5453;
  t5479 = 0.366501*t794*t398;
  t5480 = 0.340999127418*t198*t4848;
  t5491 = -0.134322983001*t198*t5079;
  t5493 = t5479 + t5480 + t5491;
  t5505 = -0.930418*t794*t398;
  t5508 = -0.8656776547239999*t198*t4848;
  t5512 = 0.340999127418*t198*t5079;
  t5525 = t5505 + t5508 + t5512;
  t5655 = t922*t1121*t398;
  t5664 = -1.*t1160*t398*t1171;
  t5665 = t5655 + t5664;
  t5675 = -1.*t1160*t922*t398;
  t5681 = -1.*t1121*t398*t1171;
  t5682 = t5675 + t5681;
  t5650 = -1.*t915*t359;
  t5669 = 0.340999127418*t883*t5665;
  t5685 = t1254*t5682;
  t5686 = t5650 + t5669 + t5685;
  t5693 = -1.*t915*t1567;
  t5698 = t1751*t5665;
  t5710 = 0.340999127418*t883*t5682;
  t5713 = t5693 + t5698 + t5710;
  t5734 = -1.*t1949*t915;
  t5735 = t2025*t5665;
  t5738 = t2032*t5682;
  t5754 = t5734 + t5735 + t5738;
  t1470 = t56*t1464;
  t1824 = t1512*t1767;
  t2077 = t1944*t2073;
  t2085 = t1470 + t1824 + t2077;
  t2168 = t2167*t1464;
  t2204 = -0.340999127418*t1838*t1767;
  t2238 = t2235*t2073;
  t2268 = t2168 + t2204 + t2238;
  t2271 = -0.657905*t2268;
  t2310 = -0.340999127418*t1838*t1464;
  t2389 = t2383*t1767;
  t2420 = t2396*t2073;
  t2424 = t2310 + t2389 + t2420;
  t2436 = -0.259155*t2424;
  t2658 = t1512*t2654;
  t2722 = t56*t2704;
  t2759 = t1944*t2749;
  t2782 = t2658 + t2722 + t2759;
  t2797 = -0.340999127418*t1838*t2654;
  t2801 = t2167*t2704;
  t2827 = t2235*t2749;
  t2864 = t2797 + t2801 + t2827;
  t2889 = -0.657905*t2864;
  t2897 = t2383*t2654;
  t2923 = -0.340999127418*t1838*t2704;
  t2925 = t2396*t2749;
  t2926 = t2897 + t2923 + t2925;
  t2933 = -0.259155*t2926;
  t3102 = t1512*t3100;
  t3120 = t56*t3117;
  t3141 = t1944*t3133;
  t3144 = t3102 + t3120 + t3141;
  t3148 = -0.340999127418*t1838*t3100;
  t3153 = t2167*t3117;
  t3161 = t2235*t3133;
  t3167 = t3148 + t3153 + t3161;
  t3170 = -0.657905*t3167;
  t3171 = t2383*t3100;
  t3172 = -0.340999127418*t1838*t3117;
  t3174 = t2396*t3133;
  t3177 = t3171 + t3172 + t3174;
  t3190 = -0.259155*t3177;
  t3243 = -0.8656776547239999*t7*t3234;
  t3308 = -0.340999127418*t7*t3304;
  t3364 = -0.930418*t1826*t3358;
  t3383 = t3243 + t3308 + t3364;
  t3392 = -0.657905*t3383;
  t3396 = -0.340999127418*t7*t3234;
  t3414 = -0.134322983001*t7*t3304;
  t3416 = -0.366501*t1826*t3358;
  t3420 = t3396 + t3414 + t3416;
  t3421 = -0.259155*t3420;
  t3423 = 0.930418*t1826*t3234;
  t3426 = 0.366501*t1826*t3304;
  t3437 = -1.000000637725*t7*t3358;
  t3439 = t3423 + t3426 + t3437;
  t3499 = t2396*t3490;
  t3514 = -0.340999127418*t1838*t3508;
  t3548 = t2383*t3537;
  t3551 = t3499 + t3514 + t3548;
  t3558 = -0.259155*t3551;
  t3578 = t2235*t3490;
  t3583 = t2167*t3508;
  t3610 = -0.340999127418*t1838*t3537;
  t3614 = t3578 + t3583 + t3610;
  t3621 = -0.657905*t3614;
  t3623 = t1944*t3490;
  t3651 = t56*t3508;
  t3710 = t1512*t3537;
  t3712 = t3623 + t3651 + t3710;
  t3836 = t56*t3829;
  t3872 = t1512*t3868;
  t3892 = t1944*t3891;
  t3893 = t3836 + t3872 + t3892;
  t3900 = t2167*t3829;
  t3901 = -0.340999127418*t1838*t3868;
  t3903 = t2235*t3891;
  t3907 = t3900 + t3901 + t3903;
  t3908 = -0.657905*t3907;
  t3912 = -0.340999127418*t1838*t3829;
  t3917 = t2383*t3868;
  t3930 = t2396*t3891;
  t3931 = t3912 + t3917 + t3930;
  t3940 = -0.259155*t3931;
  t4055 = t56*t4052;
  t4085 = t1512*t4077;
  t4106 = t1944*t4097;
  t4111 = t4055 + t4085 + t4106;
  t4142 = t2167*t4052;
  t4161 = -0.340999127418*t1838*t4077;
  t4171 = t2235*t4097;
  t4172 = t4142 + t4161 + t4171;
  t4173 = -0.657905*t4172;
  t4177 = -0.340999127418*t1838*t4052;
  t4182 = t2383*t4077;
  t4185 = t2396*t4097;
  t4188 = t4177 + t4182 + t4185;
  t4192 = -0.259155*t4188;
  t4212 = t56*t3234;
  t4221 = t1512*t3304;
  t4232 = t1944*t3358;
  t4235 = t4212 + t4221 + t4232;
  t4238 = t2167*t3234;
  t4249 = -0.340999127418*t1838*t3304;
  t4250 = t2235*t3358;
  t4264 = t4238 + t4249 + t4250;
  t4265 = -0.657905*t4264;
  t4267 = -0.340999127418*t1838*t3234;
  t4272 = t2383*t3304;
  t4276 = t2396*t3358;
  t4279 = t4267 + t4272 + t4276;
  t4294 = -0.259155*t4279;
  t4391 = t1512*t4376;
  t4406 = t56*t4396;
  t4435 = t1944*t4425;
  t4439 = t4391 + t4406 + t4435;
  t4481 = -0.340999127418*t1838*t4376;
  t4483 = t2167*t4396;
  t4490 = t2235*t4425;
  t4493 = t4481 + t4483 + t4490;
  t4495 = -0.657905*t4493;
  t4510 = t2383*t4376;
  t4511 = -0.340999127418*t1838*t4396;
  t4512 = t2396*t4425;
  t4513 = t4510 + t4511 + t4512;
  t4514 = -0.259155*t4513;
  t4557 = t1512*t4556;
  t4574 = t56*t4573;
  t4586 = t1944*t4581;
  t4588 = t4557 + t4574 + t4586;
  t4599 = -0.340999127418*t1838*t4556;
  t4604 = t2167*t4573;
  t4608 = t2235*t4581;
  t4613 = t4599 + t4604 + t4608;
  t4615 = -0.657905*t4613;
  t4616 = t2383*t4556;
  t4617 = -0.340999127418*t1838*t4573;
  t4619 = t2396*t4581;
  t4621 = t4616 + t4617 + t4619;
  t4622 = -0.259155*t4621;
  t4645 = -0.8656776547239999*t7*t4642;
  t4662 = -0.340999127418*t7*t4661;
  t4678 = -0.930418*t1826*t4675;
  t4690 = t4645 + t4662 + t4678;
  t4692 = -0.657905*t4690;
  t4694 = -0.340999127418*t7*t4642;
  t4695 = -0.134322983001*t7*t4661;
  t4697 = -0.366501*t1826*t4675;
  t4698 = t4694 + t4695 + t4697;
  t4709 = -0.259155*t4698;
  t4711 = 0.930418*t1826*t4642;
  t4717 = 0.366501*t1826*t4661;
  t4720 = -1.000000637725*t7*t4675;
  t4721 = t4711 + t4717 + t4720;
  t4740 = t2396*t4732;
  t4758 = -0.340999127418*t1838*t4755;
  t4783 = t2383*t4777;
  t4787 = t4740 + t4758 + t4783;
  t4796 = -0.259155*t4787;
  t4797 = t2235*t4732;
  t4808 = t2167*t4755;
  t4811 = -0.340999127418*t1838*t4777;
  t4816 = t4797 + t4808 + t4811;
  t4818 = -0.657905*t4816;
  t4820 = t1944*t4732;
  t4823 = t56*t4755;
  t4826 = t1512*t4777;
  t4829 = t4820 + t4823 + t4826;
  t4862 = t1512*t4856;
  t4877 = t56*t4871;
  t4927 = t1944*t4881;
  t4928 = t4862 + t4877 + t4927;
  t4958 = -0.340999127418*t1838*t4856;
  t4967 = t2167*t4871;
  t4969 = t2235*t4881;
  t4970 = t4958 + t4967 + t4969;
  t4978 = -0.657905*t4970;
  t4979 = t2383*t4856;
  t4992 = -0.340999127418*t1838*t4871;
  t5004 = t2396*t4881;
  t5006 = t4979 + t4992 + t5004;
  t5008 = -0.259155*t5006;
  t5090 = t1512*t5083;
  t5114 = t56*t5109;
  t5139 = t1944*t5134;
  t5144 = t5090 + t5114 + t5139;
  t5157 = -0.340999127418*t1838*t5083;
  t5168 = t2167*t5109;
  t5182 = t2235*t5134;
  t5193 = t5157 + t5168 + t5182;
  t5199 = -0.657905*t5193;
  t5227 = t2383*t5083;
  t5267 = -0.340999127418*t1838*t5109;
  t5278 = t2396*t5134;
  t5281 = t5227 + t5267 + t5278;
  t5291 = -0.259155*t5281;
  t5336 = -0.8656776547239999*t7*t5329;
  t5345 = -0.340999127418*t7*t5342;
  t5374 = -0.930418*t1826*t5370;
  t5382 = t5336 + t5345 + t5374;
  t5390 = -0.657905*t5382;
  t5391 = -0.340999127418*t7*t5329;
  t5396 = -0.134322983001*t7*t5342;
  t5398 = -0.366501*t1826*t5370;
  t5402 = t5391 + t5396 + t5398;
  t5410 = -0.259155*t5402;
  t5422 = 0.930418*t1826*t5329;
  t5425 = 0.366501*t1826*t5342;
  t5427 = -1.000000637725*t7*t5370;
  t5429 = t5422 + t5425 + t5427;
  t5462 = t2396*t5461;
  t5498 = -0.340999127418*t1838*t5493;
  t5530 = t2383*t5525;
  t5542 = t5462 + t5498 + t5530;
  t5549 = -0.259155*t5542;
  t5556 = t2235*t5461;
  t5567 = t2167*t5493;
  t5568 = -0.340999127418*t1838*t5525;
  t5585 = t5556 + t5567 + t5568;
  t5595 = -0.657905*t5585;
  t5603 = t1944*t5461;
  t5606 = t56*t5493;
  t5616 = t1512*t5525;
  t5634 = t5603 + t5606 + t5616;
  t5687 = t56*t5686;
  t5732 = t1512*t5713;
  t5758 = t1944*t5754;
  t5760 = t5687 + t5732 + t5758;
  t5777 = t2167*t5686;
  t5782 = -0.340999127418*t1838*t5713;
  t5785 = t2235*t5754;
  t5787 = t5777 + t5782 + t5785;
  t5788 = -0.657905*t5787;
  t5791 = -0.340999127418*t1838*t5686;
  t5795 = t2383*t5713;
  t5798 = t2396*t5754;
  t5802 = t5791 + t5795 + t5798;
  t5819 = -0.259155*t5802;
  t6719 = -1.*t1160;
  t6721 = 1. + t6719;
  t6738 = -0.091*t6721;
  t6740 = 0. + t6738;
  t6687 = -0.091*t1121;
  t6693 = 0. + t6687;
  t6776 = 3.2909349868922137e-7*var1[18];
  t6779 = 0.03103092645718495*t883;
  t6788 = -0.045000372235*t359;
  t6791 = t6776 + t6779 + t6788;
  t6744 = 1.296332362046933e-7*var1[18];
  t6747 = -0.07877668146182712*t883;
  t6751 = -0.045000372235*t1567;
  t6753 = t6744 + t6747 + t6751;
  t6829 = 3.2909349868922137e-7*var1[19];
  t6830 = -0.055653945343889656*t1838;
  t6837 = -0.045000372235*t2396;
  t6840 = t6829 + t6830 + t6837;
  t6803 = -1.296332362046933e-7*var1[19];
  t6812 = -0.14128592423750855*t1838;
  t6818 = -0.045000372235*t2235;
  t6825 = t6803 + t6812 + t6818;
  t6859 = -0.04500040093286238*t1838;
  t6870 = -0.055653909852*t1512;
  t6873 = -0.141285834136*t56;
  t6876 = 0. + t6859 + t6870 + t6873;
  t6704 = -0.04500040093286238*t883;
  t6707 = -0.07877663122399998*t2025;
  t6711 = 0.031030906668*t2032;
  t6715 = 0. + t6704 + t6707 + t6711;
  t7018 = 0.04186915633414423*t1826;
  t7019 = -0.14128592423750855*t7;
  t7021 = -1.296332362046933e-7 + t7018 + t7019;
  t7033 = 0.016492681424499736*t1826;
  t7038 = -0.055653945343889656*t7;
  t7040 = 3.2909349868922137e-7 + t7033 + t7038;
  t7051 = -0.15185209683981668*t1826;
  t7060 = -0.04500040093286238*t7;
  t7063 = t7051 + t7060;
  t7108 = 0.0846680539949003*t794;
  t7114 = -0.04500040093286238*t198;
  t7115 = t7108 + t7114;
  t7119 = -0.04186915633414423*t794;
  t7124 = -0.07877668146182712*t198;
  t7125 = 1.296332362046933e-7 + t7119 + t7124;
  t7134 = 0.016492681424499736*t794;
  t7136 = 0.03103092645718495*t198;
  t7140 = 3.2909349868922137e-7 + t7134 + t7136;
  p_output1[0]=(0.707107*t3893 + t3908 + t3940)*var2[3] + (0.707107*t2085 + t2271 + t2436)*var2[4] + (0.707107*t2782 + t2889 + t2933)*var2[5] + (0.707107*t3144 + t3170 + t3190)*var2[17] + (t3558 + t3621 + 0.707107*t3712)*var2[18] + (t3392 + t3421 + 0.707107*t3439)*var2[19];
  p_output1[1]=(0.707107*t4235 + t4265 + t4294)*var2[3] + (0.707107*t4111 + t4173 + t4192)*var2[4] + (0.707107*t4439 + t4495 + t4514)*var2[5] + (0.707107*t4588 + t4615 + t4622)*var2[17] + (t4796 + t4818 + 0.707107*t4829)*var2[18] + (t4692 + t4709 + 0.707107*t4721)*var2[19];
  p_output1[2]=(0.707107*t5760 + t5788 + t5819)*var2[4] + (0.707107*t5144 + t5199 + t5291)*var2[5] + (0.707107*t4928 + t4978 + t5008)*var2[17] + (t5549 + t5595 + 0.707107*t5634)*var2[18] + (t5390 + t5410 + 0.707107*t5429)*var2[19];
  p_output1[3]=0;
  p_output1[4]=(-0.707107*t3893 + t3908 + t3940)*var2[3] + (-0.707107*t2085 + t2271 + t2436)*var2[4] + (-0.707107*t2782 + t2889 + t2933)*var2[5] + (-0.707107*t3144 + t3170 + t3190)*var2[17] + (t3558 + t3621 - 0.707107*t3712)*var2[18] + (t3392 + t3421 - 0.707107*t3439)*var2[19];
  p_output1[5]=(-0.707107*t4235 + t4265 + t4294)*var2[3] + (-0.707107*t4111 + t4173 + t4192)*var2[4] + (-0.707107*t4439 + t4495 + t4514)*var2[5] + (-0.707107*t4588 + t4615 + t4622)*var2[17] + (t4796 + t4818 - 0.707107*t4829)*var2[18] + (t4692 + t4709 - 0.707107*t4721)*var2[19];
  p_output1[6]=(-0.707107*t5760 + t5788 + t5819)*var2[4] + (-0.707107*t5144 + t5199 + t5291)*var2[5] + (-0.707107*t4928 + t4978 + t5008)*var2[17] + (t5549 + t5595 - 0.707107*t5634)*var2[18] + (t5390 + t5410 - 0.707107*t5429)*var2[19];
  p_output1[7]=0;
  p_output1[8]=(-0.366501*t3907 + 0.930418*t3931)*var2[3] + (-0.366501*t2268 + 0.930418*t2424)*var2[4] + (-0.366501*t2864 + 0.930418*t2926)*var2[5] + (-0.366501*t3167 + 0.930418*t3177)*var2[17] + (0.930418*t3551 - 0.366501*t3614)*var2[18] + (-0.366501*t3383 + 0.930418*t3420)*var2[19];
  p_output1[9]=(-0.366501*t4264 + 0.930418*t4279)*var2[3] + (-0.366501*t4172 + 0.930418*t4188)*var2[4] + (-0.366501*t4493 + 0.930418*t4513)*var2[5] + (-0.366501*t4613 + 0.930418*t4621)*var2[17] + (0.930418*t4787 - 0.366501*t4816)*var2[18] + (-0.366501*t4690 + 0.930418*t4698)*var2[19];
  p_output1[10]=(-0.366501*t5787 + 0.930418*t5802)*var2[4] + (-0.366501*t5193 + 0.930418*t5281)*var2[5] + (-0.366501*t4970 + 0.930418*t5006)*var2[17] + (0.930418*t5542 - 0.366501*t5585)*var2[18] + (-0.366501*t5382 + 0.930418*t5402)*var2[19];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (-0.001824*t3893 - 0.134034*t3907 - 0.189863*t3931 + t3790*t6693 + t3808*t6740 + t3814*t6753 + t3827*t6791 + t3829*t6825 + t3868*t6840 + t3891*t6876 - 1.*t2509*t6715*t915)*var2[3] + (-0.001824*t2085 - 0.134034*t2268 - 0.189863*t2424 - 1.*t163*t398*t6715 + t1187*t6753 + t1376*t6791 + t1464*t6825 + t1767*t6840 + t2073*t6876 + t1171*t163*t6740*t915 + t163*t6693*t915*t922)*var2[4] + (-0.001824*t2782 - 0.134034*t2864 - 0.189863*t2926 + t2576*t6693 + t2533*t6740 + t2626*t6753 + t2582*t6791 + t2704*t6825 + t2654*t6840 + t2749*t6876)*var2[5] + (-0.091*t1160*t2533 - 0.091*t1121*t3014 - 0.001824*t3144 - 0.134034*t3167 - 0.189863*t3177 + t3072*t6753 + t3025*t6791 + t3117*t6825 + t3100*t6840 + t3133*t6876)*var2[17] + (-0.189863*t3551 - 0.134034*t3614 - 0.001824*t3712 + t3508*t6825 + t3537*t6840 + t3490*t6876 + t3025*t7125 + t3216*t7140 + t163*t7115*t915)*var2[18] + (-0.134034*t3383 - 0.189863*t3420 - 0.001824*t3439 + t3234*t7021 + t3304*t7040 + t3358*t7063)*var2[19];
  p_output1[13]=var2[1] + (-0.001824*t4235 - 0.134034*t4264 - 0.189863*t4279 + t2533*t6693 + t3014*t6740 + t3025*t6753 + t3216*t6791 + t3234*t6825 + t3304*t6840 + t3358*t6876 + t163*t6715*t915)*var2[3] + (-0.001824*t4111 - 0.134034*t4172 - 0.189863*t4188 - 1.*t2509*t398*t6715 + t4007*t6753 + t4044*t6791 + t4052*t6825 + t4077*t6840 + t4097*t6876 + t1171*t2509*t6740*t915 + t2509*t6693*t915*t922)*var2[4] + (-0.001824*t4439 - 0.134034*t4493 - 0.189863*t4513 + t3808*t6693 + t4331*t6740 + t4365*t6753 + t4350*t6791 + t4396*t6825 + t4376*t6840 + t4425*t6876)*var2[5] + (-0.091*t1160*t4331 - 0.091*t1121*t4525 - 0.001824*t4588 - 0.134034*t4613 - 0.189863*t4621 + t4550*t6753 + t4527*t6791 + t4573*t6825 + t4556*t6840 + t4581*t6876)*var2[17] + (-0.189863*t4787 - 0.134034*t4816 - 0.001824*t4829 + t4755*t6825 + t4777*t6840 + t4732*t6876 + t4527*t7125 + t4639*t7140 + t2509*t7115*t915)*var2[18] + (-0.134034*t4690 - 0.189863*t4698 - 0.001824*t4721 + t4642*t7021 + t4661*t7040 + t4675*t7063)*var2[19];
  p_output1[14]=var2[2] + (-0.001824*t5760 - 0.134034*t5787 - 0.189863*t5802 - 1.*t1171*t398*t6740 + t5665*t6753 + t5682*t6791 + t5686*t6825 + t5713*t6840 + t5754*t6876 - 1.*t6715*t915 - 1.*t398*t6693*t922)*var2[4] + (-0.001824*t5144 - 0.134034*t5193 - 0.189863*t5281 + t5079*t6753 + t5051*t6791 + t5109*t6825 + t5083*t6840 + t5134*t6876 - 1.*t1171*t6693*t915 + t6740*t915*t922)*var2[5] + (-0.001824*t4928 - 0.134034*t4970 - 0.189863*t5006 + t4853*t6753 + t4848*t6791 + t4871*t6825 + t4856*t6840 + t4881*t6876 - 0.091*t1121*t1171*t915 - 0.091*t1160*t915*t922)*var2[17] + (-0.189863*t5542 - 0.134034*t5585 - 0.001824*t5634 + t5493*t6825 + t5525*t6840 + t5461*t6876 - 1.*t398*t7115 + t4848*t7125 + t5079*t7140)*var2[18] + (-0.134034*t5382 - 0.189863*t5402 - 0.001824*t5429 + t5329*t7021 + t5342*t7040 + t5370*t7063)*var2[19];
  p_output1[15]=0;
}



void dT_right_hip_pitch_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
