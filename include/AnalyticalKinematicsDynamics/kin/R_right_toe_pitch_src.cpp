/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:12:41 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_right_toe_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t159;
  double t1046;
  double t1063;
  double t1049;
  double t1121;
  double t620;
  double t986;
  double t989;
  double t1190;
  double t1053;
  double t1176;
  double t1182;
  double t1012;
  double t1192;
  double t1199;
  double t1222;
  double t100;
  double t245;
  double t259;
  double t1186;
  double t1228;
  double t1256;
  double t1329;
  double t1346;
  double t1354;
  double t1718;
  double t1721;
  double t1722;
  double t302;
  double t455;
  double t511;
  double t1287;
  double t1293;
  double t1328;
  double t1373;
  double t1460;
  double t1527;
  double t1577;
  double t1593;
  double t1697;
  double t1698;
  double t1700;
  double t1703;
  double t1704;
  double t1761;
  double t1765;
  double t1771;
  double t1779;
  double t1798;
  double t1802;
  double t1810;
  double t1811;
  double t1856;
  double t1860;
  double t1932;
  double t1933;
  double t1959;
  double t60;
  double t93;
  double t107;
  double t111;
  double t1461;
  double t1462;
  double t1469;
  double t1709;
  double t1724;
  double t1726;
  double t1864;
  double t1903;
  double t1965;
  double t1967;
  double t1968;
  double t1969;
  double t1970;
  double t1972;
  double t1982;
  double t1999;
  double t2036;
  double t2037;
  double t2050;
  double t2057;
  double t2059;
  double t2062;
  double t2067;
  double t2072;
  double t2188;
  double t2192;
  double t2195;
  double t97;
  double t98;
  double t1927;
  double t2003;
  double t2020;
  double t2021;
  double t2073;
  double t2074;
  double t2080;
  double t2086;
  double t2098;
  double t2107;
  double t2118;
  double t2129;
  double t2163;
  double t2174;
  double t2201;
  double t2202;
  double t2206;
  double t2211;
  double t2215;
  double t2216;
  double t2219;
  double t2220;
  double t2227;
  double t2228;
  double t2260;
  double t2275;
  double t2282;
  double t10;
  double t78;
  double t79;
  double t2075;
  double t2076;
  double t2077;
  double t2177;
  double t2196;
  double t2198;
  double t2229;
  double t2234;
  double t2287;
  double t2301;
  double t2306;
  double t2317;
  double t2318;
  double t2320;
  double t2321;
  double t2322;
  double t2333;
  double t2336;
  double t2345;
  double t2347;
  double t2349;
  double t2350;
  double t2353;
  double t2361;
  double t33;
  double t42;
  double t2439;
  double t2440;
  double t2442;
  double t2449;
  double t2453;
  double t2454;
  double t2446;
  double t2456;
  double t2457;
  double t2469;
  double t2470;
  double t2472;
  double t2437;
  double t2458;
  double t2480;
  double t2481;
  double t2485;
  double t2487;
  double t2489;
  double t2490;
  double t2492;
  double t2496;
  double t2500;
  double t2512;
  double t2483;
  double t2491;
  double t2514;
  double t2518;
  double t2533;
  double t2534;
  double t2537;
  double t2538;
  double t2543;
  double t2545;
  double t2549;
  double t2553;
  double t2524;
  double t2542;
  double t2560;
  double t2565;
  double t2568;
  double t2571;
  double t2574;
  double t2576;
  double t2579;
  double t2582;
  double t2583;
  double t2585;
  double t2331;
  double t2332;
  double t2379;
  double t2382;
  double t2566;
  double t2577;
  double t2586;
  double t2609;
  double t2387;
  double t2392;
  double t2615;
  double t2616;
  double t2621;
  double t2623;
  double t2626;
  double t2643;
  double t2644;
  double t2648;
  double t2400;
  double t2401;
  double t2404;
  double t2405;
  double t2417;
  double t2424;
  double t2679;
  double t2680;
  double t2683;
  double t2686;
  double t2687;
  double t2689;
  double t2678;
  double t2685;
  double t2693;
  double t2709;
  double t2711;
  double t2713;
  double t2715;
  double t2716;
  double t2720;
  double t2722;
  double t2723;
  double t2724;
  double t2710;
  double t2719;
  double t2725;
  double t2727;
  double t2730;
  double t2738;
  double t2739;
  double t2740;
  double t2744;
  double t2745;
  double t2746;
  double t2760;
  double t2728;
  double t2741;
  double t2763;
  double t2769;
  double t2781;
  double t2784;
  double t2785;
  double t2786;
  double t2809;
  double t2825;
  double t2832;
  double t2833;
  double t2777;
  double t2796;
  double t2840;
  double t2842;
  double t2845;
  double t2849;
  double t2852;
  double t2853;
  double t2856;
  double t2857;
  double t2859;
  double t2860;
  double t2256;
  double t2330;
  double t2363;
  double t2366;
  double t2386;
  double t2394;
  double t2395;
  double t2397;
  double t2402;
  double t2413;
  double t2428;
  double t2429;
  double t2611;
  double t2624;
  double t2649;
  double t2651;
  double t2654;
  double t2655;
  double t2656;
  double t2659;
  double t2663;
  double t2666;
  double t2669;
  double t2674;
  double t2843;
  double t2854;
  double t2870;
  double t2872;
  double t2878;
  double t2882;
  double t2885;
  double t2889;
  double t2893;
  double t2894;
  double t2895;
  double t2900;
  t159 = Cos(var1[3]);
  t1046 = Cos(var1[5]);
  t1063 = Sin(var1[3]);
  t1049 = Sin(var1[4]);
  t1121 = Sin(var1[5]);
  t620 = Cos(var1[18]);
  t986 = -1.*t620;
  t989 = 1. + t986;
  t1190 = Cos(var1[17]);
  t1053 = t159*t1046*t1049;
  t1176 = t1063*t1121;
  t1182 = t1053 + t1176;
  t1012 = Sin(var1[17]);
  t1192 = -1.*t1046*t1063;
  t1199 = t159*t1049*t1121;
  t1222 = t1192 + t1199;
  t100 = Sin(var1[19]);
  t245 = Cos(var1[4]);
  t259 = Sin(var1[18]);
  t1186 = -1.*t1012*t1182;
  t1228 = t1190*t1222;
  t1256 = t1186 + t1228;
  t1329 = t1190*t1182;
  t1346 = t1012*t1222;
  t1354 = t1329 + t1346;
  t1718 = Cos(var1[19]);
  t1721 = -1.*t1718;
  t1722 = 1. + t1721;
  t302 = -0.366501*t259;
  t455 = 0. + t302;
  t511 = t159*t245*t455;
  t1287 = 0.340999127418*t989*t1256;
  t1293 = -0.134322983001*t989;
  t1328 = 1. + t1293;
  t1373 = t1328*t1354;
  t1460 = t511 + t1287 + t1373;
  t1527 = 0.930418*t259;
  t1577 = 0. + t1527;
  t1593 = t159*t245*t1577;
  t1697 = -0.8656776547239999*t989;
  t1698 = 1. + t1697;
  t1700 = t1698*t1256;
  t1703 = 0.340999127418*t989*t1354;
  t1704 = t1593 + t1700 + t1703;
  t1761 = -1.000000637725*t989;
  t1765 = 1. + t1761;
  t1771 = t1765*t159*t245;
  t1779 = -0.930418*t259;
  t1798 = 0. + t1779;
  t1802 = t1798*t1256;
  t1810 = 0.366501*t259;
  t1811 = 0. + t1810;
  t1856 = t1811*t1354;
  t1860 = t1771 + t1802 + t1856;
  t1932 = Cos(var1[20]);
  t1933 = -1.*t1932;
  t1959 = 1. + t1933;
  t60 = Sin(var1[21]);
  t93 = Sin(var1[20]);
  t107 = 0.930418*t100;
  t111 = 0. + t107;
  t1461 = t111*t1460;
  t1462 = 0.366501*t100;
  t1469 = 0. + t1462;
  t1709 = t1469*t1704;
  t1724 = -1.000000637725*t1722;
  t1726 = 1. + t1724;
  t1864 = t1726*t1860;
  t1903 = t1461 + t1709 + t1864;
  t1965 = -0.8656776547239999*t1722;
  t1967 = 1. + t1965;
  t1968 = t1967*t1460;
  t1969 = -0.340999127418*t1722*t1704;
  t1970 = -0.930418*t100;
  t1972 = 0. + t1970;
  t1982 = t1972*t1860;
  t1999 = t1968 + t1969 + t1982;
  t2036 = -0.340999127418*t1722*t1460;
  t2037 = -0.134322983001*t1722;
  t2050 = 1. + t2037;
  t2057 = t2050*t1704;
  t2059 = -0.366501*t100;
  t2062 = 0. + t2059;
  t2067 = t2062*t1860;
  t2072 = t2036 + t2057 + t2067;
  t2188 = Cos(var1[21]);
  t2192 = -1.*t2188;
  t2195 = 1. + t2192;
  t97 = 0.366501*t93;
  t98 = 0. + t97;
  t1927 = t98*t1903;
  t2003 = -0.340999127418*t1959*t1999;
  t2020 = -0.134322983001*t1959;
  t2021 = 1. + t2020;
  t2073 = t2021*t2072;
  t2074 = t1927 + t2003 + t2073;
  t2080 = 0.930418*t93;
  t2086 = 0. + t2080;
  t2098 = t2086*t1903;
  t2107 = -0.8656776547239999*t1959;
  t2118 = 1. + t2107;
  t2129 = t2118*t1999;
  t2163 = -0.340999127418*t1959*t2072;
  t2174 = t2098 + t2129 + t2163;
  t2201 = -1.000000637725*t1959;
  t2202 = 1. + t2201;
  t2206 = t2202*t1903;
  t2211 = -0.930418*t93;
  t2215 = 0. + t2211;
  t2216 = t2215*t1999;
  t2219 = -0.366501*t93;
  t2220 = 0. + t2219;
  t2227 = t2220*t2072;
  t2228 = t2206 + t2216 + t2227;
  t2260 = Cos(var1[22]);
  t2275 = -1.*t2260;
  t2282 = 1. + t2275;
  t10 = Sin(var1[22]);
  t78 = -0.366501*t60;
  t79 = 0. + t78;
  t2075 = t79*t2074;
  t2076 = -0.930418*t60;
  t2077 = 0. + t2076;
  t2177 = t2077*t2174;
  t2196 = -1.000000637725*t2195;
  t2198 = 1. + t2196;
  t2229 = t2198*t2228;
  t2234 = t2075 + t2177 + t2229;
  t2287 = -0.134322983001*t2195;
  t2301 = 1. + t2287;
  t2306 = t2301*t2074;
  t2317 = -0.340999127418*t2195*t2174;
  t2318 = 0.366501*t60;
  t2320 = 0. + t2318;
  t2321 = t2320*t2228;
  t2322 = t2306 + t2317 + t2321;
  t2333 = -0.340999127418*t2195*t2074;
  t2336 = -0.8656776547239999*t2195;
  t2345 = 1. + t2336;
  t2347 = t2345*t2174;
  t2349 = 0.930418*t60;
  t2350 = 0. + t2349;
  t2353 = t2350*t2228;
  t2361 = t2333 + t2347 + t2353;
  t33 = 0.930418*t10;
  t42 = 0. + t33;
  t2439 = t1046*t1063*t1049;
  t2440 = -1.*t159*t1121;
  t2442 = t2439 + t2440;
  t2449 = t159*t1046;
  t2453 = t1063*t1049*t1121;
  t2454 = t2449 + t2453;
  t2446 = -1.*t1012*t2442;
  t2456 = t1190*t2454;
  t2457 = t2446 + t2456;
  t2469 = t1190*t2442;
  t2470 = t1012*t2454;
  t2472 = t2469 + t2470;
  t2437 = t245*t455*t1063;
  t2458 = 0.340999127418*t989*t2457;
  t2480 = t1328*t2472;
  t2481 = t2437 + t2458 + t2480;
  t2485 = t245*t1577*t1063;
  t2487 = t1698*t2457;
  t2489 = 0.340999127418*t989*t2472;
  t2490 = t2485 + t2487 + t2489;
  t2492 = t1765*t245*t1063;
  t2496 = t1798*t2457;
  t2500 = t1811*t2472;
  t2512 = t2492 + t2496 + t2500;
  t2483 = t111*t2481;
  t2491 = t1469*t2490;
  t2514 = t1726*t2512;
  t2518 = t2483 + t2491 + t2514;
  t2533 = t1967*t2481;
  t2534 = -0.340999127418*t1722*t2490;
  t2537 = t1972*t2512;
  t2538 = t2533 + t2534 + t2537;
  t2543 = -0.340999127418*t1722*t2481;
  t2545 = t2050*t2490;
  t2549 = t2062*t2512;
  t2553 = t2543 + t2545 + t2549;
  t2524 = t98*t2518;
  t2542 = -0.340999127418*t1959*t2538;
  t2560 = t2021*t2553;
  t2565 = t2524 + t2542 + t2560;
  t2568 = t2086*t2518;
  t2571 = t2118*t2538;
  t2574 = -0.340999127418*t1959*t2553;
  t2576 = t2568 + t2571 + t2574;
  t2579 = t2202*t2518;
  t2582 = t2215*t2538;
  t2583 = t2220*t2553;
  t2585 = t2579 + t2582 + t2583;
  t2331 = -0.8656776547239999*t2282;
  t2332 = 1. + t2331;
  t2379 = 0.366501*t10;
  t2382 = 0. + t2379;
  t2566 = t79*t2565;
  t2577 = t2077*t2576;
  t2586 = t2198*t2585;
  t2609 = t2566 + t2577 + t2586;
  t2387 = -0.134322983001*t2282;
  t2392 = 1. + t2387;
  t2615 = t2301*t2565;
  t2616 = -0.340999127418*t2195*t2576;
  t2621 = t2320*t2585;
  t2623 = t2615 + t2616 + t2621;
  t2626 = -0.340999127418*t2195*t2565;
  t2643 = t2345*t2576;
  t2644 = t2350*t2585;
  t2648 = t2626 + t2643 + t2644;
  t2400 = -1.000000637725*t2282;
  t2401 = 1. + t2400;
  t2404 = -0.366501*t10;
  t2405 = 0. + t2404;
  t2417 = -0.930418*t10;
  t2424 = 0. + t2417;
  t2679 = -1.*t245*t1046*t1012;
  t2680 = t1190*t245*t1121;
  t2683 = t2679 + t2680;
  t2686 = t1190*t245*t1046;
  t2687 = t245*t1012*t1121;
  t2689 = t2686 + t2687;
  t2678 = -1.*t455*t1049;
  t2685 = 0.340999127418*t989*t2683;
  t2693 = t1328*t2689;
  t2709 = t2678 + t2685 + t2693;
  t2711 = -1.*t1577*t1049;
  t2713 = t1698*t2683;
  t2715 = 0.340999127418*t989*t2689;
  t2716 = t2711 + t2713 + t2715;
  t2720 = -1.*t1765*t1049;
  t2722 = t1798*t2683;
  t2723 = t1811*t2689;
  t2724 = t2720 + t2722 + t2723;
  t2710 = t111*t2709;
  t2719 = t1469*t2716;
  t2725 = t1726*t2724;
  t2727 = t2710 + t2719 + t2725;
  t2730 = t1967*t2709;
  t2738 = -0.340999127418*t1722*t2716;
  t2739 = t1972*t2724;
  t2740 = t2730 + t2738 + t2739;
  t2744 = -0.340999127418*t1722*t2709;
  t2745 = t2050*t2716;
  t2746 = t2062*t2724;
  t2760 = t2744 + t2745 + t2746;
  t2728 = t98*t2727;
  t2741 = -0.340999127418*t1959*t2740;
  t2763 = t2021*t2760;
  t2769 = t2728 + t2741 + t2763;
  t2781 = t2086*t2727;
  t2784 = t2118*t2740;
  t2785 = -0.340999127418*t1959*t2760;
  t2786 = t2781 + t2784 + t2785;
  t2809 = t2202*t2727;
  t2825 = t2215*t2740;
  t2832 = t2220*t2760;
  t2833 = t2809 + t2825 + t2832;
  t2777 = t79*t2769;
  t2796 = t2077*t2786;
  t2840 = t2198*t2833;
  t2842 = t2777 + t2796 + t2840;
  t2845 = t2301*t2769;
  t2849 = -0.340999127418*t2195*t2786;
  t2852 = t2320*t2833;
  t2853 = t2845 + t2849 + t2852;
  t2856 = -0.340999127418*t2195*t2769;
  t2857 = t2345*t2786;
  t2859 = t2350*t2833;
  t2860 = t2856 + t2857 + t2859;
  t2256 = t42*t2234;
  t2330 = -0.340999127418*t2282*t2322;
  t2363 = t2332*t2361;
  t2366 = t2256 + t2330 + t2363;
  t2386 = t2382*t2234;
  t2394 = t2392*t2322;
  t2395 = -0.340999127418*t2282*t2361;
  t2397 = t2386 + t2394 + t2395;
  t2402 = t2401*t2234;
  t2413 = t2405*t2322;
  t2428 = t2424*t2361;
  t2429 = t2402 + t2413 + t2428;
  t2611 = t42*t2609;
  t2624 = -0.340999127418*t2282*t2623;
  t2649 = t2332*t2648;
  t2651 = t2611 + t2624 + t2649;
  t2654 = t2382*t2609;
  t2655 = t2392*t2623;
  t2656 = -0.340999127418*t2282*t2648;
  t2659 = t2654 + t2655 + t2656;
  t2663 = t2401*t2609;
  t2666 = t2405*t2623;
  t2669 = t2424*t2648;
  t2674 = t2663 + t2666 + t2669;
  t2843 = t42*t2842;
  t2854 = -0.340999127418*t2282*t2853;
  t2870 = t2332*t2860;
  t2872 = t2843 + t2854 + t2870;
  t2878 = t2382*t2842;
  t2882 = t2392*t2853;
  t2885 = -0.340999127418*t2282*t2860;
  t2889 = t2878 + t2882 + t2885;
  t2893 = t2401*t2842;
  t2894 = t2405*t2853;
  t2895 = t2424*t2860;
  t2900 = t2893 + t2894 + t2895;
  p_output1[0]=0.553471*t2366 + 0.218018*t2397 + 0.803828*t2429;
  p_output1[1]=0.553471*t2651 + 0.218018*t2659 + 0.803828*t2674;
  p_output1[2]=0.553471*t2872 + 0.218018*t2889 + 0.803828*t2900;
  p_output1[3]=-0.747896*t2366 - 0.294604*t2397 + 0.594863*t2429;
  p_output1[4]=-0.747896*t2651 - 0.294604*t2659 + 0.594863*t2674;
  p_output1[5]=-0.747896*t2872 - 0.294604*t2889 + 0.594863*t2900;
  p_output1[6]=-0.366501*t2366 + 0.930418*t2397;
  p_output1[7]=-0.366501*t2651 + 0.930418*t2659;
  p_output1[8]=-0.366501*t2872 + 0.930418*t2889;
}



void R_right_toe_pitch_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
