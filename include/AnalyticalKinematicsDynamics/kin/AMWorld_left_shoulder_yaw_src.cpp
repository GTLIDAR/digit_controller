/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:08:47 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "AMWorld_left_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t426;
  double t795;
  double t840;
  double t1147;
  double t1163;
  double t917;
  double t947;
  double t1055;
  double t1180;
  double t1736;
  double t1768;
  double t1783;
  double t2790;
  double t1956;
  double t2041;
  double t2052;
  double t2221;
  double t2359;
  double t2366;
  double t2367;
  double t2845;
  double t2852;
  double t3008;
  double t3089;
  double t3251;
  double t3255;
  double t3263;
  double t3298;
  double t3355;
  double t3392;
  double t3397;
  double t3421;
  double t3429;
  double t3718;
  double t3736;
  double t3740;
  double t3784;
  double t3808;
  double t4602;
  double t4331;
  double t4334;
  double t4339;
  double t4456;
  double t4463;
  double t4498;
  double t4499;
  double t4511;
  double t4327;
  double t4604;
  double t4620;
  double t4624;
  double t4698;
  double t4772;
  double t4896;
  double t4912;
  double t4950;
  double t4074;
  double t4100;
  double t4135;
  double t4155;
  double t4223;
  double t4978;
  double t4979;
  double t4984;
  double t4595;
  double t4955;
  double t4957;
  double t4996;
  double t5203;
  double t5205;
  double t5220;
  double t5235;
  double t5241;
  double t5248;
  double t5309;
  double t5315;
  double t5319;
  double t5321;
  double t5332;
  double t5334;
  double t5452;
  double t5459;
  double t5465;
  double t5477;
  double t5484;
  double t5495;
  double t5598;
  double t5606;
  double t5620;
  double t5623;
  double t5677;
  double t5680;
  double t5715;
  double t5730;
  double t5543;
  double t5550;
  double t5566;
  double t5575;
  double t5047;
  double t5082;
  double t5760;
  double t5761;
  double t5771;
  double t5670;
  double t5731;
  double t5744;
  double t5864;
  double t5869;
  double t5867;
  double t5880;
  double t5888;
  double t5892;
  double t5901;
  double t5903;
  double t5889;
  double t5907;
  double t5919;
  double t5980;
  double t5986;
  double t6013;
  double t5865;
  double t5975;
  double t6021;
  double t6022;
  double t6030;
  double t6035;
  double t6062;
  double t6063;
  double t6067;
  double t6068;
  double t6073;
  double t6075;
  double t6140;
  double t6155;
  double t6171;
  double t6187;
  double t6195;
  double t6197;
  double t6229;
  double t6230;
  double t6234;
  double t6292;
  double t6295;
  double t6306;
  double t6307;
  double t6331;
  double t6334;
  double t6348;
  double t6399;
  double t6266;
  double t6268;
  double t6274;
  double t6275;
  double t6415;
  double t6416;
  double t6423;
  double t6326;
  double t6400;
  double t6404;
  double t6026;
  double t6064;
  double t6076;
  double t6080;
  double t6102;
  double t6103;
  double t6108;
  double t6113;
  double t26;
  double t1849;
  double t2377;
  double t2378;
  double t2430;
  double t2930;
  double t3777;
  double t3852;
  double t3880;
  double t4004;
  double t4168;
  double t4977;
  double t5021;
  double t5031;
  double t5036;
  double t5056;
  double t5087;
  double t5092;
  double t5130;
  double t5131;
  double t5135;
  double t5137;
  double t5158;
  double t5161;
  double t5294;
  double t5349;
  double t5362;
  double t5443;
  double t5447;
  double t5496;
  double t5520;
  double t5528;
  double t5538;
  double t5578;
  double t5759;
  double t5772;
  double t5773;
  double t5797;
  double t5808;
  double t5809;
  double t5810;
  double t5818;
  double t5823;
  double t5824;
  double t5830;
  double t5842;
  double t6518;
  double t6519;
  double t6520;
  double t6523;
  double t6524;
  double t5159;
  double t5844;
  double t5858;
  double t6627;
  double t6638;
  double t6656;
  double t6659;
  double t6680;
  double t6682;
  double t6658;
  double t6693;
  double t6697;
  double t6725;
  double t6726;
  double t6728;
  double t6578;
  double t6704;
  double t6731;
  double t6737;
  double t6753;
  double t6777;
  double t6791;
  double t6796;
  double t6816;
  double t6828;
  double t6852;
  double t6858;
  double t6139;
  double t6175;
  double t6199;
  double t6206;
  double t6210;
  double t6227;
  double t6250;
  double t6251;
  double t6254;
  double t6260;
  double t6289;
  double t6411;
  double t6426;
  double t6428;
  double t6433;
  double t6437;
  double t6444;
  double t6449;
  double t6456;
  double t6464;
  double t6472;
  double t6480;
  double t6514;
  double t6750;
  double t6811;
  double t6879;
  double t6882;
  double t6901;
  double t6902;
  double t6905;
  double t6922;
  double t6543;
  double t6544;
  double t6548;
  double t6959;
  double t6960;
  double t6979;
  double t6980;
  double t6994;
  double t7122;
  double t7124;
  double t7134;
  double t7140;
  double t7145;
  double t7153;
  double t7110;
  double t7138;
  double t7162;
  double t7166;
  double t7195;
  double t7203;
  double t7221;
  double t7224;
  double t7255;
  double t7256;
  double t7263;
  double t7283;
  double t7294;
  double t7296;
  double t7300;
  double t7311;
  double t7321;
  double t7325;
  double t7326;
  double t7331;
  double t7170;
  double t7254;
  double t7286;
  double t7288;
  double t7289;
  t426 = Cos(var1[15]);
  t795 = -1.*t426;
  t840 = 1. + t795;
  t1147 = -0.051978134642000004*t840;
  t1163 = Sin(var1[15]);
  t917 = -0.9945383682050002*t840;
  t947 = 1. + t917;
  t1055 = -0.994522*t947;
  t1180 = -0.707107*t1163;
  t1736 = t1147 + t1180;
  t1768 = -0.104528*t1736;
  t1783 = t1055 + t1768;
  t2790 = Sin(var1[14]);
  t1956 = -0.5054634410180001*t840;
  t2041 = 1. + t1956;
  t2052 = -0.104528*t2041;
  t2221 = 0.707107*t1163;
  t2359 = t1147 + t2221;
  t2366 = -0.994522*t2359;
  t2367 = t2052 + t2366;
  t2845 = -0.104528*t2790;
  t2852 = 0. + t2845;
  t3008 = Cos(var1[14]);
  t3089 = -1.*t3008;
  t3251 = 1. + t3089;
  t3255 = -1.0000001112680001*t3251;
  t3263 = 1. + t3255;
  t3298 = -0.49726168403800003*t840;
  t3355 = 0.073913*t1163;
  t3392 = t3298 + t3355;
  t3397 = -0.104528*t3392;
  t3421 = 0.05226439969100001*t840;
  t3429 = 0.703234*t1163;
  t3718 = t3421 + t3429;
  t3736 = -0.994522*t3718;
  t3740 = t3397 + t3736;
  t3784 = 0.994522*t2790;
  t3808 = 0. + t3784;
  t4602 = Cos(var1[13]);
  t4331 = 0.103955395616*t3251*t1783;
  t4334 = -0.994522*t2790;
  t4339 = 0. + t4334;
  t4456 = t4339*t3740;
  t4463 = -0.9890740084840001*t3251;
  t4498 = 1. + t4463;
  t4499 = t4498*t2367;
  t4511 = 0. + t4331 + t4456 + t4499;
  t4327 = Sin(var1[13]);
  t4604 = -0.010926102783999999*t3251;
  t4620 = 1. + t4604;
  t4624 = t4620*t1783;
  t4698 = 0.104528*t2790;
  t4772 = 0. + t4698;
  t4896 = t4772*t3740;
  t4912 = 0.103955395616*t3251*t2367;
  t4950 = 0. + t4624 + t4896 + t4912;
  t4074 = t2852*t1783;
  t4100 = t3263*t3740;
  t4135 = t3808*t2367;
  t4155 = 0. + t4074 + t4100 + t4135;
  t4223 = Cos(var1[5]);
  t4978 = t4602*t4511;
  t4979 = -1.*t4327*t4950;
  t4984 = 0. + t4978 + t4979;
  t4595 = t4327*t4511;
  t4955 = t4602*t4950;
  t4957 = 0. + t4595 + t4955;
  t4996 = Sin(var1[5]);
  t5203 = 0.073913*t947;
  t5205 = -0.703234*t1736;
  t5220 = -0.703234*t1163;
  t5235 = t3421 + t5220;
  t5241 = 0.707107*t5235;
  t5248 = t5203 + t5205 + t5241;
  t5309 = -0.703234*t2041;
  t5315 = -0.073913*t1163;
  t5319 = t3298 + t5315;
  t5321 = 0.707107*t5319;
  t5332 = 0.073913*t2359;
  t5334 = t5309 + t5321 + t5332;
  t5452 = -0.500001190325*t840;
  t5459 = 1. + t5452;
  t5465 = 0.707107*t5459;
  t5477 = -0.703234*t3392;
  t5484 = 0.073913*t3718;
  t5495 = t5465 + t5477 + t5484;
  t5598 = 0.103955395616*t3251*t5248;
  t5606 = t4339*t5495;
  t5620 = t4498*t5334;
  t5623 = 0. + t5598 + t5606 + t5620;
  t5677 = t4620*t5248;
  t5680 = t4772*t5495;
  t5715 = 0.103955395616*t3251*t5334;
  t5730 = 0. + t5677 + t5680 + t5715;
  t5543 = t2852*t5248;
  t5550 = t3263*t5495;
  t5566 = t3808*t5334;
  t5575 = 0. + t5543 + t5550 + t5566;
  t5047 = Sin(var1[4]);
  t5082 = Cos(var1[4]);
  t5760 = t4602*t5623;
  t5761 = -1.*t4327*t5730;
  t5771 = 0. + t5760 + t5761;
  t5670 = t4327*t5623;
  t5731 = t4602*t5730;
  t5744 = 0. + t5670 + t5731;
  t5864 = Cos(var1[3]);
  t5869 = Sin(var1[3]);
  t5867 = t5864*t4223*t5047;
  t5880 = t5869*t4996;
  t5888 = t5867 + t5880;
  t5892 = -1.*t4223*t5869;
  t5901 = t5864*t5047*t4996;
  t5903 = t5892 + t5901;
  t5889 = -1.*t4327*t5888;
  t5907 = t4602*t5903;
  t5919 = t5889 + t5907;
  t5980 = t4602*t5888;
  t5986 = t4327*t5903;
  t6013 = t5980 + t5986;
  t5865 = t5864*t5082*t3808;
  t5975 = 0.103955395616*t3251*t5919;
  t6021 = t4498*t6013;
  t6022 = t5865 + t5975 + t6021;
  t6030 = t5864*t5082*t2852;
  t6035 = t4620*t5919;
  t6062 = 0.103955395616*t3251*t6013;
  t6063 = t6030 + t6035 + t6062;
  t6067 = t3263*t5864*t5082;
  t6068 = t4772*t5919;
  t6073 = t4339*t6013;
  t6075 = t6067 + t6068 + t6073;
  t6140 = -0.073913*t947;
  t6155 = 0.703234*t1736;
  t6171 = t6140 + t6155 + t5241;
  t6187 = 0.703234*t2041;
  t6195 = -0.073913*t2359;
  t6197 = t6187 + t5321 + t6195;
  t6229 = 0.703234*t3392;
  t6230 = -0.073913*t3718;
  t6234 = t5465 + t6229 + t6230;
  t6292 = 0.103955395616*t3251*t6171;
  t6295 = t4339*t6234;
  t6306 = t4498*t6197;
  t6307 = 0. + t6292 + t6295 + t6306;
  t6331 = t4620*t6171;
  t6334 = t4772*t6234;
  t6348 = 0.103955395616*t3251*t6197;
  t6399 = 0. + t6331 + t6334 + t6348;
  t6266 = t2852*t6171;
  t6268 = t3263*t6234;
  t6274 = t3808*t6197;
  t6275 = 0. + t6266 + t6268 + t6274;
  t6415 = t4602*t6307;
  t6416 = -1.*t4327*t6399;
  t6423 = 0. + t6415 + t6416;
  t6326 = t4327*t6307;
  t6400 = t4602*t6399;
  t6404 = 0. + t6326 + t6400;
  t6026 = t2041*t6022;
  t6064 = t1736*t6063;
  t6076 = t3392*t6075;
  t6080 = t6026 + t6064 + t6076;
  t6102 = t2359*t6022;
  t6103 = t947*t6063;
  t6108 = t3718*t6075;
  t6113 = t6102 + t6103 + t6108;
  t26 = -4.610340000044122e-7*var2[15];
  t1849 = 0.994522*t1783;
  t2377 = 0.104528*t2367;
  t2378 = 0. + t1849 + t2377;
  t2430 = var2[14]*t2378;
  t2930 = -1.*t2852*t1783;
  t3777 = -1.*t3263*t3740;
  t3852 = -1.*t3808*t2367;
  t3880 = 0. + t2930 + t3777 + t3852;
  t4004 = var2[13]*t3880;
  t4168 = var2[5]*t4155;
  t4977 = t4223*t4957;
  t5021 = -1.*t4984*t4996;
  t5031 = 0. + t4977 + t5021;
  t5036 = var2[4]*t5031;
  t5056 = -1.*t4155*t5047;
  t5087 = t4223*t4984;
  t5092 = t4957*t4996;
  t5130 = 0. + t5087 + t5092;
  t5131 = t5082*t5130;
  t5135 = 0. + t5056 + t5131;
  t5137 = var2[3]*t5135;
  t5158 = t26 + t2430 + t4004 + t4168 + t5036 + t5137;
  t5161 = 1.000001499774*var2[15];
  t5294 = 0.994522*t5248;
  t5349 = 0.104528*t5334;
  t5362 = 0. + t5294 + t5349;
  t5443 = var2[14]*t5362;
  t5447 = -1.*t2852*t5248;
  t5496 = -1.*t3263*t5495;
  t5520 = -1.*t3808*t5334;
  t5528 = 0. + t5447 + t5496 + t5520;
  t5538 = var2[13]*t5528;
  t5578 = var2[5]*t5575;
  t5759 = t4223*t5744;
  t5772 = -1.*t5771*t4996;
  t5773 = 0. + t5759 + t5772;
  t5797 = var2[4]*t5773;
  t5808 = -1.*t5575*t5047;
  t5809 = t4223*t5771;
  t5810 = t5744*t4996;
  t5818 = 0. + t5809 + t5810;
  t5823 = t5082*t5818;
  t5824 = 0. + t5808 + t5823;
  t5830 = var2[3]*t5824;
  t5842 = t5161 + t5443 + t5538 + t5578 + t5797 + t5830;
  t6518 = t5319*t6022;
  t6519 = t5235*t6063;
  t6520 = t5459*t6075;
  t6523 = t6518 + t6519 + t6520;
  t6524 = 0.707107*t6523;
  t5159 = 0.007*t5158;
  t5844 = 0.00002*t5842;
  t5858 = t5159 + t5844;
  t6627 = t4223*t5869*t5047;
  t6638 = -1.*t5864*t4996;
  t6656 = t6627 + t6638;
  t6659 = t5864*t4223;
  t6680 = t5869*t5047*t4996;
  t6682 = t6659 + t6680;
  t6658 = -1.*t4327*t6656;
  t6693 = t4602*t6682;
  t6697 = t6658 + t6693;
  t6725 = t4602*t6656;
  t6726 = t4327*t6682;
  t6728 = t6725 + t6726;
  t6578 = t5082*t3808*t5869;
  t6704 = 0.103955395616*t3251*t6697;
  t6731 = t4498*t6728;
  t6737 = t6578 + t6704 + t6731;
  t6753 = t5082*t2852*t5869;
  t6777 = t4620*t6697;
  t6791 = 0.103955395616*t3251*t6728;
  t6796 = t6753 + t6777 + t6791;
  t6816 = t3263*t5082*t5869;
  t6828 = t4772*t6697;
  t6852 = t4339*t6728;
  t6858 = t6816 + t6828 + t6852;
  t6139 = -8.80875999975661e-7*var2[15];
  t6175 = 0.994522*t6171;
  t6199 = 0.104528*t6197;
  t6206 = 0. + t6175 + t6199;
  t6210 = var2[14]*t6206;
  t6227 = -1.*t2852*t6171;
  t6250 = -1.*t3263*t6234;
  t6251 = -1.*t3808*t6197;
  t6254 = 0. + t6227 + t6250 + t6251;
  t6260 = var2[13]*t6254;
  t6289 = var2[5]*t6275;
  t6411 = t4223*t6404;
  t6426 = -1.*t6423*t4996;
  t6428 = 0. + t6411 + t6426;
  t6433 = var2[4]*t6428;
  t6437 = -1.*t6275*t5047;
  t6444 = t4223*t6423;
  t6449 = t6404*t4996;
  t6456 = 0. + t6444 + t6449;
  t6464 = t5082*t6456;
  t6472 = 0. + t6437 + t6464;
  t6480 = var2[3]*t6472;
  t6514 = t6139 + t6210 + t6260 + t6289 + t6433 + t6480;
  t6750 = t2041*t6737;
  t6811 = t1736*t6796;
  t6879 = t3392*t6858;
  t6882 = t6750 + t6811 + t6879;
  t6901 = t2359*t6737;
  t6902 = t947*t6796;
  t6905 = t3718*t6858;
  t6922 = t6901 + t6902 + t6905;
  t6543 = 0.00002*t5158;
  t6544 = 0.00067*t5842;
  t6548 = t6543 + t6544;
  t6959 = t5319*t6737;
  t6960 = t5235*t6796;
  t6979 = t5459*t6858;
  t6980 = t6959 + t6960 + t6979;
  t6994 = 0.707107*t6980;
  t7122 = -1.*t5082*t4223*t4327;
  t7124 = t4602*t5082*t4996;
  t7134 = t7122 + t7124;
  t7140 = t4602*t5082*t4223;
  t7145 = t5082*t4327*t4996;
  t7153 = t7140 + t7145;
  t7110 = -1.*t3808*t5047;
  t7138 = 0.103955395616*t3251*t7134;
  t7162 = t4498*t7153;
  t7166 = t7110 + t7138 + t7162;
  t7195 = -1.*t2852*t5047;
  t7203 = t4620*t7134;
  t7221 = 0.103955395616*t3251*t7153;
  t7224 = t7195 + t7203 + t7221;
  t7255 = -1.*t3263*t5047;
  t7256 = t4772*t7134;
  t7263 = t4339*t7153;
  t7283 = t7255 + t7256 + t7263;
  t7294 = t2041*t7166;
  t7296 = t1736*t7224;
  t7300 = t3392*t7283;
  t7311 = t7294 + t7296 + t7300;
  t7321 = t2359*t7166;
  t7325 = t947*t7224;
  t7326 = t3718*t7283;
  t7331 = t7321 + t7325 + t7326;
  t7170 = t5319*t7166;
  t7254 = t5235*t7224;
  t7286 = t5459*t7283;
  t7288 = t7170 + t7254 + t7286;
  t7289 = 0.707107*t7288;
  p_output1[0]=t5858*(-0.104528*t6080 - 0.994522*t6113) + 0.00697*t6514*(0.703234*t6080 - 0.073913*t6113 + t6524) + (-0.703234*t6080 + 0.073913*t6113 + t6524)*t6548;
  p_output1[1]=t5858*(-0.104528*t6882 - 0.994522*t6922) + 0.00697*t6514*(0.703234*t6882 - 0.073913*t6922 + t6994) + t6548*(-0.703234*t6882 + 0.073913*t6922 + t6994);
  p_output1[2]=t5858*(-0.104528*t7311 - 0.994522*t7331) + 0.00697*t6514*(t7289 + 0.703234*t7311 - 0.073913*t7331) + t6548*(t7289 - 0.703234*t7311 + 0.073913*t7331);
}



void AMWorld_left_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
