/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:22:04 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "AMWorld_right_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t187;
  double t529;
  double t588;
  double t684;
  double t718;
  double t604;
  double t650;
  double t675;
  double t826;
  double t845;
  double t1068;
  double t1145;
  double t1780;
  double t1346;
  double t1366;
  double t1370;
  double t1373;
  double t1393;
  double t1522;
  double t1531;
  double t2134;
  double t2397;
  double t2488;
  double t2490;
  double t2514;
  double t2537;
  double t2550;
  double t2554;
  double t2627;
  double t2632;
  double t2665;
  double t2725;
  double t2794;
  double t2985;
  double t3103;
  double t3123;
  double t3231;
  double t3240;
  double t3957;
  double t3670;
  double t3699;
  double t3730;
  double t3811;
  double t3813;
  double t3825;
  double t3826;
  double t3938;
  double t3666;
  double t3972;
  double t3986;
  double t4036;
  double t4037;
  double t4067;
  double t4085;
  double t4211;
  double t4227;
  double t3351;
  double t3353;
  double t3460;
  double t3463;
  double t3663;
  double t4451;
  double t4452;
  double t4474;
  double t3956;
  double t4245;
  double t4249;
  double t4485;
  double t4846;
  double t4849;
  double t4851;
  double t4865;
  double t4886;
  double t4933;
  double t4954;
  double t4963;
  double t4979;
  double t4998;
  double t4999;
  double t5000;
  double t5096;
  double t5111;
  double t5112;
  double t5115;
  double t5154;
  double t5161;
  double t5306;
  double t5315;
  double t5328;
  double t5331;
  double t5353;
  double t5363;
  double t5378;
  double t5394;
  double t5265;
  double t5284;
  double t5292;
  double t5295;
  double t4520;
  double t4685;
  double t5426;
  double t5439;
  double t5441;
  double t5351;
  double t5396;
  double t5400;
  double t5571;
  double t5605;
  double t5598;
  double t5617;
  double t5634;
  double t5638;
  double t5639;
  double t5644;
  double t5637;
  double t5646;
  double t5649;
  double t5656;
  double t5668;
  double t5670;
  double t5574;
  double t5655;
  double t5685;
  double t5694;
  double t5719;
  double t5724;
  double t5728;
  double t5729;
  double t5733;
  double t5746;
  double t5748;
  double t5749;
  double t96;
  double t1169;
  double t1569;
  double t1737;
  double t1753;
  double t2487;
  double t3180;
  double t3258;
  double t3307;
  double t3322;
  double t3530;
  double t4258;
  double t4489;
  double t4498;
  double t4505;
  double t4676;
  double t4737;
  double t4758;
  double t4769;
  double t4792;
  double t4813;
  double t4818;
  double t4820;
  double t4828;
  double t4938;
  double t5016;
  double t5024;
  double t5060;
  double t5061;
  double t5163;
  double t5170;
  double t5206;
  double t5214;
  double t5300;
  double t5424;
  double t5452;
  double t5456;
  double t5471;
  double t5472;
  double t5488;
  double t5490;
  double t5491;
  double t5494;
  double t5504;
  double t5509;
  double t5534;
  double t5708;
  double t5731;
  double t5755;
  double t5764;
  double t5784;
  double t5785;
  double t5787;
  double t5788;
  double t5899;
  double t5901;
  double t5906;
  double t5910;
  double t5918;
  double t5919;
  double t5935;
  double t5937;
  double t5938;
  double t5996;
  double t6000;
  double t6001;
  double t6003;
  double t6016;
  double t6018;
  double t6023;
  double t6025;
  double t5963;
  double t5967;
  double t5982;
  double t5988;
  double t6037;
  double t6068;
  double t6096;
  double t6007;
  double t6026;
  double t6034;
  double t5829;
  double t5830;
  double t5839;
  double t5840;
  double t5841;
  double t4822;
  double t5565;
  double t5567;
  double t6239;
  double t6242;
  double t6247;
  double t6256;
  double t6258;
  double t6261;
  double t6253;
  double t6266;
  double t6275;
  double t6283;
  double t6288;
  double t6290;
  double t6216;
  double t6276;
  double t6302;
  double t6305;
  double t6327;
  double t6332;
  double t6351;
  double t6368;
  double t6385;
  double t6408;
  double t6412;
  double t6417;
  double t5817;
  double t5819;
  double t5822;
  double t6321;
  double t6373;
  double t6423;
  double t6439;
  double t6446;
  double t6451;
  double t6453;
  double t6464;
  double t5869;
  double t5909;
  double t5924;
  double t5928;
  double t5929;
  double t5934;
  double t5948;
  double t5951;
  double t5955;
  double t5959;
  double t5991;
  double t6036;
  double t6124;
  double t6133;
  double t6152;
  double t6155;
  double t6163;
  double t6171;
  double t6173;
  double t6176;
  double t6179;
  double t6189;
  double t6199;
  double t6473;
  double t6476;
  double t6483;
  double t6492;
  double t6516;
  double t6581;
  double t6583;
  double t6587;
  double t6595;
  double t6599;
  double t6602;
  double t6580;
  double t6588;
  double t6604;
  double t6615;
  double t6627;
  double t6629;
  double t6639;
  double t6646;
  double t6661;
  double t6685;
  double t6686;
  double t6687;
  double t6721;
  double t6725;
  double t6731;
  double t6742;
  double t6748;
  double t6750;
  double t6753;
  double t6756;
  double t6622;
  double t6647;
  double t6695;
  double t6698;
  double t6699;
  t187 = Cos(var1[26]);
  t529 = -1.*t187;
  t588 = 1. + t529;
  t684 = 0.051978134642000004*t588;
  t718 = Sin(var1[26]);
  t604 = -0.9945383682050002*t588;
  t650 = 1. + t604;
  t675 = -0.994522*t650;
  t826 = -0.707107*t718;
  t845 = t684 + t826;
  t1068 = 0.104528*t845;
  t1145 = t675 + t1068;
  t1780 = Sin(var1[25]);
  t1346 = -0.5054634410180001*t588;
  t1366 = 1. + t1346;
  t1370 = 0.104528*t1366;
  t1373 = 0.707107*t718;
  t1393 = t684 + t1373;
  t1522 = -0.994522*t1393;
  t1531 = t1370 + t1522;
  t2134 = -0.104528*t1780;
  t2397 = 0. + t2134;
  t2488 = Cos(var1[25]);
  t2490 = -1.*t2488;
  t2514 = 1. + t2490;
  t2537 = -1.0000001112680001*t2514;
  t2550 = 1. + t2537;
  t2554 = -0.49726168403800003*t588;
  t2627 = -0.073913*t718;
  t2632 = t2554 + t2627;
  t2665 = 0.104528*t2632;
  t2725 = -0.05226439969100001*t588;
  t2794 = 0.703234*t718;
  t2985 = t2725 + t2794;
  t3103 = -0.994522*t2985;
  t3123 = t2665 + t3103;
  t3231 = -0.994522*t1780;
  t3240 = 0. + t3231;
  t3957 = Cos(var1[24]);
  t3670 = -0.103955395616*t2514*t1145;
  t3699 = 0.994522*t1780;
  t3730 = 0. + t3699;
  t3811 = t3730*t3123;
  t3813 = -0.9890740084840001*t2514;
  t3825 = 1. + t3813;
  t3826 = t3825*t1531;
  t3938 = 0. + t3670 + t3811 + t3826;
  t3666 = Sin(var1[24]);
  t3972 = -0.010926102783999999*t2514;
  t3986 = 1. + t3972;
  t4036 = t3986*t1145;
  t4037 = 0.104528*t1780;
  t4067 = 0. + t4037;
  t4085 = t4067*t3123;
  t4211 = -0.103955395616*t2514*t1531;
  t4227 = 0. + t4036 + t4085 + t4211;
  t3351 = t2397*t1145;
  t3353 = t2550*t3123;
  t3460 = t3240*t1531;
  t3463 = 0. + t3351 + t3353 + t3460;
  t3663 = Cos(var1[5]);
  t4451 = t3957*t3938;
  t4452 = -1.*t3666*t4227;
  t4474 = 0. + t4451 + t4452;
  t3956 = t3666*t3938;
  t4245 = t3957*t4227;
  t4249 = 0. + t3956 + t4245;
  t4485 = Sin(var1[5]);
  t4846 = -0.073913*t650;
  t4849 = -0.703234*t845;
  t4851 = -0.703234*t718;
  t4865 = t2725 + t4851;
  t4886 = 0.707107*t4865;
  t4933 = t4846 + t4849 + t4886;
  t4954 = -0.703234*t1366;
  t4963 = 0.073913*t718;
  t4979 = t2554 + t4963;
  t4998 = 0.707107*t4979;
  t4999 = -0.073913*t1393;
  t5000 = t4954 + t4998 + t4999;
  t5096 = -0.500001190325*t588;
  t5111 = 1. + t5096;
  t5112 = 0.707107*t5111;
  t5115 = -0.703234*t2632;
  t5154 = -0.073913*t2985;
  t5161 = t5112 + t5115 + t5154;
  t5306 = -0.103955395616*t2514*t4933;
  t5315 = t3730*t5161;
  t5328 = t3825*t5000;
  t5331 = 0. + t5306 + t5315 + t5328;
  t5353 = t3986*t4933;
  t5363 = t4067*t5161;
  t5378 = -0.103955395616*t2514*t5000;
  t5394 = 0. + t5353 + t5363 + t5378;
  t5265 = t2397*t4933;
  t5284 = t2550*t5161;
  t5292 = t3240*t5000;
  t5295 = 0. + t5265 + t5284 + t5292;
  t4520 = Sin(var1[4]);
  t4685 = Cos(var1[4]);
  t5426 = t3957*t5331;
  t5439 = -1.*t3666*t5394;
  t5441 = 0. + t5426 + t5439;
  t5351 = t3666*t5331;
  t5396 = t3957*t5394;
  t5400 = 0. + t5351 + t5396;
  t5571 = Cos(var1[3]);
  t5605 = Sin(var1[3]);
  t5598 = t5571*t3663*t4520;
  t5617 = t5605*t4485;
  t5634 = t5598 + t5617;
  t5638 = -1.*t3663*t5605;
  t5639 = t5571*t4520*t4485;
  t5644 = t5638 + t5639;
  t5637 = -1.*t3666*t5634;
  t5646 = t3957*t5644;
  t5649 = t5637 + t5646;
  t5656 = t3957*t5634;
  t5668 = t3666*t5644;
  t5670 = t5656 + t5668;
  t5574 = t5571*t4685*t3240;
  t5655 = -0.103955395616*t2514*t5649;
  t5685 = t3825*t5670;
  t5694 = t5574 + t5655 + t5685;
  t5719 = t5571*t4685*t2397;
  t5724 = t3986*t5649;
  t5728 = -0.103955395616*t2514*t5670;
  t5729 = t5719 + t5724 + t5728;
  t5733 = t2550*t5571*t4685;
  t5746 = t4067*t5649;
  t5748 = t3730*t5670;
  t5749 = t5733 + t5746 + t5748;
  t96 = 4.610340000044122e-7*var2[26];
  t1169 = -0.994522*t1145;
  t1569 = 0.104528*t1531;
  t1737 = 0. + t1169 + t1569;
  t1753 = var2[25]*t1737;
  t2487 = -1.*t2397*t1145;
  t3180 = -1.*t2550*t3123;
  t3258 = -1.*t3240*t1531;
  t3307 = 0. + t2487 + t3180 + t3258;
  t3322 = var2[24]*t3307;
  t3530 = var2[5]*t3463;
  t4258 = t3663*t4249;
  t4489 = -1.*t4474*t4485;
  t4498 = 0. + t4258 + t4489;
  t4505 = var2[4]*t4498;
  t4676 = -1.*t3463*t4520;
  t4737 = t3663*t4474;
  t4758 = t4249*t4485;
  t4769 = 0. + t4737 + t4758;
  t4792 = t4685*t4769;
  t4813 = 0. + t4676 + t4792;
  t4818 = var2[3]*t4813;
  t4820 = t96 + t1753 + t3322 + t3530 + t4505 + t4818;
  t4828 = 1.000001499774*var2[26];
  t4938 = -0.994522*t4933;
  t5016 = 0.104528*t5000;
  t5024 = 0. + t4938 + t5016;
  t5060 = var2[25]*t5024;
  t5061 = -1.*t2397*t4933;
  t5163 = -1.*t2550*t5161;
  t5170 = -1.*t3240*t5000;
  t5206 = 0. + t5061 + t5163 + t5170;
  t5214 = var2[24]*t5206;
  t5300 = var2[5]*t5295;
  t5424 = t3663*t5400;
  t5452 = -1.*t5441*t4485;
  t5456 = 0. + t5424 + t5452;
  t5471 = var2[4]*t5456;
  t5472 = -1.*t5295*t4520;
  t5488 = t3663*t5441;
  t5490 = t5400*t4485;
  t5491 = 0. + t5488 + t5490;
  t5494 = t4685*t5491;
  t5504 = 0. + t5472 + t5494;
  t5509 = var2[3]*t5504;
  t5534 = t4828 + t5060 + t5214 + t5300 + t5471 + t5509;
  t5708 = t1366*t5694;
  t5731 = t845*t5729;
  t5755 = t2632*t5749;
  t5764 = t5708 + t5731 + t5755;
  t5784 = t1393*t5694;
  t5785 = t650*t5729;
  t5787 = t2985*t5749;
  t5788 = t5784 + t5785 + t5787;
  t5899 = 0.073913*t650;
  t5901 = 0.703234*t845;
  t5906 = t5899 + t5901 + t4886;
  t5910 = 0.703234*t1366;
  t5918 = 0.073913*t1393;
  t5919 = t5910 + t4998 + t5918;
  t5935 = 0.703234*t2632;
  t5937 = 0.073913*t2985;
  t5938 = t5112 + t5935 + t5937;
  t5996 = -0.103955395616*t2514*t5906;
  t6000 = t3730*t5938;
  t6001 = t3825*t5919;
  t6003 = 0. + t5996 + t6000 + t6001;
  t6016 = t3986*t5906;
  t6018 = t4067*t5938;
  t6023 = -0.103955395616*t2514*t5919;
  t6025 = 0. + t6016 + t6018 + t6023;
  t5963 = t2397*t5906;
  t5967 = t2550*t5938;
  t5982 = t3240*t5919;
  t5988 = 0. + t5963 + t5967 + t5982;
  t6037 = t3957*t6003;
  t6068 = -1.*t3666*t6025;
  t6096 = 0. + t6037 + t6068;
  t6007 = t3666*t6003;
  t6026 = t3957*t6025;
  t6034 = 0. + t6007 + t6026;
  t5829 = t4979*t5694;
  t5830 = t4865*t5729;
  t5839 = t5111*t5749;
  t5840 = t5829 + t5830 + t5839;
  t5841 = 0.707107*t5840;
  t4822 = 0.007*t4820;
  t5565 = -0.00002*t5534;
  t5567 = t4822 + t5565;
  t6239 = t3663*t5605*t4520;
  t6242 = -1.*t5571*t4485;
  t6247 = t6239 + t6242;
  t6256 = t5571*t3663;
  t6258 = t5605*t4520*t4485;
  t6261 = t6256 + t6258;
  t6253 = -1.*t3666*t6247;
  t6266 = t3957*t6261;
  t6275 = t6253 + t6266;
  t6283 = t3957*t6247;
  t6288 = t3666*t6261;
  t6290 = t6283 + t6288;
  t6216 = t4685*t3240*t5605;
  t6276 = -0.103955395616*t2514*t6275;
  t6302 = t3825*t6290;
  t6305 = t6216 + t6276 + t6302;
  t6327 = t4685*t2397*t5605;
  t6332 = t3986*t6275;
  t6351 = -0.103955395616*t2514*t6290;
  t6368 = t6327 + t6332 + t6351;
  t6385 = t2550*t4685*t5605;
  t6408 = t4067*t6275;
  t6412 = t3730*t6290;
  t6417 = t6385 + t6408 + t6412;
  t5817 = -0.00002*t4820;
  t5819 = 0.00067*t5534;
  t5822 = t5817 + t5819;
  t6321 = t1366*t6305;
  t6373 = t845*t6368;
  t6423 = t2632*t6417;
  t6439 = t6321 + t6373 + t6423;
  t6446 = t1393*t6305;
  t6451 = t650*t6368;
  t6453 = t2985*t6417;
  t6464 = t6446 + t6451 + t6453;
  t5869 = -8.80875999975661e-7*var2[26];
  t5909 = -0.994522*t5906;
  t5924 = 0.104528*t5919;
  t5928 = 0. + t5909 + t5924;
  t5929 = var2[25]*t5928;
  t5934 = -1.*t2397*t5906;
  t5948 = -1.*t2550*t5938;
  t5951 = -1.*t3240*t5919;
  t5955 = 0. + t5934 + t5948 + t5951;
  t5959 = var2[24]*t5955;
  t5991 = var2[5]*t5988;
  t6036 = t3663*t6034;
  t6124 = -1.*t6096*t4485;
  t6133 = 0. + t6036 + t6124;
  t6152 = var2[4]*t6133;
  t6155 = -1.*t5988*t4520;
  t6163 = t3663*t6096;
  t6171 = t6034*t4485;
  t6173 = 0. + t6163 + t6171;
  t6176 = t4685*t6173;
  t6179 = 0. + t6155 + t6176;
  t6189 = var2[3]*t6179;
  t6199 = t5869 + t5929 + t5959 + t5991 + t6152 + t6189;
  t6473 = t4979*t6305;
  t6476 = t4865*t6368;
  t6483 = t5111*t6417;
  t6492 = t6473 + t6476 + t6483;
  t6516 = 0.707107*t6492;
  t6581 = -1.*t4685*t3663*t3666;
  t6583 = t3957*t4685*t4485;
  t6587 = t6581 + t6583;
  t6595 = t3957*t4685*t3663;
  t6599 = t4685*t3666*t4485;
  t6602 = t6595 + t6599;
  t6580 = -1.*t3240*t4520;
  t6588 = -0.103955395616*t2514*t6587;
  t6604 = t3825*t6602;
  t6615 = t6580 + t6588 + t6604;
  t6627 = -1.*t2397*t4520;
  t6629 = t3986*t6587;
  t6639 = -0.103955395616*t2514*t6602;
  t6646 = t6627 + t6629 + t6639;
  t6661 = -1.*t2550*t4520;
  t6685 = t4067*t6587;
  t6686 = t3730*t6602;
  t6687 = t6661 + t6685 + t6686;
  t6721 = t1366*t6615;
  t6725 = t845*t6646;
  t6731 = t2632*t6687;
  t6742 = t6721 + t6725 + t6731;
  t6748 = t1393*t6615;
  t6750 = t650*t6646;
  t6753 = t2985*t6687;
  t6756 = t6748 + t6750 + t6753;
  t6622 = t4979*t6615;
  t6647 = t4865*t6646;
  t6695 = t5111*t6687;
  t6698 = t6622 + t6647 + t6695;
  t6699 = 0.707107*t6698;
  p_output1[0]=t5567*(0.104528*t5764 - 0.994522*t5788) + t5822*(-0.703234*t5764 - 0.073913*t5788 + t5841) + 0.00697*(0.703234*t5764 + 0.073913*t5788 + t5841)*t6199;
  p_output1[1]=t5567*(0.104528*t6439 - 0.994522*t6464) + t5822*(-0.703234*t6439 - 0.073913*t6464 + t6516) + 0.00697*t6199*(0.703234*t6439 + 0.073913*t6464 + t6516);
  p_output1[2]=t5567*(0.104528*t6742 - 0.994522*t6756) + t5822*(t6699 - 0.703234*t6742 - 0.073913*t6756) + 0.00697*t6199*(t6699 + 0.703234*t6742 + 0.073913*t6756);
}



void AMWorld_right_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
