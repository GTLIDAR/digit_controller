/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:43:56 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jb_shoulder_yaw_joint_left_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t483;
  double t492;
  double t513;
  double t574;
  double t638;
  double t335;
  double t344;
  double t476;
  double t945;
  double t569;
  double t560;
  double t561;
  double t564;
  double t587;
  double t602;
  double t633;
  double t665;
  double t694;
  double t722;
  double t732;
  double t758;
  double t835;
  double t865;
  double t916;
  double t963;
  double t964;
  double t987;
  double t1052;
  double t1054;
  double t1064;
  double t1065;
  double t1124;
  double t1162;
  double t1306;
  double t1314;
  double t1317;
  double t1319;
  double t1321;
  double t1342;
  double t1357;
  double t1361;
  double t1432;
  double t734;
  double t806;
  double t818;
  double t1087;
  double t1110;
  double t1112;
  double t1362;
  double t1403;
  double t145;
  double t1485;
  double t1491;
  double t1492;
  double t1497;
  double t1511;
  double t1593;
  double t1625;
  double t1640;
  double t87;
  double t1710;
  double t1711;
  double t1793;
  double t1409;
  double t1649;
  double t1664;
  double t1838;
  double t32;
  double t2619;
  double t2621;
  double t2630;
  double t2636;
  double t2640;
  double t2697;
  double t2712;
  double t2719;
  double t2773;
  double t2631;
  double t2704;
  double t2779;
  double t2788;
  double t2886;
  double t2949;
  double t2975;
  double t2991;
  double t1939;
  double t1963;
  double t2089;
  double t2093;
  double t2182;
  double t2188;
  double t2293;
  double t2295;
  double t2476;
  double t3027;
  double t3039;
  double t3071;
  double t2862;
  double t3002;
  double t3007;
  double t3326;
  double t3367;
  double t3403;
  double t3441;
  double t3458;
  double t3463;
  double t3469;
  double t3474;
  double t3490;
  double t3429;
  double t3466;
  double t3499;
  double t3516;
  double t3616;
  double t3637;
  double t3652;
  double t3684;
  double t3760;
  double t3790;
  double t3806;
  double t3520;
  double t3697;
  double t3704;
  double t1695;
  double t1872;
  double t1906;
  double t2117;
  double t2267;
  double t2297;
  double t2351;
  double t2395;
  double t2514;
  double t2516;
  double t2521;
  double t2556;
  double t2600;
  double t3023;
  double t3076;
  double t3077;
  double t3122;
  double t3172;
  double t3179;
  double t3182;
  double t3186;
  double t3192;
  double t3194;
  double t3215;
  double t3242;
  double t3255;
  double t3737;
  double t3816;
  double t3853;
  double t3868;
  double t3878;
  double t3880;
  double t3886;
  double t3888;
  double t3895;
  double t3903;
  double t3907;
  double t3916;
  double t3927;
  double t4299;
  double t4360;
  double t4362;
  double t4801;
  double t4784;
  double t4974;
  double t4736;
  double t4750;
  double t4771;
  double t4792;
  double t4800;
  double t4828;
  double t4843;
  double t4864;
  double t4884;
  double t4906;
  double t4921;
  double t4926;
  double t4956;
  double t5006;
  double t5013;
  double t5032;
  double t5045;
  double t5052;
  double t5105;
  double t5109;
  double t5145;
  double t5239;
  double t5249;
  double t5351;
  double t5353;
  double t5413;
  double t5421;
  double t5427;
  double t5431;
  double t5447;
  double t4386;
  double t4531;
  double t4646;
  double t4708;
  double t4712;
  double t4918;
  double t5135;
  double t5449;
  double t5452;
  double t5504;
  double t5505;
  double t5506;
  double t5508;
  double t5515;
  double t5531;
  double t5547;
  double t4279;
  double t4289;
  double t4292;
  double t5576;
  double t5584;
  double t5654;
  double t5659;
  double t5660;
  double t4536;
  double t4621;
  double t5498;
  double t5568;
  double t5570;
  double t5714;
  double t5720;
  double t5721;
  double t5731;
  double t5741;
  double t5743;
  double t5757;
  double t5781;
  double t5796;
  double t5809;
  double t5574;
  double t5669;
  double t5673;
  double t5771;
  double t5820;
  double t5823;
  double t5830;
  double t5841;
  double t5854;
  double t4246;
  double t4267;
  double t4270;
  double t5686;
  double t5877;
  double t5936;
  double t5961;
  double t5991;
  double t6009;
  double t6048;
  double t6030;
  double t6078;
  double t6069;
  double t6100;
  double t6087;
  double t6341;
  double t6343;
  double t6344;
  double t6345;
  double t6368;
  double t6371;
  double t6374;
  double t6375;
  double t6429;
  double t6433;
  double t6436;
  double t6437;
  double t6414;
  double t6420;
  double t6421;
  double t6422;
  double t6474;
  double t6476;
  double t6477;
  double t6479;
  double t6484;
  double t6492;
  double t6493;
  double t6494;
  t483 = Cos(var1[15]);
  t492 = -1.*t483;
  t513 = 1. + t492;
  t574 = Sin(var1[15]);
  t638 = 0.05226439969100001*t513;
  t335 = Cos(var1[14]);
  t344 = -1.*t335;
  t476 = 1. + t344;
  t945 = -0.49726168403800003*t513;
  t569 = -0.051978134642000004*t513;
  t560 = -0.9945383682050002*t513;
  t561 = 1. + t560;
  t564 = -0.073913*t561;
  t587 = -0.707107*t574;
  t602 = t569 + t587;
  t633 = 0.703234*t602;
  t665 = -0.703234*t574;
  t694 = t638 + t665;
  t722 = 0.707107*t694;
  t732 = t564 + t633 + t722;
  t758 = Sin(var1[14]);
  t835 = -0.500001190325*t513;
  t865 = 1. + t835;
  t916 = 0.707107*t865;
  t963 = 0.073913*t574;
  t964 = t945 + t963;
  t987 = 0.703234*t964;
  t1052 = 0.703234*t574;
  t1054 = t638 + t1052;
  t1064 = -0.073913*t1054;
  t1065 = t916 + t987 + t1064;
  t1124 = -0.5054634410180001*t513;
  t1162 = 1. + t1124;
  t1306 = 0.703234*t1162;
  t1314 = -0.073913*t574;
  t1317 = t945 + t1314;
  t1319 = 0.707107*t1317;
  t1321 = 0.707107*t574;
  t1342 = t569 + t1321;
  t1357 = -0.073913*t1342;
  t1361 = t1306 + t1319 + t1357;
  t1432 = Cos(var1[13]);
  t734 = 0.103955395616*t476*t732;
  t806 = -0.994522*t758;
  t818 = 0. + t806;
  t1087 = t818*t1065;
  t1110 = -0.9890740084840001*t476;
  t1112 = 1. + t1110;
  t1362 = t1112*t1361;
  t1403 = 0. + t734 + t1087 + t1362;
  t145 = Sin(var1[13]);
  t1485 = -0.010926102783999999*t476;
  t1491 = 1. + t1485;
  t1492 = t1491*t732;
  t1497 = 0.104528*t758;
  t1511 = 0. + t1497;
  t1593 = t1511*t1065;
  t1625 = 0.103955395616*t476*t1361;
  t1640 = 0. + t1492 + t1593 + t1625;
  t87 = Cos(var1[5]);
  t1710 = t1432*t1403;
  t1711 = -1.*t145*t1640;
  t1793 = 0. + t1710 + t1711;
  t1409 = t145*t1403;
  t1649 = t1432*t1640;
  t1664 = 0. + t1409 + t1649;
  t1838 = Sin(var1[5]);
  t32 = Sin(var1[3]);
  t2619 = -0.994522*t561;
  t2621 = -0.104528*t602;
  t2630 = t2619 + t2621;
  t2636 = -0.104528*t964;
  t2640 = -0.994522*t1054;
  t2697 = t2636 + t2640;
  t2712 = -0.104528*t1162;
  t2719 = -0.994522*t1342;
  t2773 = t2712 + t2719;
  t2631 = 0.103955395616*t476*t2630;
  t2704 = t818*t2697;
  t2779 = t1112*t2773;
  t2788 = 0. + t2631 + t2704 + t2779;
  t2886 = t1491*t2630;
  t2949 = t1511*t2697;
  t2975 = 0.103955395616*t476*t2773;
  t2991 = 0. + t2886 + t2949 + t2975;
  t1939 = Cos(var1[3]);
  t1963 = Cos(var1[4]);
  t2089 = -0.104528*t758;
  t2093 = 0. + t2089;
  t2182 = -1.0000001112680001*t476;
  t2188 = 1. + t2182;
  t2293 = 0.994522*t758;
  t2295 = 0. + t2293;
  t2476 = Sin(var1[4]);
  t3027 = t1432*t2788;
  t3039 = -1.*t145*t2991;
  t3071 = 0. + t3027 + t3039;
  t2862 = t145*t2788;
  t3002 = t1432*t2991;
  t3007 = 0. + t2862 + t3002;
  t3326 = 0.073913*t561;
  t3367 = -0.703234*t602;
  t3403 = t3326 + t3367 + t722;
  t3441 = -0.703234*t964;
  t3458 = 0.073913*t1054;
  t3463 = t916 + t3441 + t3458;
  t3469 = -0.703234*t1162;
  t3474 = 0.073913*t1342;
  t3490 = t3469 + t1319 + t3474;
  t3429 = 0.103955395616*t476*t3403;
  t3466 = t818*t3463;
  t3499 = t1112*t3490;
  t3516 = 0. + t3429 + t3466 + t3499;
  t3616 = t1491*t3403;
  t3637 = t1511*t3463;
  t3652 = 0.103955395616*t476*t3490;
  t3684 = 0. + t3616 + t3637 + t3652;
  t3760 = t1432*t3516;
  t3790 = -1.*t145*t3684;
  t3806 = 0. + t3760 + t3790;
  t3520 = t145*t3516;
  t3697 = t1432*t3684;
  t3704 = 0. + t3520 + t3697;
  t1695 = t87*t1664;
  t1872 = -1.*t1793*t1838;
  t1906 = 0. + t1695 + t1872;
  t2117 = t2093*t732;
  t2267 = t2188*t1065;
  t2297 = t2295*t1361;
  t2351 = 0. + t2117 + t2267 + t2297;
  t2395 = t1963*t2351;
  t2514 = t87*t1793;
  t2516 = t1664*t1838;
  t2521 = 0. + t2514 + t2516;
  t2556 = t2476*t2521;
  t2600 = 0. + t2395 + t2556;
  t3023 = t87*t3007;
  t3076 = -1.*t3071*t1838;
  t3077 = 0. + t3023 + t3076;
  t3122 = t2093*t2630;
  t3172 = t2188*t2697;
  t3179 = t2295*t2773;
  t3182 = 0. + t3122 + t3172 + t3179;
  t3186 = t1963*t3182;
  t3192 = t87*t3071;
  t3194 = t3007*t1838;
  t3215 = 0. + t3192 + t3194;
  t3242 = t2476*t3215;
  t3255 = 0. + t3186 + t3242;
  t3737 = t87*t3704;
  t3816 = -1.*t3806*t1838;
  t3853 = 0. + t3737 + t3816;
  t3868 = t2093*t3403;
  t3878 = t2188*t3463;
  t3880 = t2295*t3490;
  t3886 = 0. + t3868 + t3878 + t3880;
  t3888 = t1963*t3886;
  t3895 = t87*t3806;
  t3903 = t3704*t1838;
  t3907 = 0. + t3895 + t3903;
  t3916 = t2476*t3907;
  t3927 = 0. + t3888 + t3916;
  t4299 = -1.*t3886*t2476;
  t4360 = t1963*t3907;
  t4362 = 0. + t4299 + t4360;
  t4801 = 0.49726168403800003*t513;
  t4784 = -0.05226439969100001*t513;
  t4974 = 0.051978134642000004*t513;
  t4736 = 1.568745163810375e-7*var1[15];
  t4750 = 0.060173*t865;
  t4771 = 0.08219200580743281*t513;
  t4792 = t4784 + t665;
  t4800 = 0.231098203479*t4792;
  t4828 = t4801 + t1314;
  t4843 = 0.18957839082800002*t4828;
  t4864 = 0.293218*t964;
  t4884 = 0.220205*t1054;
  t4906 = t4736 + t4750 + t4771 + t4800 + t4843 + t4864 + t4884;
  t4921 = -1.5601527583902087e-7*var1[15];
  t4926 = 0.293218*t1162;
  t4956 = 0.09582494577057615*t513;
  t5006 = t4974 + t587;
  t5013 = 0.231098203479*t5006;
  t5032 = 0.060173*t1317;
  t5045 = t4801 + t963;
  t5052 = 0.164383620275*t5045;
  t5105 = 0.220205*t1342;
  t5109 = t4921 + t4926 + t4956 + t5013 + t5032 + t5052 + t5105;
  t5145 = 1.639789470231751e-8*var1[15];
  t5239 = 0.220205*t561;
  t5249 = 0.22983603018311177*t513;
  t5351 = 0.293218*t602;
  t5353 = 0.060173*t694;
  t5413 = t4784 + t1052;
  t5421 = 0.164383620275*t5413;
  t5427 = t4974 + t1321;
  t5431 = 0.18957839082800002*t5427;
  t5447 = t5145 + t5239 + t5249 + t5351 + t5353 + t5421 + t5431;
  t4386 = -1.*t1432;
  t4531 = 1. + t4386;
  t4646 = 1.1345904784751044e-7*var1[14];
  t4708 = -0.04027119345689465*t476;
  t4712 = -0.05650052807*t2093;
  t4918 = t1511*t4906;
  t5135 = 0.103955395616*t476*t5109;
  t5449 = t1491*t5447;
  t5452 = t4646 + t4708 + t4712 + t4918 + t5135 + t5449;
  t5504 = 1.1924972351948546e-8*var1[14];
  t5505 = 0.38315655000705834*t476;
  t5506 = -0.05650052807*t2295;
  t5508 = t818*t4906;
  t5515 = t1112*t5109;
  t5531 = 0.103955395616*t476*t5447;
  t5547 = t5504 + t5505 + t5506 + t5508 + t5515 + t5531;
  t4279 = -1.*t3182*t2476;
  t4289 = t1963*t3215;
  t4292 = 0. + t4279 + t4289;
  t5576 = 0.4*t4531;
  t5584 = 0.12*t145;
  t5654 = -1.*t145*t5452;
  t5659 = t1432*t5547;
  t5660 = 0. + t5576 + t5584 + t5654 + t5659;
  t4536 = 0.12*t4531;
  t4621 = -0.4*t145;
  t5498 = t1432*t5452;
  t5568 = t145*t5547;
  t5570 = 0. + t4536 + t4621 + t5498 + t5568;
  t5714 = -0.056500534356700764*t476;
  t5720 = 0.38315650737400003*t818;
  t5721 = -0.040271188976*t1511;
  t5731 = t2188*t4906;
  t5741 = t2295*t5109;
  t5743 = t2093*t5447;
  t5757 = 0. + t5714 + t5720 + t5721 + t5731 + t5741 + t5743;
  t5781 = t87*t5660;
  t5796 = t5570*t1838;
  t5809 = 0. + t5781 + t5796;
  t5574 = t87*t5570;
  t5669 = -1.*t5660*t1838;
  t5673 = 0. + t5574 + t5669;
  t5771 = -1.*t5757*t2476;
  t5820 = t1963*t5809;
  t5823 = 0. + t5771 + t5820;
  t5830 = t1963*t5757;
  t5841 = t2476*t5809;
  t5854 = 0. + t5830 + t5841;
  t4246 = -1.*t2351*t2476;
  t4267 = t1963*t2521;
  t4270 = 0. + t4246 + t4267;
  t5686 = -1.*t3077*t5673;
  t5877 = t3853*t5673;
  t5936 = t1906*t5673;
  t5961 = -1.*t3853*t5673;
  t5991 = t3077*t5673;
  t6009 = -1.*t1906*t5673;
  t6048 = t3886*t5757;
  t6030 = -1.*t3182*t5757;
  t6078 = -1.*t3886*t5757;
  t6069 = t2351*t5757;
  t6100 = -1.*t2351*t5757;
  t6087 = t3182*t5757;
  t6341 = t3463*t4906;
  t6343 = t3490*t5109;
  t6344 = t3403*t5447;
  t6345 = t6341 + t6343 + t6344;
  t6368 = -1.*t2697*t4906;
  t6371 = -1.*t2773*t5109;
  t6374 = -1.*t2630*t5447;
  t6375 = t6368 + t6371 + t6374;
  t6429 = -1.*t3463*t4906;
  t6433 = -1.*t3490*t5109;
  t6436 = -1.*t3403*t5447;
  t6437 = t6429 + t6433 + t6436;
  t6414 = t1065*t4906;
  t6420 = t1361*t5109;
  t6421 = t732*t5447;
  t6422 = t6414 + t6420 + t6421;
  t6474 = -1.*t1065*t4906;
  t6476 = -1.*t1361*t5109;
  t6477 = -1.*t732*t5447;
  t6479 = t6474 + t6476 + t6477;
  t6484 = t2697*t4906;
  t6492 = t2773*t5109;
  t6493 = t2630*t5447;
  t6494 = t6484 + t6492 + t6493;
  p_output1[0]=0. + t1939*t2600 - 1.*t1906*t32;
  p_output1[1]=0. - 1.*t3077*t32 + t1939*t3255;
  p_output1[2]=0. - 1.*t32*t3853 + t1939*t3927;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0. + t1906*t1939 + t2600*t32;
  p_output1[7]=0. + t1939*t3077 + t32*t3255;
  p_output1[8]=0. + t1939*t3853 + t32*t3927;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=t4270;
  p_output1[13]=t4292;
  p_output1[14]=t4362;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=t4362*(t5686 - 1.*t4292*t5823 - 1.*t3255*t5854) + t4292*(t4362*t5823 + t3927*t5854 + t5877);
  p_output1[19]=t4362*(t4270*t5823 + t2600*t5854 + t5936) + t4270*(-1.*t4362*t5823 - 1.*t3927*t5854 + t5961);
  p_output1[20]=t4270*(t4292*t5823 + t3255*t5854 + t5991) + t4292*(-1.*t4270*t5823 - 1.*t2600*t5854 + t6009);
  p_output1[21]=t4270;
  p_output1[22]=t4292;
  p_output1[23]=t4362;
  p_output1[24]=t3853*(t5686 - 1.*t3215*t5809 + t6030) + t3077*(t3907*t5809 + t5877 + t6048);
  p_output1[25]=t3853*(t2521*t5809 + t5936 + t6069) + t1906*(-1.*t3907*t5809 + t5961 + t6078);
  p_output1[26]=t1906*(t3215*t5809 + t5991 + t6087) + t3077*(-1.*t2521*t5809 + t6009 + t6100);
  p_output1[27]=t1906;
  p_output1[28]=t3077;
  p_output1[29]=t3853;
  p_output1[30]=t3886*(-1.*t3007*t5570 - 1.*t3071*t5660 + t6030) + t3182*(t3704*t5570 + t3806*t5660 + t6048);
  p_output1[31]=t3886*(t1664*t5570 + t1793*t5660 + t6069) + t2351*(-1.*t3704*t5570 - 1.*t3806*t5660 + t6078);
  p_output1[32]=t2351*(t3007*t5570 + t3071*t5660 + t6087) + t3182*(-1.*t1664*t5570 - 1.*t1793*t5660 + t6100);
  p_output1[33]=t2351;
  p_output1[34]=t3182;
  p_output1[35]=t3886;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0.12*t1403 - 0.4*t1640 - 1.*t3886*(-1.*t2991*t5452 - 1.*t2788*t5547 + t6030) - 1.*t3182*(t3684*t5452 + t3516*t5547 + t6048);
  p_output1[79]=0.12*t2788 - 0.4*t2991 - 1.*t3886*(t1640*t5452 + t1403*t5547 + t6069) - 1.*t2351*(-1.*t3684*t5452 - 1.*t3516*t5547 + t6078);
  p_output1[80]=0.12*t3516 - 0.4*t3684 - 1.*t2351*(t2991*t5452 + t2788*t5547 + t6087) - 1.*t3182*(-1.*t1640*t5452 - 1.*t1403*t5547 + t6100);
  p_output1[81]=0. - 1.*t1065*t2188 - 1.*t1361*t2295 - 1.*t2093*t732;
  p_output1[82]=0. - 1.*t2093*t2630 - 1.*t2188*t2697 - 1.*t2295*t2773;
  p_output1[83]=0. - 1.*t2093*t3403 - 1.*t2188*t3463 - 1.*t2295*t3490;
  p_output1[84]=-0.385267*t1065 - 0.056191*t1361 + 0.994522*(t2630*t6345 + t3403*t6375) + 0.104528*(t2773*t6345 + t3490*t6375) + 0.005906*t732;
  p_output1[85]=0.005906*t2630 - 0.385267*t2697 - 0.056191*t2773 + 0.104528*(t3490*t6422 + t1361*t6437) + 0.994522*(t3403*t6422 + t6437*t732);
  p_output1[86]=0.005906*t3403 - 0.385267*t3463 - 0.056191*t3490 + 0.104528*(t2773*t6479 + t1361*t6494) + 0.994522*(t2630*t6479 + t6494*t732);
  p_output1[87]=0. + 0.104528*t1361 + 0.994522*t732;
  p_output1[88]=0. + 0.994522*t2630 + 0.104528*t2773;
  p_output1[89]=0. + 0.994522*t3403 + 0.104528*t3490;
  p_output1[90]=5.962928707747839e-8;
  p_output1[91]=4.2665979334277626e-7;
  p_output1[92]=5.489413506948315e-7;
  p_output1[93]=-8.80875999975661e-7;
  p_output1[94]=-4.610340000044122e-7;
  p_output1[95]=1.000001499774;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
}



void Jb_shoulder_yaw_joint_left_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
