/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:44:39 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jp_hip_flexion_right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t570;
  double t1300;
  double t1616;
  double t1481;
  double t1597;
  double t1700;
  double t409;
  double t413;
  double t487;
  double t1326;
  double t1599;
  double t1726;
  double t2046;
  double t2079;
  double t2647;
  double t2715;
  double t2952;
  double t174;
  double t3769;
  double t3774;
  double t3351;
  double t3369;
  double t3418;
  double t3865;
  double t3902;
  double t3926;
  double t4061;
  double t4093;
  double t4145;
  double t4231;
  double t3214;
  double t3305;
  double t795;
  double t872;
  double t900;
  double t1042;
  double t4978;
  double t4984;
  double t4260;
  double t4291;
  double t4329;
  double t4365;
  double t4405;
  double t4475;
  double t4840;
  double t4842;
  double t4654;
  double t4657;
  double t4675;
  double t4709;
  double t4726;
  double t4749;
  double t5054;
  double t5152;
  double t5197;
  double t5249;
  double t5254;
  double t5273;
  double t4242;
  double t4254;
  double t4614;
  double t4628;
  double t562;
  double t890;
  double t1140;
  double t1174;
  double t1442;
  double t1471;
  double t2176;
  double t2215;
  double t2290;
  double t2442;
  double t3050;
  double t3056;
  double t3348;
  double t3349;
  double t5786;
  double t5801;
  double t5883;
  double t5896;
  double t5898;
  double t5917;
  double t3574;
  double t3729;
  double t3786;
  double t3799;
  double t4010;
  double t4202;
  double t4255;
  double t4258;
  double t5922;
  double t5957;
  double t5960;
  double t5965;
  double t5966;
  double t5971;
  double t4554;
  double t4595;
  double t4646;
  double t4648;
  double t4829;
  double t4969;
  double t5021;
  double t5051;
  double t5989;
  double t5993;
  double t6008;
  double t6026;
  double t6040;
  double t6041;
  double t6052;
  double t6059;
  double t5363;
  double t5368;
  double t6070;
  double t6084;
  double t6089;
  double t6097;
  double t5382;
  double t5389;
  double t5646;
  double t5685;
  double t6201;
  double t6202;
  double t6203;
  double t6206;
  double t6208;
  double t6214;
  double t6217;
  double t6222;
  double t6223;
  double t6224;
  double t6229;
  double t6230;
  double t6254;
  double t6263;
  double t6280;
  double t6282;
  double t6284;
  double t6299;
  double t6437;
  double t6441;
  double t6444;
  double t6452;
  double t6453;
  double t6456;
  double t6460;
  double t6465;
  double t6466;
  double t6472;
  double t6490;
  double t6494;
  double t6497;
  double t6504;
  double t6511;
  double t6512;
  double t6519;
  double t6520;
  double t6642;
  double t6646;
  double t6647;
  double t6666;
  double t6668;
  double t6672;
  double t6674;
  double t6676;
  double t6684;
  double t6685;
  double t6694;
  double t6699;
  double t6700;
  double t6701;
  double t6716;
  double t6717;
  double t6718;
  double t6721;
  double t6785;
  double t6786;
  double t6787;
  double t6800;
  double t6806;
  double t6813;
  double t6817;
  double t6821;
  double t6836;
  double t6837;
  double t6839;
  double t6847;
  double t6851;
  double t6852;
  double t6854;
  double t6855;
  double t6856;
  double t6896;
  double t6897;
  double t6899;
  double t6915;
  double t6924;
  double t6928;
  double t6929;
  double t6930;
  double t6940;
  double t6945;
  double t6946;
  double t6950;
  double t6956;
  double t6958;
  double t6967;
  double t6969;
  double t6970;
  double t7023;
  double t7026;
  double t7027;
  double t7035;
  double t7036;
  double t7037;
  double t7044;
  double t7053;
  double t7054;
  double t7059;
  double t7060;
  double t7064;
  double t7069;
  double t7071;
  double t7073;
  double t7136;
  double t7140;
  double t7142;
  double t7158;
  double t7160;
  double t7162;
  double t7164;
  double t7165;
  double t7170;
  double t7171;
  double t7172;
  double t7228;
  double t7230;
  double t7245;
  double t7252;
  double t7255;
  double t7256;
  double t7261;
  double t7263;
  double t7264;
  double t7271;
  double t7272;
  double t7273;
  double t7278;
  double t7280;
  double t7284;
  double t7295;
  double t7299;
  double t7304;
  double t7344;
  double t7346;
  double t7347;
  double t7353;
  double t7356;
  double t7363;
  double t7366;
  double t7368;
  double t7370;
  double t7382;
  double t7384;
  double t7386;
  double t7393;
  double t7400;
  double t7401;
  double t7465;
  double t7468;
  double t7471;
  double t7472;
  double t7475;
  double t7476;
  double t7478;
  double t7482;
  double t7496;
  double t7498;
  double t7499;
  double t7500;
  double t7443;
  double t7444;
  double t7445;
  double t7447;
  double t7448;
  double t7449;
  double t7461;
  double t7462;
  double t7463;
  double t7531;
  double t7532;
  double t7535;
  double t7536;
  double t7537;
  double t7542;
  double t7544;
  double t7545;
  double t7547;
  double t7549;
  double t7555;
  double t7559;
  double t7560;
  double t7563;
  double t7611;
  double t7614;
  double t7615;
  double t7616;
  double t7618;
  double t7619;
  double t7620;
  double t7621;
  double t7623;
  double t7624;
  double t7627;
  double t7628;
  double t7663;
  double t7667;
  double t7670;
  double t7674;
  double t7679;
  double t7684;
  double t7689;
  double t7693;
  double t7694;
  double t7731;
  double t7732;
  double t7733;
  double t7736;
  double t7738;
  double t7741;
  double t7742;
  double t7748;
  double t7752;
  double t7753;
  double t7754;
  double t7782;
  double t7783;
  double t7784;
  double t7787;
  double t7788;
  double t7790;
  double t7793;
  double t7794;
  double t7795;
  double t7796;
  t570 = Sin(var1[18]);
  t1300 = Sin(var1[3]);
  t1616 = Cos(var1[3]);
  t1481 = Cos(var1[5]);
  t1597 = Sin(var1[4]);
  t1700 = Sin(var1[5]);
  t409 = Cos(var1[18]);
  t413 = -1.*t409;
  t487 = 1. + t413;
  t1326 = Sin(var1[17]);
  t1599 = -1.*t1481*t1300*t1597;
  t1726 = t1616*t1700;
  t2046 = t1599 + t1726;
  t2079 = Cos(var1[17]);
  t2647 = -1.*t1616*t1481;
  t2715 = -1.*t1300*t1597*t1700;
  t2952 = t2647 + t2715;
  t174 = Cos(var1[4]);
  t3769 = -0.366501*t570;
  t3774 = 0. + t3769;
  t3351 = -1.*t1326*t2046;
  t3369 = t2079*t2952;
  t3418 = t3351 + t3369;
  t3865 = t2079*t2046;
  t3902 = t1326*t2952;
  t3926 = t3865 + t3902;
  t4061 = Cos(var1[19]);
  t4093 = -1.*t4061;
  t4145 = 1. + t4093;
  t4231 = Sin(var1[19]);
  t3214 = 0.930418*t570;
  t3305 = 0. + t3214;
  t795 = -0.930418*t570;
  t872 = 0. + t795;
  t900 = 0.366501*t570;
  t1042 = 0. + t900;
  t4978 = 0.930418*t4231;
  t4984 = 0. + t4978;
  t4260 = -1.*t174*t3774*t1300;
  t4291 = 0.340999127418*t487*t3418;
  t4329 = -0.134322983001*t487;
  t4365 = 1. + t4329;
  t4405 = t4365*t3926;
  t4475 = t4260 + t4291 + t4405;
  t4840 = 0.366501*t4231;
  t4842 = 0. + t4840;
  t4654 = -1.*t174*t3305*t1300;
  t4657 = -0.8656776547239999*t487;
  t4675 = 1. + t4657;
  t4709 = t4675*t3418;
  t4726 = 0.340999127418*t487*t3926;
  t4749 = t4654 + t4709 + t4726;
  t5054 = -1.000000637725*t487;
  t5152 = 1. + t5054;
  t5197 = -1.*t5152*t174*t1300;
  t5249 = t872*t3418;
  t5254 = t1042*t3926;
  t5273 = t5197 + t5249 + t5254;
  t4242 = -0.930418*t4231;
  t4254 = 0. + t4242;
  t4614 = -0.366501*t4231;
  t4628 = 0. + t4614;
  t562 = -0.04500040093286238*t487;
  t890 = -0.07877663122399998*t872;
  t1140 = 0.031030906668*t1042;
  t1174 = 0. + t562 + t890 + t1140;
  t1442 = -0.091*t1326;
  t1471 = 0. + t1442;
  t2176 = -1.*t2079;
  t2215 = 1. + t2176;
  t2290 = -0.091*t2215;
  t2442 = 0. + t2290;
  t3050 = 1.296332362046933e-7*var1[18];
  t3056 = -0.07877668146182712*t487;
  t3348 = -0.045000372235*t3305;
  t3349 = t3050 + t3056 + t3348;
  t5786 = t1616*t1481*t1597;
  t5801 = t1300*t1700;
  t5883 = t5786 + t5801;
  t5896 = -1.*t1481*t1300;
  t5898 = t1616*t1597*t1700;
  t5917 = t5896 + t5898;
  t3574 = 3.2909349868922137e-7*var1[18];
  t3729 = 0.03103092645718495*t487;
  t3786 = -0.045000372235*t3774;
  t3799 = t3574 + t3729 + t3786;
  t4010 = -1.296332362046933e-7*var1[19];
  t4202 = -0.14128592423750855*t4145;
  t4255 = -0.045000372235*t4254;
  t4258 = t4010 + t4202 + t4255;
  t5922 = -1.*t1326*t5883;
  t5957 = t2079*t5917;
  t5960 = t5922 + t5957;
  t5965 = t2079*t5883;
  t5966 = t1326*t5917;
  t5971 = t5965 + t5966;
  t4554 = 3.2909349868922137e-7*var1[19];
  t4595 = -0.055653945343889656*t4145;
  t4646 = -0.045000372235*t4628;
  t4648 = t4554 + t4595 + t4646;
  t4829 = -0.04500040093286238*t4145;
  t4969 = -0.055653909852*t4842;
  t5021 = -0.141285834136*t4984;
  t5051 = 0. + t4829 + t4969 + t5021;
  t5989 = t1616*t174*t3774;
  t5993 = 0.340999127418*t487*t5960;
  t6008 = t4365*t5971;
  t6026 = t5989 + t5993 + t6008;
  t6040 = t1616*t174*t3305;
  t6041 = t4675*t5960;
  t6052 = 0.340999127418*t487*t5971;
  t6059 = t6040 + t6041 + t6052;
  t5363 = -1.000000637725*t4145;
  t5368 = 1. + t5363;
  t6070 = t5152*t1616*t174;
  t6084 = t872*t5960;
  t6089 = t1042*t5971;
  t6097 = t6070 + t6084 + t6089;
  t5382 = -0.8656776547239999*t4145;
  t5389 = 1. + t5382;
  t5646 = -0.134322983001*t4145;
  t5685 = 1. + t5646;
  t6201 = -1.*t1616*t174*t1481*t1326;
  t6202 = t2079*t1616*t174*t1700;
  t6203 = t6201 + t6202;
  t6206 = t2079*t1616*t174*t1481;
  t6208 = t1616*t174*t1326*t1700;
  t6214 = t6206 + t6208;
  t6217 = -1.*t1616*t3774*t1597;
  t6222 = 0.340999127418*t487*t6203;
  t6223 = t4365*t6214;
  t6224 = t6217 + t6222 + t6223;
  t6229 = -1.*t1616*t3305*t1597;
  t6230 = t4675*t6203;
  t6254 = 0.340999127418*t487*t6214;
  t6263 = t6229 + t6230 + t6254;
  t6280 = -1.*t5152*t1616*t1597;
  t6282 = t872*t6203;
  t6284 = t1042*t6214;
  t6299 = t6280 + t6282 + t6284;
  t6437 = -1.*t174*t1481*t1326*t1300;
  t6441 = t2079*t174*t1300*t1700;
  t6444 = t6437 + t6441;
  t6452 = t2079*t174*t1481*t1300;
  t6453 = t174*t1326*t1300*t1700;
  t6456 = t6452 + t6453;
  t6460 = -1.*t3774*t1300*t1597;
  t6465 = 0.340999127418*t487*t6444;
  t6466 = t4365*t6456;
  t6472 = t6460 + t6465 + t6466;
  t6490 = -1.*t3305*t1300*t1597;
  t6494 = t4675*t6444;
  t6497 = 0.340999127418*t487*t6456;
  t6504 = t6490 + t6494 + t6497;
  t6511 = -1.*t5152*t1300*t1597;
  t6512 = t872*t6444;
  t6519 = t1042*t6456;
  t6520 = t6511 + t6512 + t6519;
  t6642 = t1481*t1326*t1597;
  t6646 = -1.*t2079*t1597*t1700;
  t6647 = t6642 + t6646;
  t6666 = -1.*t2079*t1481*t1597;
  t6668 = -1.*t1326*t1597*t1700;
  t6672 = t6666 + t6668;
  t6674 = -1.*t174*t3774;
  t6676 = 0.340999127418*t487*t6647;
  t6684 = t4365*t6672;
  t6685 = t6674 + t6676 + t6684;
  t6694 = -1.*t174*t3305;
  t6699 = t4675*t6647;
  t6700 = 0.340999127418*t487*t6672;
  t6701 = t6694 + t6699 + t6700;
  t6716 = -1.*t5152*t174;
  t6717 = t872*t6647;
  t6718 = t1042*t6672;
  t6721 = t6716 + t6717 + t6718;
  t6785 = t1481*t1300;
  t6786 = -1.*t1616*t1597*t1700;
  t6787 = t6785 + t6786;
  t6800 = t1326*t5883;
  t6806 = t2079*t6787;
  t6813 = t6800 + t6806;
  t6817 = -1.*t1326*t6787;
  t6821 = t5965 + t6817;
  t6836 = 0.340999127418*t487*t6813;
  t6837 = t4675*t6821;
  t6839 = t6836 + t6837;
  t6847 = t4365*t6813;
  t6851 = 0.340999127418*t487*t6821;
  t6852 = t6847 + t6851;
  t6854 = t1042*t6813;
  t6855 = t872*t6821;
  t6856 = t6854 + t6855;
  t6896 = t1481*t1300*t1597;
  t6897 = -1.*t1616*t1700;
  t6899 = t6896 + t6897;
  t6915 = t1326*t6899;
  t6924 = t6915 + t3369;
  t6928 = t2079*t6899;
  t6929 = -1.*t1326*t2952;
  t6930 = t6928 + t6929;
  t6940 = 0.340999127418*t487*t6924;
  t6945 = t4675*t6930;
  t6946 = t6940 + t6945;
  t6950 = t4365*t6924;
  t6956 = 0.340999127418*t487*t6930;
  t6958 = t6950 + t6956;
  t6967 = t1042*t6924;
  t6969 = t872*t6930;
  t6970 = t6967 + t6969;
  t7023 = t174*t1481*t1326;
  t7026 = -1.*t2079*t174*t1700;
  t7027 = t7023 + t7026;
  t7035 = t2079*t174*t1481;
  t7036 = t174*t1326*t1700;
  t7037 = t7035 + t7036;
  t7044 = 0.340999127418*t487*t7027;
  t7053 = t4675*t7037;
  t7054 = t7044 + t7053;
  t7059 = t4365*t7027;
  t7060 = 0.340999127418*t487*t7037;
  t7064 = t7059 + t7060;
  t7069 = t1042*t7027;
  t7071 = t872*t7037;
  t7073 = t7069 + t7071;
  t7136 = -1.*t2079*t5883;
  t7140 = -1.*t1326*t5917;
  t7142 = t7136 + t7140;
  t7158 = t4675*t7142;
  t7160 = t5993 + t7158;
  t7162 = t4365*t5960;
  t7164 = 0.340999127418*t487*t7142;
  t7165 = t7162 + t7164;
  t7170 = t1042*t5960;
  t7171 = t872*t7142;
  t7172 = t7170 + t7171;
  t7228 = t1616*t1481;
  t7230 = t1300*t1597*t1700;
  t7245 = t7228 + t7230;
  t7252 = -1.*t1326*t6899;
  t7255 = t2079*t7245;
  t7256 = t7252 + t7255;
  t7261 = -1.*t2079*t6899;
  t7263 = -1.*t1326*t7245;
  t7264 = t7261 + t7263;
  t7271 = 0.340999127418*t487*t7256;
  t7272 = t4675*t7264;
  t7273 = t7271 + t7272;
  t7278 = t4365*t7256;
  t7280 = 0.340999127418*t487*t7264;
  t7284 = t7278 + t7280;
  t7295 = t1042*t7256;
  t7299 = t872*t7264;
  t7304 = t7295 + t7299;
  t7344 = -1.*t174*t1481*t1326;
  t7346 = t2079*t174*t1700;
  t7347 = t7344 + t7346;
  t7353 = -1.*t2079*t174*t1481;
  t7356 = -1.*t174*t1326*t1700;
  t7363 = t7353 + t7356;
  t7366 = 0.340999127418*t487*t7347;
  t7368 = t4675*t7363;
  t7370 = t7366 + t7368;
  t7382 = t4365*t7347;
  t7384 = 0.340999127418*t487*t7363;
  t7386 = t7382 + t7384;
  t7393 = t1042*t7347;
  t7400 = t872*t7363;
  t7401 = t7393 + t7400;
  t7465 = -1.000000637725*t1616*t174*t570;
  t7468 = -0.930418*t409*t5960;
  t7471 = 0.366501*t409*t5971;
  t7472 = t7465 + t7468 + t7471;
  t7475 = -0.366501*t409*t1616*t174;
  t7476 = 0.340999127418*t570*t5960;
  t7478 = -0.134322983001*t570*t5971;
  t7482 = t7475 + t7476 + t7478;
  t7496 = 0.930418*t409*t1616*t174;
  t7498 = -0.8656776547239999*t570*t5960;
  t7499 = 0.340999127418*t570*t5971;
  t7500 = t7496 + t7498 + t7499;
  t7443 = 0.0846680539949003*t409;
  t7444 = -0.04500040093286238*t570;
  t7445 = t7443 + t7444;
  t7447 = -0.04186915633414423*t409;
  t7448 = -0.07877668146182712*t570;
  t7449 = 1.296332362046933e-7 + t7447 + t7448;
  t7461 = 0.016492681424499736*t409;
  t7462 = 0.03103092645718495*t570;
  t7463 = 3.2909349868922137e-7 + t7461 + t7462;
  t7531 = t1326*t7245;
  t7532 = t6928 + t7531;
  t7535 = -1.000000637725*t174*t570*t1300;
  t7536 = -0.930418*t409*t7256;
  t7537 = 0.366501*t409*t7532;
  t7542 = t7535 + t7536 + t7537;
  t7544 = -0.366501*t409*t174*t1300;
  t7545 = 0.340999127418*t570*t7256;
  t7547 = -0.134322983001*t570*t7532;
  t7549 = t7544 + t7545 + t7547;
  t7555 = 0.930418*t409*t174*t1300;
  t7559 = -0.8656776547239999*t570*t7256;
  t7560 = 0.340999127418*t570*t7532;
  t7563 = t7555 + t7559 + t7560;
  t7611 = 1.000000637725*t570*t1597;
  t7614 = -0.930418*t409*t7347;
  t7615 = 0.366501*t409*t7037;
  t7616 = t7611 + t7614 + t7615;
  t7618 = 0.366501*t409*t1597;
  t7619 = 0.340999127418*t570*t7347;
  t7620 = -0.134322983001*t570*t7037;
  t7621 = t7618 + t7619 + t7620;
  t7623 = -0.930418*t409*t1597;
  t7624 = -0.8656776547239999*t570*t7347;
  t7627 = 0.340999127418*t570*t7037;
  t7628 = t7623 + t7624 + t7627;
  t7663 = 0.04186915633414423*t4061;
  t7667 = -0.14128592423750855*t4231;
  t7670 = -1.296332362046933e-7 + t7663 + t7667;
  t7674 = 0.016492681424499736*t4061;
  t7679 = -0.055653945343889656*t4231;
  t7684 = 3.2909349868922137e-7 + t7674 + t7679;
  t7689 = -0.15185209683981668*t4061;
  t7693 = -0.04500040093286238*t4231;
  t7694 = t7689 + t7693;
  t7731 = t174*t3774*t1300;
  t7732 = t4365*t7532;
  t7733 = t7731 + t7271 + t7732;
  t7736 = t174*t3305*t1300;
  t7738 = t4675*t7256;
  t7741 = 0.340999127418*t487*t7532;
  t7742 = t7736 + t7738 + t7741;
  t7748 = t5152*t174*t1300;
  t7752 = t872*t7256;
  t7753 = t1042*t7532;
  t7754 = t7748 + t7752 + t7753;
  t7782 = -1.*t3774*t1597;
  t7783 = t4365*t7037;
  t7784 = t7782 + t7366 + t7783;
  t7787 = -1.*t3305*t1597;
  t7788 = t4675*t7347;
  t7790 = t7787 + t7788 + t7060;
  t7793 = -1.*t5152*t1597;
  t7794 = t872*t7347;
  t7795 = t1042*t7037;
  t7796 = t7793 + t7794 + t7795;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=-1.*t1174*t1300*t174 + t1471*t2046 + t2442*t2952 + t3349*t3418 + t3799*t3926 + t4258*t4475 + t4648*t4749 + t5051*t5273 - 0.045*(t4749*t4842 + t4475*t4984 + t5273*t5368) - 0.108789*(-0.340999127418*t4145*t4749 + t4254*t5273 + t4475*t5389) - 0.138152*(-0.340999127418*t4145*t4475 + t4628*t5273 + t4749*t5685);
  p_output1[10]=t1174*t1616*t174 + t1471*t5883 + t2442*t5917 + t3349*t5960 + t3799*t5971 + t4258*t6026 + t4648*t6059 + t5051*t6097 - 0.108789*(t5389*t6026 - 0.340999127418*t4145*t6059 + t4254*t6097) - 0.138152*(-0.340999127418*t4145*t6026 + t5685*t6059 + t4628*t6097) - 0.045*(t4984*t6026 + t4842*t6059 + t5368*t6097);
  p_output1[11]=0;
  p_output1[12]=-1.*t1174*t1597*t1616 + t1471*t1481*t1616*t174 + t1616*t1700*t174*t2442 + t3349*t6203 + t3799*t6214 + t4258*t6224 + t4648*t6263 + t5051*t6299 - 0.108789*(t5389*t6224 - 0.340999127418*t4145*t6263 + t4254*t6299) - 0.138152*(-0.340999127418*t4145*t6224 + t5685*t6263 + t4628*t6299) - 0.045*(t4984*t6224 + t4842*t6263 + t5368*t6299);
  p_output1[13]=-1.*t1174*t1300*t1597 + t1300*t1471*t1481*t174 + t1300*t1700*t174*t2442 + t3349*t6444 + t3799*t6456 + t4258*t6472 + t4648*t6504 + t5051*t6520 - 0.108789*(t5389*t6472 - 0.340999127418*t4145*t6504 + t4254*t6520) - 0.138152*(-0.340999127418*t4145*t6472 + t5685*t6504 + t4628*t6520) - 0.045*(t4984*t6472 + t4842*t6504 + t5368*t6520);
  p_output1[14]=-1.*t1471*t1481*t1597 - 1.*t1174*t174 - 1.*t1597*t1700*t2442 + t3349*t6647 + t3799*t6672 + t4258*t6685 + t4648*t6701 + t5051*t6721 - 0.108789*(t5389*t6685 - 0.340999127418*t4145*t6701 + t4254*t6721) - 0.138152*(-0.340999127418*t4145*t6685 + t5685*t6701 + t4628*t6721) - 0.045*(t4984*t6685 + t4842*t6701 + t5368*t6721);
  p_output1[15]=t2442*t5883 + t1471*t6787 + t3799*t6813 + t3349*t6821 + t4648*t6839 + t4258*t6852 + t5051*t6856 - 0.108789*(-0.340999127418*t4145*t6839 + t5389*t6852 + t4254*t6856) - 0.138152*(t5685*t6839 - 0.340999127418*t4145*t6852 + t4628*t6856) - 0.045*(t4842*t6839 + t4984*t6852 + t5368*t6856);
  p_output1[16]=t1471*t2952 + t2442*t6899 + t3799*t6924 + t3349*t6930 + t4648*t6946 + t4258*t6958 + t5051*t6970 - 0.108789*(-0.340999127418*t4145*t6946 + t5389*t6958 + t4254*t6970) - 0.138152*(t5685*t6946 - 0.340999127418*t4145*t6958 + t4628*t6970) - 0.045*(t4842*t6946 + t4984*t6958 + t5368*t6970);
  p_output1[17]=-1.*t1471*t1700*t174 + t1481*t174*t2442 + t3799*t7027 + t3349*t7037 + t4648*t7054 + t4258*t7064 + t5051*t7073 - 0.108789*(-0.340999127418*t4145*t7054 + t5389*t7064 + t4254*t7073) - 0.138152*(t5685*t7054 - 0.340999127418*t4145*t7064 + t4628*t7073) - 0.045*(t4842*t7054 + t4984*t7064 + t5368*t7073);
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=-0.091*t2079*t5883 - 0.091*t1326*t5917 + t3799*t5960 + t3349*t7142 + t4648*t7160 + t4258*t7165 + t5051*t7172 - 0.108789*(-0.340999127418*t4145*t7160 + t5389*t7165 + t4254*t7172) - 0.138152*(t5685*t7160 - 0.340999127418*t4145*t7165 + t4628*t7172) - 0.045*(t4842*t7160 + t4984*t7165 + t5368*t7172);
  p_output1[52]=-0.091*t2079*t6899 - 0.091*t1326*t7245 + t3799*t7256 + t3349*t7264 + t4648*t7273 + t4258*t7284 + t5051*t7304 - 0.108789*(-0.340999127418*t4145*t7273 + t5389*t7284 + t4254*t7304) - 0.138152*(t5685*t7273 - 0.340999127418*t4145*t7284 + t4628*t7304) - 0.045*(t4842*t7273 + t4984*t7284 + t5368*t7304);
  p_output1[53]=-0.091*t1326*t1700*t174 - 0.091*t1481*t174*t2079 + t3799*t7347 + t3349*t7363 + t4648*t7370 + t4258*t7386 + t5051*t7401 - 0.108789*(-0.340999127418*t4145*t7370 + t5389*t7386 + t4254*t7401) - 0.138152*(t5685*t7370 - 0.340999127418*t4145*t7386 + t4628*t7401) - 0.045*(t4842*t7370 + t4984*t7386 + t5368*t7401);
  p_output1[54]=t1616*t174*t7445 + t5960*t7449 + t5971*t7463 + t5051*t7472 + t4258*t7482 + t4648*t7500 - 0.108789*(t4254*t7472 + t5389*t7482 - 0.340999127418*t4145*t7500) - 0.045*(t5368*t7472 + t4984*t7482 + t4842*t7500) - 0.138152*(t4628*t7472 - 0.340999127418*t4145*t7482 + t5685*t7500);
  p_output1[55]=t1300*t174*t7445 + t7256*t7449 + t7463*t7532 + t5051*t7542 + t4258*t7549 + t4648*t7563 - 0.108789*(t4254*t7542 + t5389*t7549 - 0.340999127418*t4145*t7563) - 0.045*(t5368*t7542 + t4984*t7549 + t4842*t7563) - 0.138152*(t4628*t7542 - 0.340999127418*t4145*t7549 + t5685*t7563);
  p_output1[56]=-1.*t1597*t7445 + t7347*t7449 + t7037*t7463 + t5051*t7616 + t4258*t7621 + t4648*t7628 - 0.108789*(t4254*t7616 + t5389*t7621 - 0.340999127418*t4145*t7628) - 0.045*(t5368*t7616 + t4984*t7621 + t4842*t7628) - 0.138152*(t4628*t7616 - 0.340999127418*t4145*t7621 + t5685*t7628);
  p_output1[57]=-0.108789*(-0.8656776547239999*t4231*t6026 - 0.340999127418*t4231*t6059 - 0.930418*t4061*t6097) - 0.138152*(-0.340999127418*t4231*t6026 - 0.134322983001*t4231*t6059 - 0.366501*t4061*t6097) - 0.045*(0.930418*t4061*t6026 + 0.366501*t4061*t6059 - 1.000000637725*t4231*t6097) + t6026*t7670 + t6059*t7684 + t6097*t7694;
  p_output1[58]=t7670*t7733 + t7684*t7742 + t7694*t7754 - 0.108789*(-0.8656776547239999*t4231*t7733 - 0.340999127418*t4231*t7742 - 0.930418*t4061*t7754) - 0.138152*(-0.340999127418*t4231*t7733 - 0.134322983001*t4231*t7742 - 0.366501*t4061*t7754) - 0.045*(0.930418*t4061*t7733 + 0.366501*t4061*t7742 - 1.000000637725*t4231*t7754);
  p_output1[59]=t7670*t7784 + t7684*t7790 + t7694*t7796 - 0.108789*(-0.8656776547239999*t4231*t7784 - 0.340999127418*t4231*t7790 - 0.930418*t4061*t7796) - 0.138152*(-0.340999127418*t4231*t7784 - 0.134322983001*t4231*t7790 - 0.366501*t4061*t7796) - 0.045*(0.930418*t4061*t7784 + 0.366501*t4061*t7790 - 1.000000637725*t4231*t7796);
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
}



void Jp_hip_flexion_right_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
