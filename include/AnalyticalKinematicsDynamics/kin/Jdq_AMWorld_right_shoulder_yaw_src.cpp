/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:22:06 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jdq_AMWorld_right_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t124;
  double t215;
  double t227;
  double t487;
  double t31;
  double t399;
  double t613;
  double t614;
  double t615;
  double t289;
  double t299;
  double t358;
  double t504;
  double t506;
  double t510;
  double t523;
  double t704;
  double t721;
  double t750;
  double t771;
  double t773;
  double t845;
  double t872;
  double t958;
  double t961;
  double t1181;
  double t1191;
  double t1242;
  double t1282;
  double t1324;
  double t1326;
  double t1389;
  double t1701;
  double t1527;
  double t1557;
  double t1591;
  double t1596;
  double t1597;
  double t1646;
  double t1648;
  double t1683;
  double t1507;
  double t1717;
  double t1737;
  double t1771;
  double t1778;
  double t1801;
  double t1832;
  double t1879;
  double t1896;
  double t58;
  double t106;
  double t643;
  double t697;
  double t1167;
  double t1168;
  double t1430;
  double t1461;
  double t1483;
  double t2235;
  double t2286;
  double t2288;
  double t2316;
  double t2352;
  double t2354;
  double t2508;
  double t2521;
  double t2533;
  double t2551;
  double t2634;
  double t2801;
  double t2806;
  double t2809;
  double t2818;
  double t2840;
  double t2843;
  double t2850;
  double t2929;
  double t3031;
  double t3046;
  double t3054;
  double t3134;
  double t3137;
  double t3179;
  double t3196;
  double t2055;
  double t3478;
  double t3579;
  double t3553;
  double t3598;
  double t3606;
  double t3610;
  double t3619;
  double t3624;
  double t3608;
  double t3625;
  double t3632;
  double t3688;
  double t3691;
  double t3699;
  double t3483;
  double t3636;
  double t3702;
  double t3718;
  double t3768;
  double t3834;
  double t3910;
  double t3951;
  double t4031;
  double t4052;
  double t4059;
  double t4064;
  double t542;
  double t971;
  double t1400;
  double t1411;
  double t1432;
  double t1687;
  double t1922;
  double t1939;
  double t1989;
  double t2032;
  double t2033;
  double t2043;
  double t2129;
  double t2139;
  double t2167;
  double t2190;
  double t2396;
  double t2804;
  double t2855;
  double t2860;
  double t2925;
  double t3116;
  double t3198;
  double t3201;
  double t3217;
  double t3225;
  double t3269;
  double t3281;
  double t3295;
  double t3298;
  double t3350;
  double t3370;
  double t3733;
  double t3952;
  double t4072;
  double t4085;
  double t4234;
  double t4237;
  double t4253;
  double t4271;
  double t4574;
  double t4626;
  double t4641;
  double t4647;
  double t4723;
  double t4730;
  double t4736;
  double t4756;
  double t4823;
  double t4858;
  double t4903;
  double t4912;
  double t4913;
  double t4966;
  double t4979;
  double t4982;
  double t4993;
  double t4493;
  double t4500;
  double t4505;
  double t4507;
  double t4516;
  double t2207;
  double t3377;
  double t3455;
  double t5206;
  double t5237;
  double t5245;
  double t5282;
  double t5284;
  double t5305;
  double t5275;
  double t5311;
  double t5321;
  double t5330;
  double t5333;
  double t5334;
  double t5195;
  double t5322;
  double t5342;
  double t5363;
  double t5375;
  double t5390;
  double t5395;
  double t5397;
  double t5426;
  double t5476;
  double t5484;
  double t5488;
  double t4356;
  double t4383;
  double t4440;
  double t5368;
  double t5410;
  double t5492;
  double t5518;
  double t5530;
  double t5546;
  double t5560;
  double t5630;
  double t4642;
  double t4731;
  double t4828;
  double t4835;
  double t4847;
  double t4944;
  double t5002;
  double t5007;
  double t5009;
  double t5019;
  double t5048;
  double t5055;
  double t5073;
  double t5090;
  double t5103;
  double t5112;
  double t5657;
  double t5662;
  double t5669;
  double t5673;
  double t5685;
  double t5789;
  double t5813;
  double t5821;
  double t5830;
  double t5838;
  double t5841;
  double t5776;
  double t5823;
  double t5845;
  double t5847;
  double t5860;
  double t5862;
  double t5864;
  double t5866;
  double t5905;
  double t5910;
  double t5917;
  double t5935;
  double t5856;
  double t5872;
  double t5937;
  double t5940;
  double t5959;
  double t5968;
  double t6007;
  double t6015;
  double t6040;
  double t6043;
  double t6053;
  double t6054;
  double t6061;
  double t4169;
  double t4281;
  double t4282;
  double t6211;
  double t6212;
  double t6227;
  double t6256;
  double t6264;
  double t6266;
  double t4542;
  double t4555;
  double t4558;
  double t5118;
  double t5120;
  double t5128;
  double t6239;
  double t6270;
  double t6275;
  double t5525;
  double t5646;
  double t5649;
  double t6280;
  double t6283;
  double t6286;
  double t5719;
  double t5720;
  double t5724;
  double t6290;
  double t6302;
  double t6305;
  double t5733;
  double t5746;
  double t5748;
  double t5957;
  double t6016;
  double t6026;
  double t6088;
  double t6111;
  double t6133;
  double t6176;
  double t6185;
  double t6190;
  double t6424;
  double t6442;
  double t6460;
  double t6478;
  double t6483;
  double t6527;
  double t6622;
  double t6626;
  double t6628;
  double t6629;
  double t6644;
  double t6646;
  double t6647;
  double t6649;
  double t6638;
  double t6657;
  double t6662;
  double t6673;
  double t6675;
  double t6686;
  double t6695;
  double t6698;
  double t6699;
  double t6709;
  double t6747;
  double t6771;
  double t6774;
  double t6781;
  double t6788;
  double t6792;
  double t6780;
  double t6796;
  double t6814;
  double t6829;
  double t6838;
  double t6840;
  double t6842;
  double t6845;
  double t6846;
  t124 = Cos(var1[26]);
  t215 = -1.*t124;
  t227 = 1. + t215;
  t487 = Sin(var1[26]);
  t31 = Sin(var1[25]);
  t399 = 0.051978134642000004*t227;
  t613 = Cos(var1[25]);
  t614 = -1.*t613;
  t615 = 1. + t614;
  t289 = -0.9945383682050002*t227;
  t299 = 1. + t289;
  t358 = -0.994522*t299;
  t504 = -0.707107*t487;
  t506 = t399 + t504;
  t510 = 0.104528*t506;
  t523 = t358 + t510;
  t704 = -0.49726168403800003*t227;
  t721 = -0.073913*t487;
  t750 = t704 + t721;
  t771 = 0.104528*t750;
  t773 = -0.05226439969100001*t227;
  t845 = 0.703234*t487;
  t872 = t773 + t845;
  t958 = -0.994522*t872;
  t961 = t771 + t958;
  t1181 = -0.5054634410180001*t227;
  t1191 = 1. + t1181;
  t1242 = 0.104528*t1191;
  t1282 = 0.707107*t487;
  t1324 = t399 + t1282;
  t1326 = -0.994522*t1324;
  t1389 = t1242 + t1326;
  t1701 = Sin(var1[24]);
  t1527 = -0.103955395616*t615*t523;
  t1557 = 0.994522*t31;
  t1591 = 0. + t1557;
  t1596 = t1591*t961;
  t1597 = -0.9890740084840001*t615;
  t1646 = 1. + t1597;
  t1648 = t1646*t1389;
  t1683 = 0. + t1527 + t1596 + t1648;
  t1507 = Cos(var1[24]);
  t1717 = -0.010926102783999999*t615;
  t1737 = 1. + t1717;
  t1771 = t1737*t523;
  t1778 = 0.104528*t31;
  t1801 = 0. + t1778;
  t1832 = t1801*t961;
  t1879 = -0.103955395616*t615*t1389;
  t1896 = 0. + t1771 + t1832 + t1879;
  t58 = -0.104528*t31;
  t106 = 0. + t58;
  t643 = -1.0000001112680001*t615;
  t697 = 1. + t643;
  t1167 = -0.994522*t31;
  t1168 = 0. + t1167;
  t1430 = Sin(var1[4]);
  t1461 = Cos(var1[4]);
  t1483 = Cos(var1[5]);
  t2235 = -0.073913*t299;
  t2286 = -0.703234*t506;
  t2288 = -0.703234*t487;
  t2316 = t773 + t2288;
  t2352 = 0.707107*t2316;
  t2354 = t2235 + t2286 + t2352;
  t2508 = -0.500001190325*t227;
  t2521 = 1. + t2508;
  t2533 = 0.707107*t2521;
  t2551 = -0.703234*t750;
  t2634 = -0.073913*t872;
  t2801 = t2533 + t2551 + t2634;
  t2806 = -0.703234*t1191;
  t2809 = 0.073913*t487;
  t2818 = t704 + t2809;
  t2840 = 0.707107*t2818;
  t2843 = -0.073913*t1324;
  t2850 = t2806 + t2840 + t2843;
  t2929 = -0.103955395616*t615*t2354;
  t3031 = t1591*t2801;
  t3046 = t1646*t2850;
  t3054 = 0. + t2929 + t3031 + t3046;
  t3134 = t1737*t2354;
  t3137 = t1801*t2801;
  t3179 = -0.103955395616*t615*t2850;
  t3196 = 0. + t3134 + t3137 + t3179;
  t2055 = Sin(var1[5]);
  t3478 = Cos(var1[3]);
  t3579 = Sin(var1[3]);
  t3553 = t3478*t1483*t1430;
  t3598 = t3579*t2055;
  t3606 = t3553 + t3598;
  t3610 = -1.*t1483*t3579;
  t3619 = t3478*t1430*t2055;
  t3624 = t3610 + t3619;
  t3608 = -1.*t1701*t3606;
  t3625 = t1507*t3624;
  t3632 = t3608 + t3625;
  t3688 = t1507*t3606;
  t3691 = t1701*t3624;
  t3699 = t3688 + t3691;
  t3483 = t3478*t1461*t1168;
  t3636 = -0.103955395616*t615*t3632;
  t3702 = t1646*t3699;
  t3718 = t3483 + t3636 + t3702;
  t3768 = t3478*t1461*t106;
  t3834 = t1737*t3632;
  t3910 = -0.103955395616*t615*t3699;
  t3951 = t3768 + t3834 + t3910;
  t4031 = t697*t3478*t1461;
  t4052 = t1801*t3632;
  t4059 = t1591*t3699;
  t4064 = t4031 + t4052 + t4059;
  t542 = t106*t523;
  t971 = t697*t961;
  t1400 = t1168*t1389;
  t1411 = 0. + t542 + t971 + t1400;
  t1432 = -1.*t1411*t1430;
  t1687 = t1507*t1683;
  t1922 = -1.*t1701*t1896;
  t1939 = 0. + t1687 + t1922;
  t1989 = t1483*t1939;
  t2032 = t1701*t1683;
  t2033 = t1507*t1896;
  t2043 = 0. + t2032 + t2033;
  t2129 = t2043*t2055;
  t2139 = 0. + t1989 + t2129;
  t2167 = t1461*t2139;
  t2190 = 0. + t1432 + t2167;
  t2396 = t106*t2354;
  t2804 = t697*t2801;
  t2855 = t1168*t2850;
  t2860 = 0. + t2396 + t2804 + t2855;
  t2925 = -1.*t2860*t1430;
  t3116 = t1507*t3054;
  t3198 = -1.*t1701*t3196;
  t3201 = 0. + t3116 + t3198;
  t3217 = t1483*t3201;
  t3225 = t1701*t3054;
  t3269 = t1507*t3196;
  t3281 = 0. + t3225 + t3269;
  t3295 = t3281*t2055;
  t3298 = 0. + t3217 + t3295;
  t3350 = t1461*t3298;
  t3370 = 0. + t2925 + t3350;
  t3733 = t1191*t3718;
  t3952 = t506*t3951;
  t4072 = t750*t4064;
  t4085 = t3733 + t3952 + t4072;
  t4234 = t1324*t3718;
  t4237 = t299*t3951;
  t4253 = t872*t4064;
  t4271 = t4234 + t4237 + t4253;
  t4574 = 0.073913*t299;
  t4626 = 0.703234*t506;
  t4641 = t4574 + t4626 + t2352;
  t4647 = 0.703234*t750;
  t4723 = 0.073913*t872;
  t4730 = t2533 + t4647 + t4723;
  t4736 = 0.703234*t1191;
  t4756 = 0.073913*t1324;
  t4823 = t4736 + t2840 + t4756;
  t4858 = -0.103955395616*t615*t4641;
  t4903 = t1591*t4730;
  t4912 = t1646*t4823;
  t4913 = 0. + t4858 + t4903 + t4912;
  t4966 = t1737*t4641;
  t4979 = t1801*t4730;
  t4982 = -0.103955395616*t615*t4823;
  t4993 = 0. + t4966 + t4979 + t4982;
  t4493 = t2818*t3718;
  t4500 = t2316*t3951;
  t4505 = t2521*t4064;
  t4507 = t4493 + t4500 + t4505;
  t4516 = 0.707107*t4507;
  t2207 = 0.007*t2190;
  t3377 = -0.00002*t3370;
  t3455 = t2207 + t3377;
  t5206 = t1483*t3579*t1430;
  t5237 = -1.*t3478*t2055;
  t5245 = t5206 + t5237;
  t5282 = t3478*t1483;
  t5284 = t3579*t1430*t2055;
  t5305 = t5282 + t5284;
  t5275 = -1.*t1701*t5245;
  t5311 = t1507*t5305;
  t5321 = t5275 + t5311;
  t5330 = t1507*t5245;
  t5333 = t1701*t5305;
  t5334 = t5330 + t5333;
  t5195 = t1461*t1168*t3579;
  t5322 = -0.103955395616*t615*t5321;
  t5342 = t1646*t5334;
  t5363 = t5195 + t5322 + t5342;
  t5375 = t1461*t106*t3579;
  t5390 = t1737*t5321;
  t5395 = -0.103955395616*t615*t5334;
  t5397 = t5375 + t5390 + t5395;
  t5426 = t697*t1461*t3579;
  t5476 = t1801*t5321;
  t5484 = t1591*t5334;
  t5488 = t5426 + t5476 + t5484;
  t4356 = -0.00002*t2190;
  t4383 = 0.00067*t3370;
  t4440 = t4356 + t4383;
  t5368 = t1191*t5363;
  t5410 = t506*t5397;
  t5492 = t750*t5488;
  t5518 = t5368 + t5410 + t5492;
  t5530 = t1324*t5363;
  t5546 = t299*t5397;
  t5560 = t872*t5488;
  t5630 = t5530 + t5546 + t5560;
  t4642 = t106*t4641;
  t4731 = t697*t4730;
  t4828 = t1168*t4823;
  t4835 = 0. + t4642 + t4731 + t4828;
  t4847 = -1.*t4835*t1430;
  t4944 = t1507*t4913;
  t5002 = -1.*t1701*t4993;
  t5007 = 0. + t4944 + t5002;
  t5009 = t1483*t5007;
  t5019 = t1701*t4913;
  t5048 = t1507*t4993;
  t5055 = 0. + t5019 + t5048;
  t5073 = t5055*t2055;
  t5090 = 0. + t5009 + t5073;
  t5103 = t1461*t5090;
  t5112 = 0. + t4847 + t5103;
  t5657 = t2818*t5363;
  t5662 = t2316*t5397;
  t5669 = t2521*t5488;
  t5673 = t5657 + t5662 + t5669;
  t5685 = 0.707107*t5673;
  t5789 = -1.*t1461*t1483*t1701;
  t5813 = t1507*t1461*t2055;
  t5821 = t5789 + t5813;
  t5830 = t1507*t1461*t1483;
  t5838 = t1461*t1701*t2055;
  t5841 = t5830 + t5838;
  t5776 = -1.*t1168*t1430;
  t5823 = -0.103955395616*t615*t5821;
  t5845 = t1646*t5841;
  t5847 = t5776 + t5823 + t5845;
  t5860 = -1.*t106*t1430;
  t5862 = t1737*t5821;
  t5864 = -0.103955395616*t615*t5841;
  t5866 = t5860 + t5862 + t5864;
  t5905 = -1.*t697*t1430;
  t5910 = t1801*t5821;
  t5917 = t1591*t5841;
  t5935 = t5905 + t5910 + t5917;
  t5856 = t1191*t5847;
  t5872 = t506*t5866;
  t5937 = t750*t5935;
  t5940 = t5856 + t5872 + t5937;
  t5959 = t1324*t5847;
  t5968 = t299*t5866;
  t6007 = t872*t5935;
  t6015 = t5959 + t5968 + t6007;
  t6040 = t2818*t5847;
  t6043 = t2316*t5866;
  t6053 = t2521*t5935;
  t6054 = t6040 + t6043 + t6053;
  t6061 = 0.707107*t6054;
  t4169 = 0.104528*t4085;
  t4281 = -0.994522*t4271;
  t4282 = t4169 + t4281;
  t6211 = t1483*t2043;
  t6212 = -1.*t1939*t2055;
  t6227 = 0. + t6211 + t6212;
  t6256 = t1483*t3281;
  t6264 = -1.*t3201*t2055;
  t6266 = 0. + t6256 + t6264;
  t4542 = -0.703234*t4085;
  t4555 = -0.073913*t4271;
  t4558 = t4516 + t4542 + t4555;
  t5118 = 0.703234*t4085;
  t5120 = 0.073913*t4271;
  t5128 = t4516 + t5118 + t5120;
  t6239 = 0.007*t6227;
  t6270 = -0.00002*t6266;
  t6275 = t6239 + t6270;
  t5525 = 0.104528*t5518;
  t5646 = -0.994522*t5630;
  t5649 = t5525 + t5646;
  t6280 = -0.00002*t6227;
  t6283 = 0.00067*t6266;
  t6286 = t6280 + t6283;
  t5719 = -0.703234*t5518;
  t5720 = -0.073913*t5630;
  t5724 = t5685 + t5719 + t5720;
  t6290 = t1483*t5055;
  t6302 = -1.*t5007*t2055;
  t6305 = 0. + t6290 + t6302;
  t5733 = 0.703234*t5518;
  t5746 = 0.073913*t5630;
  t5748 = t5685 + t5733 + t5746;
  t5957 = 0.104528*t5940;
  t6016 = -0.994522*t6015;
  t6026 = t5957 + t6016;
  t6088 = -0.703234*t5940;
  t6111 = -0.073913*t6015;
  t6133 = t6061 + t6088 + t6111;
  t6176 = 0.703234*t5940;
  t6185 = 0.073913*t6015;
  t6190 = t6061 + t6176 + t6185;
  t6424 = 0.007*t1411;
  t6442 = -0.00002*t2860;
  t6460 = t6424 + t6442;
  t6478 = -0.00002*t1411;
  t6483 = 0.00067*t2860;
  t6527 = t6478 + t6483;
  t6622 = -1.*t106*t523;
  t6626 = -1.*t697*t961;
  t6628 = -1.*t1168*t1389;
  t6629 = 0. + t6622 + t6626 + t6628;
  t6644 = -1.*t106*t2354;
  t6646 = -1.*t697*t2801;
  t6647 = -1.*t1168*t2850;
  t6649 = 0. + t6644 + t6646 + t6647;
  t6638 = 0.007*t6629;
  t6657 = -0.00002*t6649;
  t6662 = t6638 + t6657;
  t6673 = -0.00002*t6629;
  t6675 = 0.00067*t6649;
  t6686 = t6673 + t6675;
  t6695 = -1.*t106*t4641;
  t6698 = -1.*t697*t4730;
  t6699 = -1.*t1168*t4823;
  t6709 = 0. + t6695 + t6698 + t6699;
  t6747 = -0.994522*t523;
  t6771 = 0.104528*t1389;
  t6774 = 0. + t6747 + t6771;
  t6781 = -0.994522*t2354;
  t6788 = 0.104528*t2850;
  t6792 = 0. + t6781 + t6788;
  t6780 = 0.007*t6774;
  t6796 = -0.00002*t6792;
  t6814 = t6780 + t6796;
  t6829 = -0.00002*t6774;
  t6838 = 0.00067*t6792;
  t6840 = t6829 + t6838;
  t6842 = -0.994522*t4641;
  t6845 = 0.104528*t4823;
  t6846 = 0. + t6842 + t6845;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=t3455*t4282 + t4440*t4558 + 0.00697*t5112*t5128;
  p_output1[10]=t3455*t5649 + t4440*t5724 + 0.00697*t5112*t5748;
  p_output1[11]=t3455*t6026 + t4440*t6133 + 0.00697*t5112*t6190;
  p_output1[12]=t4282*t6275 + t4558*t6286 + 0.00697*t5128*t6305;
  p_output1[13]=t5649*t6275 + t5724*t6286 + 0.00697*t5748*t6305;
  p_output1[14]=t6026*t6275 + t6133*t6286 + 0.00697*t6190*t6305;
  p_output1[15]=0.00697*t4835*t5128 + t4282*t6460 + t4558*t6527;
  p_output1[16]=0.00697*t4835*t5748 + t5649*t6460 + t5724*t6527;
  p_output1[17]=0.00697*t4835*t6190 + t6026*t6460 + t6133*t6527;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=t4282*t6662 + t4558*t6686 + 0.00697*t5128*t6709;
  p_output1[73]=t5649*t6662 + t5724*t6686 + 0.00697*t5748*t6709;
  p_output1[74]=t6026*t6662 + t6133*t6686 + 0.00697*t6190*t6709;
  p_output1[75]=t4282*t6814 + t4558*t6840 + 0.00697*t5128*t6846;
  p_output1[76]=t5649*t6814 + t5724*t6840 + 0.00697*t5748*t6846;
  p_output1[77]=t6026*t6814 + t6133*t6840 + 0.00697*t6190*t6846;
  p_output1[78]=-0.000019996802757479972*t4282 + 0.0006700009956279001*t4558 - 6.139705719830357e-9*t5128;
  p_output1[79]=-0.000019996802757479972*t5649 + 0.0006700009956279001*t5724 - 6.139705719830357e-9*t5748;
  p_output1[80]=-0.000019996802757479972*t6026 + 0.0006700009956279001*t6133 - 6.139705719830357e-9*t6190;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
}



void Jdq_AMWorld_right_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
