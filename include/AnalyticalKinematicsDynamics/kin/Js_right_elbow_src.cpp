/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:22:19 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Js_right_elbow_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t73;
  double t88;
  double t178;
  double t183;
  double t313;
  double t319;
  double t316;
  double t326;
  double t340;
  double t349;
  double t353;
  double t364;
  double t639;
  double t628;
  double t693;
  double t702;
  double t415;
  double t428;
  double t434;
  double t438;
  double t439;
  double t444;
  double t716;
  double t719;
  double t724;
  double t746;
  double t753;
  double t754;
  double t840;
  double t846;
  double t850;
  double t689;
  double t736;
  double t755;
  double t756;
  double t757;
  double t758;
  double t800;
  double t899;
  double t920;
  double t924;
  double t632;
  double t641;
  double t644;
  double t825;
  double t832;
  double t837;
  double t29;
  double t867;
  double t888;
  double t890;
  double t1033;
  double t1035;
  double t1040;
  double t1011;
  double t1012;
  double t1020;
  double t656;
  double t659;
  double t662;
  double t1240;
  double t1247;
  double t1260;
  double t1293;
  double t1211;
  double t1213;
  double t1225;
  double t1444;
  double t1445;
  double t1447;
  double t1407;
  double t1529;
  double t1532;
  double t1544;
  double t1553;
  double t1475;
  double t1479;
  double t1420;
  double t1431;
  double t1457;
  double t1460;
  double t1578;
  double t1581;
  double t1583;
  double t1588;
  double t1602;
  double t1603;
  double t1621;
  double t1622;
  double t1635;
  double t1637;
  double t1643;
  double t1645;
  double t1592;
  double t1623;
  double t1647;
  double t1653;
  double t1488;
  double t1494;
  double t1685;
  double t1686;
  double t1688;
  double t1697;
  double t1518;
  double t1519;
  double t1655;
  double t1663;
  double t1665;
  double t1667;
  double t1744;
  double t1746;
  double t1752;
  double t1754;
  double t1819;
  double t1821;
  double t1827;
  double t1834;
  double t1434;
  double t1455;
  double t1466;
  double t1467;
  double t1669;
  double t1672;
  double t1673;
  double t1680;
  double t1881;
  double t1889;
  double t1892;
  double t1893;
  double t1487;
  double t1500;
  double t1504;
  double t1508;
  double t1756;
  double t1758;
  double t1759;
  double t1773;
  double t1902;
  double t1922;
  double t1923;
  double t1927;
  double t1795;
  double t1800;
  double t1805;
  double t1807;
  double t1522;
  double t1535;
  double t1554;
  double t1556;
  double t2037;
  double t2038;
  double t2043;
  double t2048;
  double t2062;
  double t2065;
  double t2068;
  double t2072;
  double t2171;
  double t2173;
  double t2180;
  double t2186;
  double t2183;
  double t2289;
  double t2224;
  double t2266;
  double t2269;
  double t2296;
  double t2299;
  double t2306;
  double t2310;
  double t2383;
  double t2449;
  double t2334;
  double t2499;
  double t2225;
  double t2466;
  double t2192;
  double t2446;
  double t2447;
  double t2453;
  double t2455;
  double t2467;
  double t2470;
  double t2487;
  double t2494;
  double t2498;
  double t2528;
  double t2532;
  double t2537;
  double t2540;
  double t2551;
  double t2555;
  double t2562;
  double t2566;
  double t2568;
  double t2569;
  double t2572;
  double t2574;
  double t2350;
  double t2358;
  double t2371;
  double t2402;
  double t2491;
  double t2552;
  double t2575;
  double t2581;
  double t2602;
  double t2619;
  double t2620;
  double t2635;
  double t2214;
  double t2236;
  double t2251;
  double t2253;
  double t2637;
  double t2638;
  double t2651;
  double t2652;
  double t2713;
  double t2724;
  double t2729;
  double t2743;
  double t2432;
  double t2435;
  double t2439;
  double t2442;
  double t2272;
  double t2300;
  double t2321;
  double t2332;
  double t2680;
  double t2697;
  double t2705;
  double t2706;
  double t2816;
  double t2820;
  double t2823;
  double t2824;
  double t2828;
  double t2830;
  double t2831;
  double t2833;
  double t2351;
  double t2379;
  double t2403;
  double t2412;
  double t2901;
  double t2907;
  double t2908;
  double t2919;
  double t2944;
  double t2951;
  double t2954;
  double t2957;
  t73 = Cos(var1[3]);
  t88 = Sin(var1[3]);
  t178 = Cos(var1[4]);
  t183 = Sin(var1[4]);
  t313 = Cos(var1[5]);
  t319 = Sin(var1[5]);
  t316 = t73*t313*t183;
  t326 = t88*t319;
  t340 = t316 + t326;
  t349 = -1.*t313*t88;
  t353 = t73*t183*t319;
  t364 = t349 + t353;
  t639 = Cos(var1[24]);
  t628 = Sin(var1[24]);
  t693 = -1.*t639;
  t702 = 1. + t693;
  t415 = t313*t88*t183;
  t428 = -1.*t73*t319;
  t434 = t415 + t428;
  t438 = t73*t313;
  t439 = t88*t183*t319;
  t444 = t438 + t439;
  t716 = 0.4*t702;
  t719 = -0.12*t628;
  t724 = 0. + t716 + t719;
  t746 = -0.12*t702;
  t753 = -0.4*t628;
  t754 = 0. + t746 + t753;
  t840 = t724*t434;
  t846 = t754*t444;
  t850 = 0. + var1[1] + t840 + t846;
  t689 = -1.*var1[2];
  t736 = -1.*t178*t313*t724;
  t755 = -1.*t178*t754*t319;
  t756 = 0. + t689 + t736 + t755;
  t757 = -1.*t628*t434;
  t758 = t639*t444;
  t800 = t757 + t758;
  t899 = t639*t434;
  t920 = t628*t444;
  t924 = t899 + t920;
  t632 = -1.*t628*t340;
  t641 = t639*t364;
  t644 = t632 + t641;
  t825 = -1.*t178*t313*t628;
  t832 = t639*t178*t319;
  t837 = t825 + t832;
  t29 = -1.*var1[0];
  t867 = t639*t178*t313;
  t888 = t178*t628*t319;
  t890 = t867 + t888;
  t1033 = -1.*t724*t340;
  t1035 = -1.*t754*t364;
  t1040 = 0. + t29 + t1033 + t1035;
  t1011 = t178*t313*t724;
  t1012 = t178*t754*t319;
  t1020 = 0. + var1[2] + t1011 + t1012;
  t656 = t639*t340;
  t659 = t628*t364;
  t662 = t656 + t659;
  t1240 = -1.*var1[1];
  t1247 = -1.*t724*t434;
  t1260 = -1.*t754*t444;
  t1293 = 0. + t1240 + t1247 + t1260;
  t1211 = t724*t340;
  t1213 = t754*t364;
  t1225 = 0. + var1[0] + t1211 + t1213;
  t1444 = Cos(var1[25]);
  t1445 = -1.*t1444;
  t1447 = 1. + t1445;
  t1407 = Sin(var1[25]);
  t1529 = 0.104528*t1407;
  t1532 = 0. + t1529;
  t1544 = 0.994522*t1407;
  t1553 = 0. + t1544;
  t1475 = -0.104528*t1407;
  t1479 = 0. + t1475;
  t1420 = -0.994522*t1407;
  t1431 = 0. + t1420;
  t1457 = -0.9890740084840001*t1447;
  t1460 = 1. + t1457;
  t1578 = -0.056500534356700764*t1447;
  t1581 = 0.040271188976*t1532;
  t1583 = 0.38315650737400003*t1553;
  t1588 = 0. + t1578 + t1581 + t1583;
  t1602 = 1.1345904784751044e-7*var1[25];
  t1603 = 0.04027119345689465*t1447;
  t1621 = -0.05650052807*t1479;
  t1622 = t1602 + t1603 + t1621;
  t1635 = -1.1924972351948546e-8*var1[25];
  t1637 = 0.38315655000705834*t1447;
  t1643 = -0.05650052807*t1431;
  t1645 = t1635 + t1637 + t1643;
  t1592 = t1588*t183;
  t1623 = -1.*t1622*t837;
  t1647 = -1.*t1645*t890;
  t1653 = 0. + t689 + t736 + t1592 + t755 + t1623 + t1647;
  t1488 = -0.010926102783999999*t1447;
  t1494 = 1. + t1488;
  t1685 = t178*t1588*t88;
  t1686 = t1622*t800;
  t1688 = t1645*t924;
  t1697 = 0. + var1[1] + t1685 + t840 + t846 + t1686 + t1688;
  t1518 = -1.0000001112680001*t1447;
  t1519 = 1. + t1518;
  t1655 = t178*t1431*t88;
  t1663 = -0.103955395616*t1447*t800;
  t1665 = t1460*t924;
  t1667 = t1655 + t1663 + t1665;
  t1744 = t178*t1479*t88;
  t1746 = t1494*t800;
  t1752 = -0.103955395616*t1447*t924;
  t1754 = t1744 + t1746 + t1752;
  t1819 = t1519*t178*t88;
  t1821 = t1532*t800;
  t1827 = t1553*t924;
  t1834 = t1819 + t1821 + t1827;
  t1434 = t73*t178*t1431;
  t1455 = -0.103955395616*t1447*t644;
  t1466 = t1460*t662;
  t1467 = t1434 + t1455 + t1466;
  t1669 = -1.*t1431*t183;
  t1672 = -0.103955395616*t1447*t837;
  t1673 = t1460*t890;
  t1680 = t1669 + t1672 + t1673;
  t1881 = -1.*t1588*t183;
  t1889 = t1622*t837;
  t1892 = t1645*t890;
  t1893 = 0. + var1[2] + t1011 + t1881 + t1012 + t1889 + t1892;
  t1487 = t73*t178*t1479;
  t1500 = t1494*t644;
  t1504 = -0.103955395616*t1447*t662;
  t1508 = t1487 + t1500 + t1504;
  t1756 = -1.*t1479*t183;
  t1758 = t1494*t837;
  t1759 = -0.103955395616*t1447*t890;
  t1773 = t1756 + t1758 + t1759;
  t1902 = -1.*t73*t178*t1588;
  t1922 = -1.*t1622*t644;
  t1923 = -1.*t1645*t662;
  t1927 = 0. + t29 + t1902 + t1033 + t1035 + t1922 + t1923;
  t1795 = -1.*t1519*t183;
  t1800 = t1532*t837;
  t1805 = t1553*t890;
  t1807 = t1795 + t1800 + t1805;
  t1522 = t1519*t73*t178;
  t1535 = t1532*t644;
  t1554 = t1553*t662;
  t1556 = t1522 + t1535 + t1554;
  t2037 = t73*t178*t1588;
  t2038 = t1622*t644;
  t2043 = t1645*t662;
  t2048 = 0. + var1[0] + t2037 + t1211 + t1213 + t2038 + t2043;
  t2062 = -1.*t178*t1588*t88;
  t2065 = -1.*t1622*t800;
  t2068 = -1.*t1645*t924;
  t2072 = 0. + t1240 + t2062 + t1247 + t1260 + t2065 + t2068;
  t2171 = Cos(var1[26]);
  t2173 = -1.*t2171;
  t2180 = 1. + t2173;
  t2186 = Sin(var1[26]);
  t2183 = -0.49726168403800003*t2180;
  t2289 = 0.051978134642000004*t2180;
  t2224 = -0.05226439969100001*t2180;
  t2266 = -0.5054634410180001*t2180;
  t2269 = 1. + t2266;
  t2296 = -0.707107*t2186;
  t2299 = t2289 + t2296;
  t2306 = -0.073913*t2186;
  t2310 = t2183 + t2306;
  t2383 = 0.703234*t2186;
  t2449 = -0.051978134642000004*t2180;
  t2334 = 0.707107*t2186;
  t2499 = 0.05226439969100001*t2180;
  t2225 = -0.703234*t2186;
  t2466 = 0.49726168403800003*t2180;
  t2192 = 0.073913*t2186;
  t2446 = 1.5601527583902087e-7*var1[26];
  t2447 = 0.09582494577057615*t2180;
  t2453 = t2449 + t2296;
  t2455 = -0.231098203479*t2453;
  t2467 = t2466 + t2306;
  t2470 = 0.164383620275*t2467;
  t2487 = t2446 + t2447 + t2455 + t2470;
  t2494 = 1.639789470231751e-8*var1[26];
  t2498 = -0.22983603018311177*t2180;
  t2528 = t2499 + t2383;
  t2532 = 0.164383620275*t2528;
  t2537 = t2449 + t2334;
  t2540 = 0.18957839082800002*t2537;
  t2551 = t2494 + t2498 + t2532 + t2540;
  t2555 = -1.568745163810375e-7*var1[26];
  t2562 = 0.08219200580743281*t2180;
  t2566 = t2499 + t2225;
  t2568 = -0.231098203479*t2566;
  t2569 = t2466 + t2192;
  t2572 = 0.18957839082800002*t2569;
  t2574 = t2555 + t2562 + t2568 + t2572;
  t2350 = t2289 + t2334;
  t2358 = -0.9945383682050002*t2180;
  t2371 = 1. + t2358;
  t2402 = t2224 + t2383;
  t2491 = t2487*t1667;
  t2552 = t2551*t1754;
  t2575 = t2574*t1834;
  t2581 = 0. + var1[1] + t1685 + t840 + t846 + t1686 + t1688 + t2491 + t2552 + t2575;
  t2602 = -1.*t2487*t1680;
  t2619 = -1.*t2551*t1773;
  t2620 = -1.*t2574*t1807;
  t2635 = 0. + t689 + t736 + t1592 + t755 + t1623 + t1647 + t2602 + t2619 + t2620;
  t2214 = t2183 + t2192;
  t2236 = t2224 + t2225;
  t2251 = -0.500001190325*t2180;
  t2253 = 1. + t2251;
  t2637 = t2269*t1667;
  t2638 = t2299*t1754;
  t2651 = t2310*t1834;
  t2652 = t2637 + t2638 + t2651;
  t2713 = t2350*t1667;
  t2724 = t2371*t1754;
  t2729 = t2402*t1834;
  t2743 = t2713 + t2724 + t2729;
  t2432 = t2269*t1680;
  t2435 = t2299*t1773;
  t2439 = t2310*t1807;
  t2442 = t2432 + t2435 + t2439;
  t2272 = t2269*t1467;
  t2300 = t2299*t1508;
  t2321 = t2310*t1556;
  t2332 = t2272 + t2300 + t2321;
  t2680 = t2350*t1680;
  t2697 = t2371*t1773;
  t2705 = t2402*t1807;
  t2706 = t2680 + t2697 + t2705;
  t2816 = -1.*t2487*t1467;
  t2820 = -1.*t2551*t1508;
  t2823 = -1.*t2574*t1556;
  t2824 = 0. + t29 + t1902 + t1033 + t1035 + t1922 + t1923 + t2816 + t2820 + t2823;
  t2828 = t2487*t1680;
  t2830 = t2551*t1773;
  t2831 = t2574*t1807;
  t2833 = 0. + var1[2] + t1011 + t1881 + t1012 + t1889 + t1892 + t2828 + t2830 + t2831;
  t2351 = t2350*t1467;
  t2379 = t2371*t1508;
  t2403 = t2402*t1556;
  t2412 = t2351 + t2379 + t2403;
  t2901 = -1.*t2487*t1667;
  t2907 = -1.*t2551*t1754;
  t2908 = -1.*t2574*t1834;
  t2919 = 0. + t1240 + t2062 + t1247 + t1260 + t2065 + t2068 + t2901 + t2907 + t2908;
  t2944 = t2487*t1467;
  t2951 = t2551*t1508;
  t2954 = t2574*t1556;
  t2957 = 0. + var1[0] + t2037 + t1211 + t1213 + t2038 + t2043 + t2944 + t2951 + t2954;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=1.;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=1.;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=var1[1];
  p_output1[19]=t29;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=-1.*t73*var1[2];
  p_output1[25]=-1.*t88*var1[2];
  p_output1[26]=t73*var1[0] + t88*var1[1];
  p_output1[27]=-1.*t88;
  p_output1[28]=t73;
  p_output1[29]=0;
  p_output1[30]=-1.*t183*var1[1] - 1.*t178*t88*var1[2];
  p_output1[31]=t183*var1[0] + t178*t73*var1[2];
  p_output1[32]=t178*t88*var1[0] - 1.*t178*t73*var1[1];
  p_output1[33]=t178*t73;
  p_output1[34]=t178*t88;
  p_output1[35]=-1.*t183;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=-0.12*t340 - 0.4*t364 + t183*var1[1] + t178*t88*var1[2];
  p_output1[145]=-0.12*t434 - 0.4*t444 - 1.*t183*var1[0] - 1.*t178*t73*var1[2];
  p_output1[146]=-0.12*t178*t313 - 0.4*t178*t319 - 1.*t178*t88*var1[0] + t178*t73*var1[1];
  p_output1[147]=0. - 1.*t178*t73;
  p_output1[148]=0. - 1.*t178*t88;
  p_output1[149]=0. + t183;
  p_output1[150]=0.005906*t644 + 0.056191*t662 + 0.385267*t178*t73 - 0.994522*(t756*t800 + t837*t850) + 0.104528*(t850*t890 + t756*t924);
  p_output1[151]=0.005906*t800 - 0.994522*(t1020*t644 + t1040*t837) + 0.385267*t178*t88 + 0.104528*(t1020*t662 + t1040*t890) + 0.056191*t924;
  p_output1[152]=-0.385267*t183 - 0.994522*(t1293*t644 + t1225*t800) + 0.005906*t837 + 0.056191*t890 + 0.104528*(t1293*t662 + t1225*t924);
  p_output1[153]=0. - 0.994522*t644 + 0.104528*t662;
  p_output1[154]=0. - 0.994522*t800 + 0.104528*t924;
  p_output1[155]=0. - 0.994522*t837 + 0.104528*t890;
  p_output1[156]=0.151261*t1467 + 0.249652*t1508 + 0.176528*t1556 - 0.703234*(t1653*t1667 + t1680*t1697) - 0.073913*(t1653*t1754 + t1697*t1773) + 0.707107*(t1697*t1807 + t1653*t1834);
  p_output1[157]=0.151261*t1667 + 0.249652*t1754 + 0.176528*t1834 - 0.703234*(t1467*t1893 + t1680*t1927) - 0.073913*(t1508*t1893 + t1773*t1927) + 0.707107*(t1556*t1893 + t1807*t1927);
  p_output1[158]=0.151261*t1680 + 0.249652*t1773 + 0.176528*t1807 - 0.703234*(t1667*t2048 + t1467*t2072) - 0.073913*(t1754*t2048 + t1508*t2072) + 0.707107*(t1834*t2048 + t1556*t2072);
  p_output1[159]=0. - 0.703234*t1467 - 0.073913*t1508 + 0.707107*t1556;
  p_output1[160]=0. - 0.703234*t1667 - 0.073913*t1754 + 0.707107*t1834;
  p_output1[161]=0. - 0.703234*t1680 - 0.073913*t1773 + 0.707107*t1807;
  p_output1[162]=0.137779*(t1467*t2214 + t1508*t2236 + t1556*t2253) - 0.189941*t2332 - 0.019964*t2412 + 0.104528*(t2442*t2581 + t2635*t2652) - 0.994522*(t2581*t2706 + t2635*t2743);
  p_output1[163]=0.137779*(t1667*t2214 + t1754*t2236 + t1834*t2253) - 0.189941*t2652 - 0.019964*t2743 + 0.104528*(t2442*t2824 + t2332*t2833) - 0.994522*(t2706*t2824 + t2412*t2833);
  p_output1[164]=0.137779*(t1680*t2214 + t1773*t2236 + t1807*t2253) - 0.189941*t2442 - 0.019964*t2706 + 0.104528*(t2332*t2919 + t2652*t2957) - 0.994522*(t2412*t2919 + t2743*t2957);
  p_output1[165]=0. + 0.104528*t2332 - 0.994522*t2412;
  p_output1[166]=0. + 0.104528*t2652 - 0.994522*t2743;
  p_output1[167]=0. + 0.104528*t2442 - 0.994522*t2706;
}



void Js_right_elbow_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
