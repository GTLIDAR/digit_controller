/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:21:40 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dT_right_shoulder_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t17;
  double t1052;
  double t436;
  double t525;
  double t1045;
  double t1159;
  double t1063;
  double t1105;
  double t1230;
  double t105;
  double t318;
  double t1111;
  double t1235;
  double t1251;
  double t1446;
  double t1475;
  double t1487;
  double t2019;
  double t1606;
  double t1614;
  double t2003;
  double t2033;
  double t2041;
  double t2055;
  double t2056;
  double t2058;
  double t1291;
  double t1428;
  double t2051;
  double t2060;
  double t2065;
  double t2144;
  double t2158;
  double t2163;
  double t1851;
  double t1857;
  double t1765;
  double t1777;
  double t2358;
  double t2367;
  double t2395;
  double t2355;
  double t2397;
  double t2405;
  double t2426;
  double t2430;
  double t2445;
  double t2721;
  double t2722;
  double t293;
  double t298;
  double t3002;
  double t3004;
  double t3005;
  double t3010;
  double t3049;
  double t3050;
  double t1540;
  double t1553;
  double t3008;
  double t3051;
  double t3053;
  double t3075;
  double t3088;
  double t3103;
  double t1657;
  double t1680;
  double t3346;
  double t3365;
  double t3369;
  double t3392;
  double t3394;
  double t3398;
  double t2410;
  double t3726;
  double t3735;
  double t3750;
  double t3756;
  double t3758;
  double t3762;
  double t3775;
  double t3778;
  double t3841;
  double t3847;
  double t3852;
  double t3833;
  double t3860;
  double t3874;
  double t3882;
  double t3890;
  double t3903;
  double t4001;
  double t4009;
  double t4129;
  double t4132;
  double t4149;
  double t4162;
  double t4176;
  double t4214;
  double t4356;
  double t4359;
  double t4372;
  double t4380;
  double t4394;
  double t4434;
  double t4835;
  double t4837;
  double t4838;
  double t4845;
  double t4847;
  double t4849;
  double t382;
  double t1283;
  double t1496;
  double t1505;
  double t1594;
  double t1615;
  double t1618;
  double t1622;
  double t1718;
  double t1791;
  double t1891;
  double t1968;
  double t1970;
  double t2119;
  double t2215;
  double t2253;
  double t2275;
  double t2287;
  double t2298;
  double t2316;
  double t2324;
  double t2329;
  double t2346;
  double t2490;
  double t2502;
  double t2535;
  double t2537;
  double t2559;
  double t2602;
  double t2615;
  double t2616;
  double t2623;
  double t2655;
  double t2674;
  double t2737;
  double t2738;
  double t2792;
  double t2833;
  double t2836;
  double t2853;
  double t2856;
  double t2858;
  double t2873;
  double t2888;
  double t2899;
  double t2999;
  double t3070;
  double t3119;
  double t3126;
  double t3150;
  double t3167;
  double t3178;
  double t3195;
  double t3205;
  double t3208;
  double t3216;
  double t3222;
  double t3263;
  double t3342;
  double t3387;
  double t3404;
  double t3411;
  double t3416;
  double t3430;
  double t3432;
  double t3433;
  double t3438;
  double t3458;
  double t3465;
  double t3470;
  double t3472;
  double t3521;
  double t3535;
  double t3548;
  double t3555;
  double t3556;
  double t3596;
  double t3606;
  double t3639;
  double t3668;
  double t3695;
  double t3703;
  double t3707;
  double t3761;
  double t3782;
  double t3785;
  double t3799;
  double t3805;
  double t3806;
  double t3811;
  double t3812;
  double t3815;
  double t3816;
  double t3879;
  double t3905;
  double t3907;
  double t3916;
  double t3926;
  double t3928;
  double t3963;
  double t3967;
  double t3971;
  double t3975;
  double t3996;
  double t3998;
  double t4012;
  double t4013;
  double t4015;
  double t4018;
  double t4020;
  double t4029;
  double t4030;
  double t4040;
  double t4044;
  double t4049;
  double t4063;
  double t4159;
  double t4224;
  double t4233;
  double t4258;
  double t4261;
  double t4262;
  double t4293;
  double t4302;
  double t4305;
  double t4330;
  double t4374;
  double t4438;
  double t4462;
  double t4494;
  double t4516;
  double t4520;
  double t4547;
  double t4548;
  double t4552;
  double t4557;
  double t4615;
  double t4617;
  double t4623;
  double t4628;
  double t4672;
  double t4674;
  double t4677;
  double t4682;
  double t4702;
  double t4751;
  double t4766;
  double t4802;
  double t4814;
  double t4831;
  double t4842;
  double t4865;
  double t4868;
  double t4887;
  double t4889;
  double t4892;
  double t4898;
  double t4910;
  double t4924;
  double t4929;
  double t4932;
  double t4943;
  double t6033;
  double t6040;
  double t6100;
  double t6102;
  double t6107;
  double t6042;
  double t6049;
  double t6054;
  double t6138;
  double t6139;
  double t6148;
  double t6151;
  double t6110;
  double t6113;
  double t6118;
  double t6120;
  double t6074;
  double t6076;
  double t6082;
  double t6092;
  double t6235;
  double t6237;
  double t6242;
  double t6246;
  double t6249;
  double t6286;
  double t6288;
  double t6293;
  double t6301;
  double t6306;
  double t6307;
  double t6318;
  double t6322;
  double t6328;
  t17 = Cos(var1[3]);
  t1052 = Cos(var1[4]);
  t436 = Cos(var1[25]);
  t525 = -1.*t436;
  t1045 = 1. + t525;
  t1159 = Cos(var1[24]);
  t1063 = Cos(var1[5]);
  t1105 = Sin(var1[24]);
  t1230 = Sin(var1[5]);
  t105 = Sin(var1[25]);
  t318 = Sin(var1[4]);
  t1111 = -1.*t17*t1052*t1063*t1105;
  t1235 = t1159*t17*t1052*t1230;
  t1251 = t1111 + t1235;
  t1446 = t1159*t17*t1052*t1063;
  t1475 = t17*t1052*t1105*t1230;
  t1487 = t1446 + t1475;
  t2019 = Sin(var1[3]);
  t1606 = -0.010926102783999999*t1045;
  t1614 = 1. + t1606;
  t2003 = t17*t1063*t318;
  t2033 = t2019*t1230;
  t2041 = t2003 + t2033;
  t2055 = t1063*t2019;
  t2056 = -1.*t17*t318*t1230;
  t2058 = t2055 + t2056;
  t1291 = -0.9890740084840001*t1045;
  t1428 = 1. + t1291;
  t2051 = t1105*t2041;
  t2060 = t1159*t2058;
  t2065 = t2051 + t2060;
  t2144 = t1159*t2041;
  t2158 = -1.*t1105*t2058;
  t2163 = t2144 + t2158;
  t1851 = 0.994522*t105;
  t1857 = 0. + t1851;
  t1765 = 0.104528*t105;
  t1777 = 0. + t1765;
  t2358 = -1.*t1063*t2019;
  t2367 = t17*t318*t1230;
  t2395 = t2358 + t2367;
  t2355 = -1.*t1105*t2041;
  t2397 = t1159*t2395;
  t2405 = t2355 + t2397;
  t2426 = -1.*t1159*t2041;
  t2430 = -1.*t1105*t2395;
  t2445 = t2426 + t2430;
  t2721 = t1105*t2395;
  t2722 = t2144 + t2721;
  t293 = -0.994522*t105;
  t298 = 0. + t293;
  t3002 = -1.*t1063*t2019*t318;
  t3004 = t17*t1230;
  t3005 = t3002 + t3004;
  t3010 = -1.*t17*t1063;
  t3049 = -1.*t2019*t318*t1230;
  t3050 = t3010 + t3049;
  t1540 = -0.104528*t105;
  t1553 = 0. + t1540;
  t3008 = -1.*t1105*t3005;
  t3051 = t1159*t3050;
  t3053 = t3008 + t3051;
  t3075 = t1159*t3005;
  t3088 = t1105*t3050;
  t3103 = t3075 + t3088;
  t1657 = -1.0000001112680001*t1045;
  t1680 = 1. + t1657;
  t3346 = -1.*t1052*t1063*t1105*t2019;
  t3365 = t1159*t1052*t2019*t1230;
  t3369 = t3346 + t3365;
  t3392 = t1159*t1052*t1063*t2019;
  t3394 = t1052*t1105*t2019*t1230;
  t3398 = t3392 + t3394;
  t2410 = -0.103955395616*t1045*t2405;
  t3726 = t1063*t2019*t318;
  t3735 = -1.*t17*t1230;
  t3750 = t3726 + t3735;
  t3756 = t1105*t3750;
  t3758 = t3756 + t3051;
  t3762 = t1159*t3750;
  t3775 = -1.*t1105*t3050;
  t3778 = t3762 + t3775;
  t3841 = t17*t1063;
  t3847 = t2019*t318*t1230;
  t3852 = t3841 + t3847;
  t3833 = -1.*t1105*t3750;
  t3860 = t1159*t3852;
  t3874 = t3833 + t3860;
  t3882 = -1.*t1159*t3750;
  t3890 = -1.*t1105*t3852;
  t3903 = t3882 + t3890;
  t4001 = t1105*t3852;
  t4009 = t3762 + t4001;
  t4129 = -1.*t1052*t1063*t1105;
  t4132 = t1159*t1052*t1230;
  t4149 = t4129 + t4132;
  t4162 = -1.*t1159*t1052*t1063;
  t4176 = -1.*t1052*t1105*t1230;
  t4214 = t4162 + t4176;
  t4356 = t1052*t1063*t1105;
  t4359 = -1.*t1159*t1052*t1230;
  t4372 = t4356 + t4359;
  t4380 = t1159*t1052*t1063;
  t4394 = t1052*t1105*t1230;
  t4434 = t4380 + t4394;
  t4835 = t1063*t1105*t318;
  t4837 = -1.*t1159*t318*t1230;
  t4838 = t4835 + t4837;
  t4845 = -1.*t1159*t1063*t318;
  t4847 = -1.*t1105*t318*t1230;
  t4849 = t4845 + t4847;
  t382 = -1.*t17*t298*t318;
  t1283 = -0.103955395616*t1045*t1251;
  t1496 = t1428*t1487;
  t1505 = t382 + t1283 + t1496;
  t1594 = -1.*t17*t1553*t318;
  t1615 = t1614*t1251;
  t1618 = -0.103955395616*t1045*t1487;
  t1622 = t1594 + t1615 + t1618;
  t1718 = -1.*t1680*t17*t318;
  t1791 = t1777*t1251;
  t1891 = t1857*t1487;
  t1968 = t1718 + t1791 + t1891;
  t1970 = 0.707107*t1968;
  t2119 = -0.103955395616*t1045*t2065;
  t2215 = t1614*t2163;
  t2253 = t2119 + t2215;
  t2275 = t1428*t2065;
  t2287 = -0.103955395616*t1045*t2163;
  t2298 = t2275 + t2287;
  t2316 = t1857*t2065;
  t2324 = t1777*t2163;
  t2329 = t2316 + t2324;
  t2346 = 0.707107*t2329;
  t2490 = t1614*t2445;
  t2502 = t2410 + t2490;
  t2535 = t1428*t2405;
  t2537 = -0.103955395616*t1045*t2445;
  t2559 = t2535 + t2537;
  t2602 = t1857*t2405;
  t2615 = t1777*t2445;
  t2616 = t2602 + t2615;
  t2623 = 0.707107*t2616;
  t2655 = -1.0000001112680001*t17*t1052*t105;
  t2674 = 0.104528*t436*t2405;
  t2737 = 0.994522*t436*t2722;
  t2738 = t2655 + t2674 + t2737;
  t2792 = 0.707107*t2738;
  t2833 = -0.994522*t436*t17*t1052;
  t2836 = -0.103955395616*t105*t2405;
  t2853 = -0.9890740084840001*t105*t2722;
  t2856 = t2833 + t2836 + t2853;
  t2858 = -0.104528*t436*t17*t1052;
  t2873 = -0.010926102783999999*t105*t2405;
  t2888 = -0.103955395616*t105*t2722;
  t2899 = t2858 + t2873 + t2888;
  t2999 = -1.*t1052*t298*t2019;
  t3070 = -0.103955395616*t1045*t3053;
  t3119 = t1428*t3103;
  t3126 = t2999 + t3070 + t3119;
  t3150 = -1.*t1052*t1553*t2019;
  t3167 = t1614*t3053;
  t3178 = -0.103955395616*t1045*t3103;
  t3195 = t3150 + t3167 + t3178;
  t3205 = -1.*t1680*t1052*t2019;
  t3208 = t1777*t3053;
  t3216 = t1857*t3103;
  t3222 = t3205 + t3208 + t3216;
  t3263 = 0.707107*t3222;
  t3342 = -1.*t298*t2019*t318;
  t3387 = -0.103955395616*t1045*t3369;
  t3404 = t1428*t3398;
  t3411 = t3342 + t3387 + t3404;
  t3416 = -1.*t1553*t2019*t318;
  t3430 = t1614*t3369;
  t3432 = -0.103955395616*t1045*t3398;
  t3433 = t3416 + t3430 + t3432;
  t3438 = -1.*t1680*t2019*t318;
  t3458 = t1777*t3369;
  t3465 = t1857*t3398;
  t3470 = t3438 + t3458 + t3465;
  t3472 = 0.707107*t3470;
  t3521 = t17*t1052*t298;
  t3535 = t1428*t2722;
  t3548 = t3521 + t2410 + t3535;
  t3555 = t17*t1052*t1553;
  t3556 = t1614*t2405;
  t3596 = -0.103955395616*t1045*t2722;
  t3606 = t3555 + t3556 + t3596;
  t3639 = t1680*t17*t1052;
  t3668 = t1777*t2405;
  t3695 = t1857*t2722;
  t3703 = t3639 + t3668 + t3695;
  t3707 = 0.707107*t3703;
  t3761 = -0.103955395616*t1045*t3758;
  t3782 = t1614*t3778;
  t3785 = t3761 + t3782;
  t3799 = t1428*t3758;
  t3805 = -0.103955395616*t1045*t3778;
  t3806 = t3799 + t3805;
  t3811 = t1857*t3758;
  t3812 = t1777*t3778;
  t3815 = t3811 + t3812;
  t3816 = 0.707107*t3815;
  t3879 = -0.103955395616*t1045*t3874;
  t3905 = t1614*t3903;
  t3907 = t3879 + t3905;
  t3916 = t1428*t3874;
  t3926 = -0.103955395616*t1045*t3903;
  t3928 = t3916 + t3926;
  t3963 = t1857*t3874;
  t3967 = t1777*t3903;
  t3971 = t3963 + t3967;
  t3975 = 0.707107*t3971;
  t3996 = -1.0000001112680001*t1052*t105*t2019;
  t3998 = 0.104528*t436*t3874;
  t4012 = 0.994522*t436*t4009;
  t4013 = t3996 + t3998 + t4012;
  t4015 = 0.707107*t4013;
  t4018 = -0.994522*t436*t1052*t2019;
  t4020 = -0.103955395616*t105*t3874;
  t4029 = -0.9890740084840001*t105*t4009;
  t4030 = t4018 + t4020 + t4029;
  t4040 = -0.104528*t436*t1052*t2019;
  t4044 = -0.010926102783999999*t105*t3874;
  t4049 = -0.103955395616*t105*t4009;
  t4063 = t4040 + t4044 + t4049;
  t4159 = -0.103955395616*t1045*t4149;
  t4224 = t1614*t4214;
  t4233 = t4159 + t4224;
  t4258 = t1428*t4149;
  t4261 = -0.103955395616*t1045*t4214;
  t4262 = t4258 + t4261;
  t4293 = t1857*t4149;
  t4302 = t1777*t4214;
  t4305 = t4293 + t4302;
  t4330 = 0.707107*t4305;
  t4374 = -0.103955395616*t1045*t4372;
  t4438 = t1614*t4434;
  t4462 = t4374 + t4438;
  t4494 = t1428*t4372;
  t4516 = -0.103955395616*t1045*t4434;
  t4520 = t4494 + t4516;
  t4547 = t1857*t4372;
  t4548 = t1777*t4434;
  t4552 = t4547 + t4548;
  t4557 = 0.707107*t4552;
  t4615 = 1.0000001112680001*t105*t318;
  t4617 = 0.104528*t436*t4149;
  t4623 = 0.994522*t436*t4434;
  t4628 = t4615 + t4617 + t4623;
  t4672 = 0.707107*t4628;
  t4674 = 0.994522*t436*t318;
  t4677 = -0.103955395616*t105*t4149;
  t4682 = -0.9890740084840001*t105*t4434;
  t4702 = t4674 + t4677 + t4682;
  t4751 = 0.104528*t436*t318;
  t4766 = -0.010926102783999999*t105*t4149;
  t4802 = -0.103955395616*t105*t4434;
  t4814 = t4751 + t4766 + t4802;
  t4831 = -1.*t1052*t298;
  t4842 = -0.103955395616*t1045*t4838;
  t4865 = t1428*t4849;
  t4868 = t4831 + t4842 + t4865;
  t4887 = -1.*t1052*t1553;
  t4889 = t1614*t4838;
  t4892 = -0.103955395616*t1045*t4849;
  t4898 = t4887 + t4889 + t4892;
  t4910 = -1.*t1680*t1052;
  t4924 = t1777*t4838;
  t4929 = t1857*t4849;
  t4932 = t4910 + t4924 + t4929;
  t4943 = 0.707107*t4932;
  t6033 = -1.*t1159;
  t6040 = 1. + t6033;
  t6100 = -0.12*t6040;
  t6102 = -0.4*t1105;
  t6107 = 0. + t6100 + t6102;
  t6042 = 0.4*t6040;
  t6049 = -0.12*t1105;
  t6054 = 0. + t6042 + t6049;
  t6138 = -1.1924972351948546e-8*var1[25];
  t6139 = 0.38315655000705834*t1045;
  t6148 = -0.05650052807*t298;
  t6151 = t6138 + t6139 + t6148;
  t6110 = 1.1345904784751044e-7*var1[25];
  t6113 = 0.04027119345689465*t1045;
  t6118 = -0.05650052807*t1553;
  t6120 = t6110 + t6113 + t6118;
  t6074 = -0.056500534356700764*t1045;
  t6076 = 0.040271188976*t1777;
  t6082 = 0.38315650737400003*t1857;
  t6092 = 0. + t6074 + t6076 + t6082;
  t6235 = -0.12*t1159;
  t6237 = 0.4*t1105;
  t6242 = t6235 + t6237;
  t6246 = -0.4*t1159;
  t6249 = t6246 + t6049;
  t6286 = 0.3852670428678886*t436;
  t6288 = -0.056500534356700764*t105;
  t6293 = t6286 + t6288;
  t6301 = 0.0059058871981009595*t436;
  t6306 = 0.04027119345689465*t105;
  t6307 = 1.1345904784751044e-7 + t6301 + t6306;
  t6318 = 0.05619101817723254*t436;
  t6322 = 0.38315655000705834*t105;
  t6328 = -1.1924972351948546e-8 + t6318 + t6322;
  p_output1[0]=(0.703234*t3126 + 0.073913*t3195 + t3263)*var2[3] + (0.703234*t1505 + 0.073913*t1622 + t1970)*var2[4] + (0.073913*t2253 + 0.703234*t2298 + t2346)*var2[5] + (0.073913*t2502 + 0.703234*t2559 + t2623)*var2[24] + (t2792 + 0.703234*t2856 + 0.073913*t2899)*var2[25];
  p_output1[1]=(0.703234*t3548 + 0.073913*t3606 + t3707)*var2[3] + (0.703234*t3411 + 0.073913*t3433 + t3472)*var2[4] + (0.073913*t3785 + 0.703234*t3806 + t3816)*var2[5] + (0.073913*t3907 + 0.703234*t3928 + t3975)*var2[24] + (t4015 + 0.703234*t4030 + 0.073913*t4063)*var2[25];
  p_output1[2]=(0.703234*t4868 + 0.073913*t4898 + t4943)*var2[4] + (0.073913*t4462 + 0.703234*t4520 + t4557)*var2[5] + (0.073913*t4233 + 0.703234*t4262 + t4330)*var2[24] + (t4672 + 0.703234*t4702 + 0.073913*t4814)*var2[25];
  p_output1[3]=0;
  p_output1[4]=(-0.703234*t3126 - 0.073913*t3195 + t3263)*var2[3] + (-0.703234*t1505 - 0.073913*t1622 + t1970)*var2[4] + (-0.073913*t2253 - 0.703234*t2298 + t2346)*var2[5] + (-0.073913*t2502 - 0.703234*t2559 + t2623)*var2[24] + (t2792 - 0.703234*t2856 - 0.073913*t2899)*var2[25];
  p_output1[5]=(-0.703234*t3548 - 0.073913*t3606 + t3707)*var2[3] + (-0.703234*t3411 - 0.073913*t3433 + t3472)*var2[4] + (-0.073913*t3785 - 0.703234*t3806 + t3816)*var2[5] + (-0.073913*t3907 - 0.703234*t3928 + t3975)*var2[24] + (t4015 - 0.703234*t4030 - 0.073913*t4063)*var2[25];
  p_output1[6]=(-0.703234*t4868 - 0.073913*t4898 + t4943)*var2[4] + (-0.073913*t4462 - 0.703234*t4520 + t4557)*var2[5] + (-0.073913*t4233 - 0.703234*t4262 + t4330)*var2[24] + (t4672 - 0.703234*t4702 - 0.073913*t4814)*var2[25];
  p_output1[7]=0;
  p_output1[8]=(-0.104528*t3126 + 0.994522*t3195)*var2[3] + (-0.104528*t1505 + 0.994522*t1622)*var2[4] + (0.994522*t2253 - 0.104528*t2298)*var2[5] + (0.994522*t2502 - 0.104528*t2559)*var2[24] + (-0.104528*t2856 + 0.994522*t2899)*var2[25];
  p_output1[9]=(-0.104528*t3548 + 0.994522*t3606)*var2[3] + (-0.104528*t3411 + 0.994522*t3433)*var2[4] + (0.994522*t3785 - 0.104528*t3806)*var2[5] + (0.994522*t3907 - 0.104528*t3928)*var2[24] + (-0.104528*t4030 + 0.994522*t4063)*var2[25];
  p_output1[10]=(-0.104528*t4868 + 0.994522*t4898)*var2[4] + (0.994522*t4462 - 0.104528*t4520)*var2[5] + (0.994522*t4233 - 0.104528*t4262)*var2[24] + (-0.104528*t4702 + 0.994522*t4814)*var2[25];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (0.362968*t3126 - 0.18652*t3195 - 0.012773*t3222 + t3005*t6054 - 1.*t1052*t2019*t6092 + t3050*t6107 + t3053*t6120 + t3103*t6151)*var2[3] + (0.362968*t1505 - 0.18652*t1622 - 0.012773*t1968 + t1052*t1063*t17*t6054 - 1.*t17*t318*t6092 + t1052*t1230*t17*t6107 + t1251*t6120 + t1487*t6151)*var2[4] + (-0.18652*t2253 + 0.362968*t2298 - 0.012773*t2329 + t2058*t6054 + t2041*t6107 + t2163*t6120 + t2065*t6151)*var2[5] + (-0.18652*t2502 + 0.362968*t2559 - 0.012773*t2616 + t2445*t6120 + t2405*t6151 + t2041*t6242 + t2395*t6249)*var2[24] + (-0.012773*t2738 + 0.362968*t2856 - 0.18652*t2899 + t1052*t17*t6293 + t2405*t6307 + t2722*t6328)*var2[25];
  p_output1[13]=var2[1] + (0.362968*t3548 - 0.18652*t3606 - 0.012773*t3703 + t2041*t6054 + t1052*t17*t6092 + t2395*t6107 + t2405*t6120 + t2722*t6151)*var2[3] + (0.362968*t3411 - 0.18652*t3433 - 0.012773*t3470 + t1052*t1063*t2019*t6054 - 1.*t2019*t318*t6092 + t1052*t1230*t2019*t6107 + t3369*t6120 + t3398*t6151)*var2[4] + (-0.18652*t3785 + 0.362968*t3806 - 0.012773*t3815 + t3050*t6054 + t3750*t6107 + t3778*t6120 + t3758*t6151)*var2[5] + (-0.18652*t3907 + 0.362968*t3928 - 0.012773*t3971 + t3903*t6120 + t3874*t6151 + t3750*t6242 + t3852*t6249)*var2[24] + (-0.012773*t4013 + 0.362968*t4030 - 0.18652*t4063 + t1052*t2019*t6293 + t3874*t6307 + t4009*t6328)*var2[25];
  p_output1[14]=var2[2] + (0.362968*t4868 - 0.18652*t4898 - 0.012773*t4932 - 1.*t1063*t318*t6054 - 1.*t1052*t6092 - 1.*t1230*t318*t6107 + t4838*t6120 + t4849*t6151)*var2[4] + (-0.18652*t4462 + 0.362968*t4520 - 0.012773*t4552 - 1.*t1052*t1230*t6054 + t1052*t1063*t6107 + t4434*t6120 + t4372*t6151)*var2[5] + (-0.18652*t4233 + 0.362968*t4262 - 0.012773*t4305 + t4214*t6120 + t4149*t6151 + t1052*t1063*t6242 + t1052*t1230*t6249)*var2[24] + (-0.012773*t4628 + 0.362968*t4702 - 0.18652*t4814 - 1.*t318*t6293 + t4149*t6307 + t4434*t6328)*var2[25];
  p_output1[15]=0;
}



void dT_right_shoulder_pitch_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
