/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:08:43 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dR_left_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1934;
  double t2214;
  double t2153;
  double t2170;
  double t2184;
  double t2674;
  double t2517;
  double t2532;
  double t2676;
  double t1114;
  double t1198;
  double t1230;
  double t1468;
  double t1949;
  double t2105;
  double t2582;
  double t2685;
  double t2716;
  double t2787;
  double t2871;
  double t2876;
  double t2004;
  double t2007;
  double t2131;
  double t2723;
  double t2724;
  double t2751;
  double t2878;
  double t2884;
  double t3110;
  double t3121;
  double t3122;
  double t3137;
  double t3201;
  double t3213;
  double t3229;
  double t3232;
  double t1232;
  double t3244;
  double t3252;
  double t3272;
  double t3274;
  double t3335;
  double t3337;
  double t3342;
  double t3343;
  double t3345;
  double t3347;
  double t3432;
  double t2907;
  double t2909;
  double t3028;
  double t3638;
  double t3630;
  double t3640;
  double t3644;
  double t3659;
  double t3663;
  double t3664;
  double t1482;
  double t1548;
  double t3658;
  double t3674;
  double t3679;
  double t3688;
  double t3706;
  double t3715;
  double t3237;
  double t3242;
  double t3437;
  double t3455;
  double t3681;
  double t3731;
  double t3740;
  double t3422;
  double t3424;
  double t3749;
  double t3775;
  double t3778;
  double t3483;
  double t3484;
  double t3793;
  double t3800;
  double t3814;
  double t3545;
  double t3559;
  double t3501;
  double t3503;
  double t3591;
  double t3592;
  double t4087;
  double t4092;
  double t4097;
  double t4076;
  double t4101;
  double t4109;
  double t4118;
  double t4122;
  double t4123;
  double t4117;
  double t4137;
  double t4138;
  double t4149;
  double t4154;
  double t4155;
  double t4176;
  double t4178;
  double t4181;
  double t4289;
  double t4290;
  double t4313;
  double t4285;
  double t4295;
  double t4296;
  double t4331;
  double t4343;
  double t4345;
  double t4348;
  double t4392;
  double t4404;
  double t4405;
  double t4406;
  double t4390;
  double t4512;
  double t4603;
  double t4607;
  double t4610;
  double t4619;
  double t4633;
  double t4647;
  double t4651;
  double t4664;
  double t4678;
  double t4686;
  double t4687;
  double t4688;
  double t4790;
  double t4811;
  double t4814;
  double t4821;
  double t4843;
  double t4854;
  double t4818;
  double t4858;
  double t4869;
  double t4876;
  double t4888;
  double t4892;
  double t4786;
  double t4871;
  double t4897;
  double t4898;
  double t4901;
  double t4902;
  double t4903;
  double t4912;
  double t4923;
  double t4932;
  double t4934;
  double t4936;
  double t5008;
  double t5009;
  double t5010;
  double t5013;
  double t5020;
  double t5021;
  double t5007;
  double t5011;
  double t5023;
  double t5024;
  double t5026;
  double t5028;
  double t5032;
  double t5034;
  double t5040;
  double t5043;
  double t5044;
  double t5054;
  double t5193;
  double t5195;
  double t5212;
  double t5220;
  double t5224;
  double t5249;
  double t5269;
  double t5270;
  double t5241;
  double t5271;
  double t5280;
  double t5292;
  double t5332;
  double t5342;
  double t5362;
  double t5364;
  double t5392;
  double t5535;
  double t5539;
  double t5542;
  double t5514;
  double t5543;
  double t5544;
  double t5557;
  double t5560;
  double t5572;
  double t5551;
  double t5575;
  double t5578;
  double t5595;
  double t5597;
  double t5606;
  double t5615;
  double t5616;
  double t5620;
  double t4309;
  double t4327;
  double t5771;
  double t5773;
  double t4377;
  double t4391;
  double t4457;
  double t4462;
  double t5761;
  double t5775;
  double t5790;
  double t5797;
  double t5808;
  double t5809;
  double t5811;
  double t4498;
  double t4514;
  double t5817;
  double t5818;
  double t5827;
  double t5830;
  double t4546;
  double t4556;
  double t4566;
  double t4570;
  double t5911;
  double t5915;
  double t5919;
  double t5944;
  double t5964;
  double t5966;
  double t5976;
  double t5980;
  double t5988;
  double t5991;
  double t6006;
  double t6016;
  double t6107;
  double t6114;
  double t6115;
  double t6123;
  double t6136;
  double t6138;
  double t6119;
  double t6139;
  double t6140;
  double t6151;
  double t6152;
  double t6155;
  double t6159;
  double t6163;
  double t6170;
  double t6250;
  double t6254;
  double t6268;
  double t6236;
  double t6274;
  double t6275;
  double t6286;
  double t6292;
  double t6295;
  double t6297;
  double t6315;
  double t6320;
  double t6326;
  double t6329;
  double t6416;
  double t6420;
  double t6423;
  double t6428;
  double t6437;
  double t6438;
  double t6448;
  double t6452;
  double t6456;
  double t6458;
  double t6472;
  double t6574;
  double t6576;
  double t6600;
  double t6629;
  double t6640;
  double t6642;
  double t6649;
  double t6658;
  double t6660;
  double t6663;
  double t6666;
  double t6670;
  double t6773;
  double t6774;
  double t6776;
  double t6782;
  double t6783;
  double t6788;
  double t6769;
  double t6777;
  double t6791;
  double t6794;
  double t6813;
  double t6825;
  double t6827;
  double t6832;
  double t6849;
  double t6851;
  double t6855;
  double t6874;
  double t3429;
  double t3469;
  double t3494;
  double t3496;
  double t3525;
  double t3589;
  double t3595;
  double t3612;
  double t3917;
  double t3918;
  double t3961;
  double t3968;
  double t3987;
  double t4036;
  double t4040;
  double t4054;
  double t4217;
  double t4226;
  double t4231;
  double t4239;
  double t4257;
  double t4258;
  double t4260;
  double t4267;
  double t4304;
  double t4375;
  double t4446;
  double t4447;
  double t4479;
  double t4482;
  double t4518;
  double t4533;
  double t4620;
  double t4665;
  double t4689;
  double t4691;
  double t4719;
  double t4720;
  double t4741;
  double t4752;
  double t4955;
  double t4963;
  double t4975;
  double t4977;
  double t4979;
  double t4986;
  double t4990;
  double t4993;
  double t5067;
  double t5069;
  double t5080;
  double t5082;
  double t5085;
  double t5088;
  double t5090;
  double t5092;
  double t5129;
  double t5130;
  double t5131;
  double t5135;
  double t5150;
  double t5153;
  double t5164;
  double t5170;
  double t5447;
  double t5452;
  double t5453;
  double t5458;
  double t5464;
  double t5477;
  double t5484;
  double t5496;
  double t5639;
  double t5652;
  double t5663;
  double t5670;
  double t5694;
  double t5696;
  double t5698;
  double t5715;
  double t5791;
  double t5812;
  double t5844;
  double t5851;
  double t5864;
  double t5865;
  double t5867;
  double t5868;
  double t5955;
  double t5986;
  double t6022;
  double t6023;
  double t6030;
  double t6032;
  double t6033;
  double t6037;
  double t6182;
  double t6187;
  double t6193;
  double t6194;
  double t6206;
  double t6214;
  double t6220;
  double t6227;
  double t6279;
  double t6307;
  double t6331;
  double t6333;
  double t6343;
  double t6347;
  double t6348;
  double t6360;
  double t6490;
  double t6494;
  double t6514;
  double t6518;
  double t6523;
  double t6537;
  double t6543;
  double t6544;
  double t6634;
  double t6659;
  double t6682;
  double t6697;
  double t6722;
  double t6725;
  double t6727;
  double t6731;
  double t6895;
  double t6901;
  double t6902;
  double t6904;
  double t6933;
  double t6937;
  double t6962;
  double t6964;
  double t2885;
  double t3235;
  double t3362;
  double t3367;
  double t3391;
  double t3746;
  double t3782;
  double t3816;
  double t3895;
  double t3912;
  double t4141;
  double t4160;
  double t4205;
  double t4211;
  double t4213;
  double t4564;
  double t4573;
  double t4578;
  double t4580;
  double t4581;
  double t4762;
  double t4766;
  double t4768;
  double t4771;
  double t4779;
  double t4899;
  double t4922;
  double t4941;
  double t4949;
  double t4950;
  double t5025;
  double t5037;
  double t5057;
  double t5062;
  double t5065;
  double t5109;
  double t5116;
  double t5121;
  double t5122;
  double t5126;
  double t5290;
  double t5343;
  double t5399;
  double t5414;
  double t5443;
  double t5593;
  double t5607;
  double t5623;
  double t5629;
  double t5633;
  double t5880;
  double t5888;
  double t5889;
  double t5892;
  double t5901;
  double t6051;
  double t6062;
  double t6063;
  double t6064;
  double t6072;
  double t6142;
  double t6156;
  double t6171;
  double t6174;
  double t6175;
  double t6369;
  double t6386;
  double t6400;
  double t6404;
  double t6409;
  double t6443;
  double t6454;
  double t6480;
  double t6486;
  double t6487;
  double t6736;
  double t6737;
  double t6749;
  double t6750;
  double t6753;
  double t6796;
  double t6840;
  double t6879;
  double t6882;
  double t6894;
  t1934 = Cos(var1[3]);
  t2214 = Cos(var1[4]);
  t2153 = Cos(var1[14]);
  t2170 = -1.*t2153;
  t2184 = 1. + t2170;
  t2674 = Cos(var1[13]);
  t2517 = Cos(var1[5]);
  t2532 = Sin(var1[13]);
  t2676 = Sin(var1[5]);
  t1114 = Cos(var1[15]);
  t1198 = -1.*t1114;
  t1230 = 1. + t1198;
  t1468 = Sin(var1[15]);
  t1949 = Sin(var1[14]);
  t2105 = Sin(var1[4]);
  t2582 = -1.*t1934*t2214*t2517*t2532;
  t2685 = t2674*t1934*t2214*t2676;
  t2716 = t2582 + t2685;
  t2787 = t2674*t1934*t2214*t2517;
  t2871 = t1934*t2214*t2532*t2676;
  t2876 = t2787 + t2871;
  t2004 = 0.994522*t1949;
  t2007 = 0. + t2004;
  t2131 = -1.*t1934*t2007*t2105;
  t2723 = 0.103955395616*t2184*t2716;
  t2724 = -0.9890740084840001*t2184;
  t2751 = 1. + t2724;
  t2878 = t2751*t2876;
  t2884 = t2131 + t2723 + t2878;
  t3110 = -0.104528*t1949;
  t3121 = 0. + t3110;
  t3122 = -1.*t1934*t3121*t2105;
  t3137 = -0.010926102783999999*t2184;
  t3201 = 1. + t3137;
  t3213 = t3201*t2716;
  t3229 = 0.103955395616*t2184*t2876;
  t3232 = t3122 + t3213 + t3229;
  t1232 = -0.49726168403800003*t1230;
  t3244 = -1.0000001112680001*t2184;
  t3252 = 1. + t3244;
  t3272 = -1.*t3252*t1934*t2105;
  t3274 = 0.104528*t1949;
  t3335 = 0. + t3274;
  t3337 = t3335*t2716;
  t3342 = -0.994522*t1949;
  t3343 = 0. + t3342;
  t3345 = t3343*t2876;
  t3347 = t3272 + t3337 + t3345;
  t3432 = -0.051978134642000004*t1230;
  t2907 = 0.05226439969100001*t1230;
  t2909 = -0.703234*t1468;
  t3028 = t2907 + t2909;
  t3638 = Sin(var1[3]);
  t3630 = t1934*t2517*t2105;
  t3640 = t3638*t2676;
  t3644 = t3630 + t3640;
  t3659 = t2517*t3638;
  t3663 = -1.*t1934*t2105*t2676;
  t3664 = t3659 + t3663;
  t1482 = -0.073913*t1468;
  t1548 = t1232 + t1482;
  t3658 = t2532*t3644;
  t3674 = t2674*t3664;
  t3679 = t3658 + t3674;
  t3688 = t2674*t3644;
  t3706 = -1.*t2532*t3664;
  t3715 = t3688 + t3706;
  t3237 = -0.500001190325*t1230;
  t3242 = 1. + t3237;
  t3437 = -0.707107*t1468;
  t3455 = t3432 + t3437;
  t3681 = 0.103955395616*t2184*t3679;
  t3731 = t3201*t3715;
  t3740 = t3681 + t3731;
  t3422 = -0.5054634410180001*t1230;
  t3424 = 1. + t3422;
  t3749 = t2751*t3679;
  t3775 = 0.103955395616*t2184*t3715;
  t3778 = t3749 + t3775;
  t3483 = 0.073913*t1468;
  t3484 = t1232 + t3483;
  t3793 = t3343*t3679;
  t3800 = t3335*t3715;
  t3814 = t3793 + t3800;
  t3545 = -0.9945383682050002*t1230;
  t3559 = 1. + t3545;
  t3501 = 0.707107*t1468;
  t3503 = t3432 + t3501;
  t3591 = 0.703234*t1468;
  t3592 = t2907 + t3591;
  t4087 = -1.*t2517*t3638;
  t4092 = t1934*t2105*t2676;
  t4097 = t4087 + t4092;
  t4076 = -1.*t2532*t3644;
  t4101 = t2674*t4097;
  t4109 = t4076 + t4101;
  t4118 = -1.*t2674*t3644;
  t4122 = -1.*t2532*t4097;
  t4123 = t4118 + t4122;
  t4117 = 0.103955395616*t2184*t4109;
  t4137 = t3201*t4123;
  t4138 = t4117 + t4137;
  t4149 = t2751*t4109;
  t4154 = 0.103955395616*t2184*t4123;
  t4155 = t4149 + t4154;
  t4176 = t3343*t4109;
  t4178 = t3335*t4123;
  t4181 = t4176 + t4178;
  t4289 = t2532*t4097;
  t4290 = t3688 + t4289;
  t4313 = -0.051978134642000004*t1468;
  t4285 = t1934*t2214*t2007;
  t4295 = t2751*t4290;
  t4296 = t4285 + t4117 + t4295;
  t4331 = t1934*t2214*t3121;
  t4343 = t3201*t4109;
  t4345 = 0.103955395616*t2184*t4290;
  t4348 = t4331 + t4343 + t4345;
  t4392 = t3252*t1934*t2214;
  t4404 = t3335*t4109;
  t4405 = t3343*t4290;
  t4406 = t4392 + t4404 + t4405;
  t4390 = -0.49726168403800003*t1468;
  t4512 = 0.05226439969100001*t1468;
  t4603 = -1.0000001112680001*t1934*t2214*t1949;
  t4607 = 0.104528*t2153*t4109;
  t4610 = -0.994522*t2153*t4290;
  t4619 = t4603 + t4607 + t4610;
  t4633 = 0.994522*t2153*t1934*t2214;
  t4647 = 0.103955395616*t1949*t4109;
  t4651 = -0.9890740084840001*t1949*t4290;
  t4664 = t4633 + t4647 + t4651;
  t4678 = -0.104528*t2153*t1934*t2214;
  t4686 = -0.010926102783999999*t1949*t4109;
  t4687 = 0.103955395616*t1949*t4290;
  t4688 = t4678 + t4686 + t4687;
  t4790 = -1.*t2517*t3638*t2105;
  t4811 = t1934*t2676;
  t4814 = t4790 + t4811;
  t4821 = -1.*t1934*t2517;
  t4843 = -1.*t3638*t2105*t2676;
  t4854 = t4821 + t4843;
  t4818 = -1.*t2532*t4814;
  t4858 = t2674*t4854;
  t4869 = t4818 + t4858;
  t4876 = t2674*t4814;
  t4888 = t2532*t4854;
  t4892 = t4876 + t4888;
  t4786 = -1.*t2214*t2007*t3638;
  t4871 = 0.103955395616*t2184*t4869;
  t4897 = t2751*t4892;
  t4898 = t4786 + t4871 + t4897;
  t4901 = -1.*t2214*t3121*t3638;
  t4902 = t3201*t4869;
  t4903 = 0.103955395616*t2184*t4892;
  t4912 = t4901 + t4902 + t4903;
  t4923 = -1.*t3252*t2214*t3638;
  t4932 = t3335*t4869;
  t4934 = t3343*t4892;
  t4936 = t4923 + t4932 + t4934;
  t5008 = -1.*t2214*t2517*t2532*t3638;
  t5009 = t2674*t2214*t3638*t2676;
  t5010 = t5008 + t5009;
  t5013 = t2674*t2214*t2517*t3638;
  t5020 = t2214*t2532*t3638*t2676;
  t5021 = t5013 + t5020;
  t5007 = -1.*t2007*t3638*t2105;
  t5011 = 0.103955395616*t2184*t5010;
  t5023 = t2751*t5021;
  t5024 = t5007 + t5011 + t5023;
  t5026 = -1.*t3121*t3638*t2105;
  t5028 = t3201*t5010;
  t5032 = 0.103955395616*t2184*t5021;
  t5034 = t5026 + t5028 + t5032;
  t5040 = -1.*t3252*t3638*t2105;
  t5043 = t3335*t5010;
  t5044 = t3343*t5021;
  t5054 = t5040 + t5043 + t5044;
  t5193 = t2517*t3638*t2105;
  t5195 = -1.*t1934*t2676;
  t5212 = t5193 + t5195;
  t5220 = t2532*t5212;
  t5224 = t5220 + t4858;
  t5249 = t2674*t5212;
  t5269 = -1.*t2532*t4854;
  t5270 = t5249 + t5269;
  t5241 = 0.103955395616*t2184*t5224;
  t5271 = t3201*t5270;
  t5280 = t5241 + t5271;
  t5292 = t2751*t5224;
  t5332 = 0.103955395616*t2184*t5270;
  t5342 = t5292 + t5332;
  t5362 = t3343*t5224;
  t5364 = t3335*t5270;
  t5392 = t5362 + t5364;
  t5535 = t1934*t2517;
  t5539 = t3638*t2105*t2676;
  t5542 = t5535 + t5539;
  t5514 = -1.*t2532*t5212;
  t5543 = t2674*t5542;
  t5544 = t5514 + t5543;
  t5557 = -1.*t2674*t5212;
  t5560 = -1.*t2532*t5542;
  t5572 = t5557 + t5560;
  t5551 = 0.103955395616*t2184*t5544;
  t5575 = t3201*t5572;
  t5578 = t5551 + t5575;
  t5595 = t2751*t5544;
  t5597 = 0.103955395616*t2184*t5572;
  t5606 = t5595 + t5597;
  t5615 = t3343*t5544;
  t5616 = t3335*t5572;
  t5620 = t5615 + t5616;
  t4309 = -0.707107*t1114;
  t4327 = t4309 + t4313;
  t5771 = t2532*t5542;
  t5773 = t5249 + t5771;
  t4377 = 0.073913*t1114;
  t4391 = t4377 + t4390;
  t4457 = 0.707107*t1114;
  t4462 = t4457 + t4313;
  t5761 = t2214*t2007*t3638;
  t5775 = t2751*t5773;
  t5790 = t5761 + t5551 + t5775;
  t5797 = t2214*t3121*t3638;
  t5808 = t3201*t5544;
  t5809 = 0.103955395616*t2184*t5773;
  t5811 = t5797 + t5808 + t5809;
  t4498 = 0.703234*t1114;
  t4514 = t4498 + t4512;
  t5817 = t3252*t2214*t3638;
  t5818 = t3335*t5544;
  t5827 = t3343*t5773;
  t5830 = t5817 + t5818 + t5827;
  t4546 = -0.073913*t1114;
  t4556 = t4546 + t4390;
  t4566 = -0.703234*t1114;
  t4570 = t4566 + t4512;
  t5911 = -1.0000001112680001*t2214*t1949*t3638;
  t5915 = 0.104528*t2153*t5544;
  t5919 = -0.994522*t2153*t5773;
  t5944 = t5911 + t5915 + t5919;
  t5964 = 0.994522*t2153*t2214*t3638;
  t5966 = 0.103955395616*t1949*t5544;
  t5976 = -0.9890740084840001*t1949*t5773;
  t5980 = t5964 + t5966 + t5976;
  t5988 = -0.104528*t2153*t2214*t3638;
  t5991 = -0.010926102783999999*t1949*t5544;
  t6006 = 0.103955395616*t1949*t5773;
  t6016 = t5988 + t5991 + t6006;
  t6107 = -1.*t2214*t2517*t2532;
  t6114 = t2674*t2214*t2676;
  t6115 = t6107 + t6114;
  t6123 = -1.*t2674*t2214*t2517;
  t6136 = -1.*t2214*t2532*t2676;
  t6138 = t6123 + t6136;
  t6119 = 0.103955395616*t2184*t6115;
  t6139 = t3201*t6138;
  t6140 = t6119 + t6139;
  t6151 = t2751*t6115;
  t6152 = 0.103955395616*t2184*t6138;
  t6155 = t6151 + t6152;
  t6159 = t3343*t6115;
  t6163 = t3335*t6138;
  t6170 = t6159 + t6163;
  t6250 = t2674*t2214*t2517;
  t6254 = t2214*t2532*t2676;
  t6268 = t6250 + t6254;
  t6236 = -1.*t2007*t2105;
  t6274 = t2751*t6268;
  t6275 = t6236 + t6119 + t6274;
  t6286 = -1.*t3121*t2105;
  t6292 = t3201*t6115;
  t6295 = 0.103955395616*t2184*t6268;
  t6297 = t6286 + t6292 + t6295;
  t6315 = -1.*t3252*t2105;
  t6320 = t3335*t6115;
  t6326 = t3343*t6268;
  t6329 = t6315 + t6320 + t6326;
  t6416 = t2214*t2517*t2532;
  t6420 = -1.*t2674*t2214*t2676;
  t6423 = t6416 + t6420;
  t6428 = 0.103955395616*t2184*t6423;
  t6437 = t3201*t6268;
  t6438 = t6428 + t6437;
  t6448 = t2751*t6423;
  t6452 = t6448 + t6295;
  t6456 = t3343*t6423;
  t6458 = t3335*t6268;
  t6472 = t6456 + t6458;
  t6574 = 1.0000001112680001*t1949*t2105;
  t6576 = 0.104528*t2153*t6115;
  t6600 = -0.994522*t2153*t6268;
  t6629 = t6574 + t6576 + t6600;
  t6640 = -0.994522*t2153*t2105;
  t6642 = 0.103955395616*t1949*t6115;
  t6649 = -0.9890740084840001*t1949*t6268;
  t6658 = t6640 + t6642 + t6649;
  t6660 = 0.104528*t2153*t2105;
  t6663 = -0.010926102783999999*t1949*t6115;
  t6666 = 0.103955395616*t1949*t6268;
  t6670 = t6660 + t6663 + t6666;
  t6773 = t2517*t2532*t2105;
  t6774 = -1.*t2674*t2105*t2676;
  t6776 = t6773 + t6774;
  t6782 = -1.*t2674*t2517*t2105;
  t6783 = -1.*t2532*t2105*t2676;
  t6788 = t6782 + t6783;
  t6769 = -1.*t2214*t2007;
  t6777 = 0.103955395616*t2184*t6776;
  t6791 = t2751*t6788;
  t6794 = t6769 + t6777 + t6791;
  t6813 = -1.*t2214*t3121;
  t6825 = t3201*t6776;
  t6827 = 0.103955395616*t2184*t6788;
  t6832 = t6813 + t6825 + t6827;
  t6849 = -1.*t3252*t2214;
  t6851 = t3335*t6776;
  t6855 = t3343*t6788;
  t6874 = t6849 + t6851 + t6855;
  t3429 = t3424*t2884;
  t3469 = t3455*t3232;
  t3494 = t3484*t3347;
  t3496 = t3429 + t3469 + t3494;
  t3525 = t3503*t2884;
  t3589 = t3559*t3232;
  t3595 = t3592*t3347;
  t3612 = t3525 + t3589 + t3595;
  t3917 = t3455*t3740;
  t3918 = t3424*t3778;
  t3961 = t3484*t3814;
  t3968 = t3917 + t3918 + t3961;
  t3987 = t3559*t3740;
  t4036 = t3503*t3778;
  t4040 = t3592*t3814;
  t4054 = t3987 + t4036 + t4040;
  t4217 = t3455*t4138;
  t4226 = t3424*t4155;
  t4231 = t3484*t4181;
  t4239 = t4217 + t4226 + t4231;
  t4257 = t3559*t4138;
  t4258 = t3503*t4155;
  t4260 = t3592*t4181;
  t4267 = t4257 + t4258 + t4260;
  t4304 = -0.5054634410180001*t1468*t4296;
  t4375 = t4327*t4348;
  t4446 = t4391*t4406;
  t4447 = t4304 + t4375 + t4446;
  t4479 = t4462*t4296;
  t4482 = -0.9945383682050002*t1468*t4348;
  t4518 = t4514*t4406;
  t4533 = t4479 + t4482 + t4518;
  t4620 = t3592*t4619;
  t4665 = t3503*t4664;
  t4689 = t3559*t4688;
  t4691 = t4620 + t4665 + t4689;
  t4719 = t3484*t4619;
  t4720 = t3424*t4664;
  t4741 = t3455*t4688;
  t4752 = t4719 + t4720 + t4741;
  t4955 = t3424*t4898;
  t4963 = t3455*t4912;
  t4975 = t3484*t4936;
  t4977 = t4955 + t4963 + t4975;
  t4979 = t3503*t4898;
  t4986 = t3559*t4912;
  t4990 = t3592*t4936;
  t4993 = t4979 + t4986 + t4990;
  t5067 = t3424*t5024;
  t5069 = t3455*t5034;
  t5080 = t3484*t5054;
  t5082 = t5067 + t5069 + t5080;
  t5085 = t3503*t5024;
  t5088 = t3559*t5034;
  t5090 = t3592*t5054;
  t5092 = t5085 + t5088 + t5090;
  t5129 = t3424*t4296;
  t5130 = t3455*t4348;
  t5131 = t3484*t4406;
  t5135 = t5129 + t5130 + t5131;
  t5150 = t3503*t4296;
  t5153 = t3559*t4348;
  t5164 = t3592*t4406;
  t5170 = t5150 + t5153 + t5164;
  t5447 = t3455*t5280;
  t5452 = t3424*t5342;
  t5453 = t3484*t5392;
  t5458 = t5447 + t5452 + t5453;
  t5464 = t3559*t5280;
  t5477 = t3503*t5342;
  t5484 = t3592*t5392;
  t5496 = t5464 + t5477 + t5484;
  t5639 = t3455*t5578;
  t5652 = t3424*t5606;
  t5663 = t3484*t5620;
  t5670 = t5639 + t5652 + t5663;
  t5694 = t3559*t5578;
  t5696 = t3503*t5606;
  t5698 = t3592*t5620;
  t5715 = t5694 + t5696 + t5698;
  t5791 = -0.5054634410180001*t1468*t5790;
  t5812 = t4327*t5811;
  t5844 = t4391*t5830;
  t5851 = t5791 + t5812 + t5844;
  t5864 = t4462*t5790;
  t5865 = -0.9945383682050002*t1468*t5811;
  t5867 = t4514*t5830;
  t5868 = t5864 + t5865 + t5867;
  t5955 = t3592*t5944;
  t5986 = t3503*t5980;
  t6022 = t3559*t6016;
  t6023 = t5955 + t5986 + t6022;
  t6030 = t3484*t5944;
  t6032 = t3424*t5980;
  t6033 = t3455*t6016;
  t6037 = t6030 + t6032 + t6033;
  t6182 = t3455*t6140;
  t6187 = t3424*t6155;
  t6193 = t3484*t6170;
  t6194 = t6182 + t6187 + t6193;
  t6206 = t3559*t6140;
  t6214 = t3503*t6155;
  t6220 = t3592*t6170;
  t6227 = t6206 + t6214 + t6220;
  t6279 = -0.5054634410180001*t1468*t6275;
  t6307 = t4327*t6297;
  t6331 = t4391*t6329;
  t6333 = t6279 + t6307 + t6331;
  t6343 = t4462*t6275;
  t6347 = -0.9945383682050002*t1468*t6297;
  t6348 = t4514*t6329;
  t6360 = t6343 + t6347 + t6348;
  t6490 = t3455*t6438;
  t6494 = t3424*t6452;
  t6514 = t3484*t6472;
  t6518 = t6490 + t6494 + t6514;
  t6523 = t3559*t6438;
  t6537 = t3503*t6452;
  t6543 = t3592*t6472;
  t6544 = t6523 + t6537 + t6543;
  t6634 = t3592*t6629;
  t6659 = t3503*t6658;
  t6682 = t3559*t6670;
  t6697 = t6634 + t6659 + t6682;
  t6722 = t3484*t6629;
  t6725 = t3424*t6658;
  t6727 = t3455*t6670;
  t6731 = t6722 + t6725 + t6727;
  t6895 = t3424*t6794;
  t6901 = t3455*t6832;
  t6902 = t3484*t6874;
  t6904 = t6895 + t6901 + t6902;
  t6933 = t3503*t6794;
  t6937 = t3559*t6832;
  t6962 = t3592*t6874;
  t6964 = t6933 + t6937 + t6962;
  t2885 = t1548*t2884;
  t3235 = t3028*t3232;
  t3362 = t3242*t3347;
  t3367 = t2885 + t3235 + t3362;
  t3391 = 0.707107*t3367;
  t3746 = t3028*t3740;
  t3782 = t1548*t3778;
  t3816 = t3242*t3814;
  t3895 = t3746 + t3782 + t3816;
  t3912 = 0.707107*t3895;
  t4141 = t3028*t4138;
  t4160 = t1548*t4155;
  t4205 = t3242*t4181;
  t4211 = t4141 + t4160 + t4205;
  t4213 = 0.707107*t4211;
  t4564 = t4556*t4296;
  t4573 = t4570*t4348;
  t4578 = -0.500001190325*t1468*t4406;
  t4580 = t4564 + t4573 + t4578;
  t4581 = 0.707107*t4580;
  t4762 = t3242*t4619;
  t4766 = t1548*t4664;
  t4768 = t3028*t4688;
  t4771 = t4762 + t4766 + t4768;
  t4779 = 0.707107*t4771;
  t4899 = t1548*t4898;
  t4922 = t3028*t4912;
  t4941 = t3242*t4936;
  t4949 = t4899 + t4922 + t4941;
  t4950 = 0.707107*t4949;
  t5025 = t1548*t5024;
  t5037 = t3028*t5034;
  t5057 = t3242*t5054;
  t5062 = t5025 + t5037 + t5057;
  t5065 = 0.707107*t5062;
  t5109 = t1548*t4296;
  t5116 = t3028*t4348;
  t5121 = t3242*t4406;
  t5122 = t5109 + t5116 + t5121;
  t5126 = 0.707107*t5122;
  t5290 = t3028*t5280;
  t5343 = t1548*t5342;
  t5399 = t3242*t5392;
  t5414 = t5290 + t5343 + t5399;
  t5443 = 0.707107*t5414;
  t5593 = t3028*t5578;
  t5607 = t1548*t5606;
  t5623 = t3242*t5620;
  t5629 = t5593 + t5607 + t5623;
  t5633 = 0.707107*t5629;
  t5880 = t4556*t5790;
  t5888 = t4570*t5811;
  t5889 = -0.500001190325*t1468*t5830;
  t5892 = t5880 + t5888 + t5889;
  t5901 = 0.707107*t5892;
  t6051 = t3242*t5944;
  t6062 = t1548*t5980;
  t6063 = t3028*t6016;
  t6064 = t6051 + t6062 + t6063;
  t6072 = 0.707107*t6064;
  t6142 = t3028*t6140;
  t6156 = t1548*t6155;
  t6171 = t3242*t6170;
  t6174 = t6142 + t6156 + t6171;
  t6175 = 0.707107*t6174;
  t6369 = t4556*t6275;
  t6386 = t4570*t6297;
  t6400 = -0.500001190325*t1468*t6329;
  t6404 = t6369 + t6386 + t6400;
  t6409 = 0.707107*t6404;
  t6443 = t3028*t6438;
  t6454 = t1548*t6452;
  t6480 = t3242*t6472;
  t6486 = t6443 + t6454 + t6480;
  t6487 = 0.707107*t6486;
  t6736 = t3242*t6629;
  t6737 = t1548*t6658;
  t6749 = t3028*t6670;
  t6750 = t6736 + t6737 + t6749;
  t6753 = 0.707107*t6750;
  t6796 = t1548*t6794;
  t6840 = t3028*t6832;
  t6879 = t3242*t6874;
  t6882 = t6796 + t6840 + t6879;
  t6894 = 0.707107*t6882;
  p_output1[0]=(t4950 + 0.703234*t4977 - 0.073913*t4993)*var2[3] + (t3391 + 0.703234*t3496 - 0.073913*t3612)*var2[4] + (t3912 + 0.703234*t3968 - 0.073913*t4054)*var2[5] + (t4213 + 0.703234*t4239 - 0.073913*t4267)*var2[13] + (-0.073913*t4691 + 0.703234*t4752 + t4779)*var2[14] + (0.703234*t4447 - 0.073913*t4533 + t4581)*var2[15];
  p_output1[1]=(t5126 + 0.703234*t5135 - 0.073913*t5170)*var2[3] + (t5065 + 0.703234*t5082 - 0.073913*t5092)*var2[4] + (t5443 + 0.703234*t5458 - 0.073913*t5496)*var2[5] + (t5633 + 0.703234*t5670 - 0.073913*t5715)*var2[13] + (-0.073913*t6023 + 0.703234*t6037 + t6072)*var2[14] + (0.703234*t5851 - 0.073913*t5868 + t5901)*var2[15];
  p_output1[2]=(t6894 + 0.703234*t6904 - 0.073913*t6964)*var2[4] + (t6487 + 0.703234*t6518 - 0.073913*t6544)*var2[5] + (t6175 + 0.703234*t6194 - 0.073913*t6227)*var2[13] + (-0.073913*t6697 + 0.703234*t6731 + t6753)*var2[14] + (0.703234*t6333 - 0.073913*t6360 + t6409)*var2[15];
  p_output1[3]=(-0.104528*t4977 - 0.994522*t4993)*var2[3] + (-0.104528*t3496 - 0.994522*t3612)*var2[4] + (-0.104528*t3968 - 0.994522*t4054)*var2[5] + (-0.104528*t4239 - 0.994522*t4267)*var2[13] + (-0.994522*t4691 - 0.104528*t4752)*var2[14] + (-0.104528*t4447 - 0.994522*t4533)*var2[15];
  p_output1[4]=(-0.104528*t5135 - 0.994522*t5170)*var2[3] + (-0.104528*t5082 - 0.994522*t5092)*var2[4] + (-0.104528*t5458 - 0.994522*t5496)*var2[5] + (-0.104528*t5670 - 0.994522*t5715)*var2[13] + (-0.994522*t6023 - 0.104528*t6037)*var2[14] + (-0.104528*t5851 - 0.994522*t5868)*var2[15];
  p_output1[5]=(-0.104528*t6904 - 0.994522*t6964)*var2[4] + (-0.104528*t6518 - 0.994522*t6544)*var2[5] + (-0.104528*t6194 - 0.994522*t6227)*var2[13] + (-0.994522*t6697 - 0.104528*t6731)*var2[14] + (-0.104528*t6333 - 0.994522*t6360)*var2[15];
  p_output1[6]=(t4950 - 0.703234*t4977 + 0.073913*t4993)*var2[3] + (t3391 - 0.703234*t3496 + 0.073913*t3612)*var2[4] + (t3912 - 0.703234*t3968 + 0.073913*t4054)*var2[5] + (t4213 - 0.703234*t4239 + 0.073913*t4267)*var2[13] + (0.073913*t4691 - 0.703234*t4752 + t4779)*var2[14] + (-0.703234*t4447 + 0.073913*t4533 + t4581)*var2[15];
  p_output1[7]=(t5126 - 0.703234*t5135 + 0.073913*t5170)*var2[3] + (t5065 - 0.703234*t5082 + 0.073913*t5092)*var2[4] + (t5443 - 0.703234*t5458 + 0.073913*t5496)*var2[5] + (t5633 - 0.703234*t5670 + 0.073913*t5715)*var2[13] + (0.073913*t6023 - 0.703234*t6037 + t6072)*var2[14] + (-0.703234*t5851 + 0.073913*t5868 + t5901)*var2[15];
  p_output1[8]=(t6894 - 0.703234*t6904 + 0.073913*t6964)*var2[4] + (t6487 - 0.703234*t6518 + 0.073913*t6544)*var2[5] + (t6175 - 0.703234*t6194 + 0.073913*t6227)*var2[13] + (0.073913*t6697 - 0.703234*t6731 + t6753)*var2[14] + (-0.703234*t6333 + 0.073913*t6360 + t6409)*var2[15];
}



void dR_left_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
