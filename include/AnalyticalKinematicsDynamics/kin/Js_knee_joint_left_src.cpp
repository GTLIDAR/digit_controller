/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:33:40 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Js_knee_joint_left_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t73;
  double t167;
  double t212;
  double t231;
  double t357;
  double t371;
  double t366;
  double t373;
  double t380;
  double t620;
  double t622;
  double t624;
  double t629;
  double t633;
  double t401;
  double t418;
  double t419;
  double t710;
  double t734;
  double t749;
  double t757;
  double t777;
  double t780;
  double t761;
  double t762;
  double t766;
  double t774;
  double t781;
  double t783;
  double t807;
  double t813;
  double t815;
  double t819;
  double t820;
  double t821;
  double t848;
  double t918;
  double t924;
  double t928;
  double t15;
  double t789;
  double t794;
  double t796;
  double t632;
  double t646;
  double t673;
  double t994;
  double t1006;
  double t1020;
  double t884;
  double t885;
  double t891;
  double t1030;
  double t1032;
  double t1038;
  double t696;
  double t701;
  double t703;
  double t1116;
  double t1123;
  double t1132;
  double t1138;
  double t1107;
  double t1108;
  double t1113;
  double t1387;
  double t1315;
  double t1335;
  double t1336;
  double t1513;
  double t1527;
  double t1340;
  double t1400;
  double t1401;
  double t1428;
  double t1430;
  double t1436;
  double t1475;
  double t1476;
  double t1493;
  double t1499;
  double t1541;
  double t1545;
  double t1559;
  double t1565;
  double t1570;
  double t1571;
  double t1586;
  double t1602;
  double t1625;
  double t1629;
  double t1478;
  double t1551;
  double t1606;
  double t1616;
  double t1660;
  double t1661;
  double t1666;
  double t1669;
  double t1749;
  double t1754;
  double t1842;
  double t1843;
  double t1858;
  double t1866;
  double t1673;
  double t1687;
  double t1695;
  double t1703;
  double t1953;
  double t1954;
  double t1962;
  double t1965;
  double t1872;
  double t1882;
  double t1888;
  double t1919;
  double t1979;
  double t1985;
  double t1994;
  double t1995;
  double t1781;
  double t1783;
  double t1786;
  double t1787;
  double t1807;
  double t1813;
  double t1621;
  double t1645;
  double t1646;
  double t1651;
  double t1763;
  double t1767;
  double t1775;
  double t1776;
  double t2147;
  double t2160;
  double t2163;
  double t2166;
  double t2172;
  double t2183;
  double t2195;
  double t2232;
  double t2079;
  double t2081;
  double t2085;
  double t2092;
  double t2412;
  double t2421;
  double t2424;
  double t2428;
  double t2266;
  double t2272;
  double t2278;
  double t2293;
  double t2437;
  double t2458;
  double t2396;
  double t2426;
  double t2460;
  double t2464;
  double t2477;
  double t2482;
  double t2492;
  double t2498;
  double t2504;
  double t2505;
  double t2510;
  double t2511;
  double t2526;
  double t2529;
  double t2531;
  double t2534;
  double t2535;
  double t2540;
  double t2576;
  double t2617;
  double t2469;
  double t2521;
  double t2545;
  double t2546;
  double t2685;
  double t2693;
  double t2694;
  double t2702;
  double t2743;
  double t2745;
  double t1814;
  double t1817;
  double t1834;
  double t1838;
  double t2550;
  double t2650;
  double t2661;
  double t2665;
  double t2797;
  double t2803;
  double t2811;
  double t2812;
  double t2883;
  double t2884;
  double t2889;
  double t2891;
  double t2765;
  double t2766;
  double t2771;
  double t2774;
  double t2893;
  double t2896;
  double t2910;
  double t2911;
  double t2862;
  double t2864;
  double t2871;
  double t2875;
  double t2703;
  double t2710;
  double t2719;
  double t2724;
  double t2825;
  double t2829;
  double t2778;
  double t2780;
  double t2783;
  double t2786;
  double t3004;
  double t3007;
  double t3009;
  double t3018;
  double t3022;
  double t3023;
  double t3050;
  double t3054;
  t73 = Cos(var1[3]);
  t167 = Sin(var1[3]);
  t212 = Cos(var1[4]);
  t231 = Sin(var1[4]);
  t357 = Cos(var1[5]);
  t371 = Sin(var1[5]);
  t366 = t73*t357*t231;
  t373 = t167*t371;
  t380 = t366 + t373;
  t620 = Cos(var1[6]);
  t622 = -1.*t357*t167;
  t624 = t73*t231*t371;
  t629 = t622 + t624;
  t633 = Sin(var1[6]);
  t401 = t357*t167*t231;
  t418 = -1.*t73*t371;
  t419 = t401 + t418;
  t710 = -1.*t620;
  t734 = 1. + t710;
  t749 = 0.091*t734;
  t757 = 0. + t749;
  t777 = 0.091*t633;
  t780 = 0. + t777;
  t761 = t73*t357;
  t762 = t167*t231*t371;
  t766 = t761 + t762;
  t774 = t757*t766;
  t781 = t419*t780;
  t783 = 0. + var1[1] + t774 + t781;
  t807 = -1.*var1[2];
  t813 = -1.*t212*t757*t371;
  t815 = -1.*t212*t357*t780;
  t819 = 0. + t807 + t813 + t815;
  t820 = t620*t766;
  t821 = -1.*t419*t633;
  t848 = t820 + t821;
  t918 = t620*t419;
  t924 = t766*t633;
  t928 = t918 + t924;
  t15 = -1.*var1[0];
  t789 = t212*t620*t371;
  t794 = -1.*t212*t357*t633;
  t796 = t789 + t794;
  t632 = t620*t629;
  t646 = -1.*t380*t633;
  t673 = t632 + t646;
  t994 = -1.*t757*t629;
  t1006 = -1.*t380*t780;
  t1020 = 0. + t15 + t994 + t1006;
  t884 = t212*t357*t620;
  t885 = t212*t371*t633;
  t891 = t884 + t885;
  t1030 = t212*t757*t371;
  t1032 = t212*t357*t780;
  t1038 = 0. + var1[2] + t1030 + t1032;
  t696 = t620*t380;
  t701 = t629*t633;
  t703 = t696 + t701;
  t1116 = -1.*var1[1];
  t1123 = -1.*t757*t766;
  t1132 = -1.*t419*t780;
  t1138 = 0. + t1116 + t1123 + t1132;
  t1107 = t757*t629;
  t1108 = t380*t780;
  t1113 = 0. + var1[0] + t1107 + t1108;
  t1387 = Sin(var1[7]);
  t1315 = Cos(var1[7]);
  t1335 = -1.*t1315;
  t1336 = 1. + t1335;
  t1513 = 0.366501*t1387;
  t1527 = 0. + t1513;
  t1340 = -0.04500040093286238*t1336;
  t1400 = -0.930418*t1387;
  t1401 = 0. + t1400;
  t1428 = 0.07877663122399998*t1401;
  t1430 = -0.366501*t1387;
  t1436 = 0. + t1430;
  t1475 = 0.031030906668*t1436;
  t1476 = 0. + t1340 + t1428 + t1475;
  t1493 = -3.2909349868922137e-7*var1[7];
  t1499 = 0.03103092645718495*t1336;
  t1541 = -0.045000372235*t1527;
  t1545 = t1493 + t1499 + t1541;
  t1559 = 1.296332362046933e-7*var1[7];
  t1565 = 0.07877668146182712*t1336;
  t1570 = 0.930418*t1387;
  t1571 = 0. + t1570;
  t1586 = -0.045000372235*t1571;
  t1602 = t1559 + t1565 + t1586;
  t1625 = -0.134322983001*t1336;
  t1629 = 1. + t1625;
  t1478 = t231*t1476;
  t1551 = -1.*t891*t1545;
  t1606 = -1.*t796*t1602;
  t1616 = 0. + t807 + t813 + t815 + t1478 + t1551 + t1606;
  t1660 = t212*t167*t1476;
  t1661 = t928*t1545;
  t1666 = t848*t1602;
  t1669 = 0. + var1[1] + t774 + t781 + t1660 + t1661 + t1666;
  t1749 = -0.8656776547239999*t1336;
  t1754 = 1. + t1749;
  t1842 = -0.340999127418*t1336*t673;
  t1843 = t1629*t703;
  t1858 = t73*t212*t1527;
  t1866 = t1842 + t1843 + t1858;
  t1673 = -0.340999127418*t1336*t796;
  t1687 = t1629*t891;
  t1695 = -1.*t231*t1527;
  t1703 = t1673 + t1687 + t1695;
  t1953 = -1.*t231*t1476;
  t1954 = t891*t1545;
  t1962 = t796*t1602;
  t1965 = 0. + var1[2] + t1030 + t1032 + t1953 + t1954 + t1962;
  t1872 = t1754*t673;
  t1882 = -0.340999127418*t1336*t703;
  t1888 = t73*t212*t1571;
  t1919 = t1872 + t1882 + t1888;
  t1979 = -1.*t73*t212*t1476;
  t1985 = -1.*t703*t1545;
  t1994 = -1.*t673*t1602;
  t1995 = 0. + t15 + t994 + t1006 + t1979 + t1985 + t1994;
  t1781 = t1754*t796;
  t1783 = -0.340999127418*t1336*t891;
  t1786 = -1.*t231*t1571;
  t1787 = t1781 + t1783 + t1786;
  t1807 = -1.000000637725*t1336;
  t1813 = 1. + t1807;
  t1621 = -0.340999127418*t1336*t848;
  t1645 = t1629*t928;
  t1646 = t212*t167*t1527;
  t1651 = t1621 + t1645 + t1646;
  t1763 = t1754*t848;
  t1767 = -0.340999127418*t1336*t928;
  t1775 = t212*t167*t1571;
  t1776 = t1763 + t1767 + t1775;
  t2147 = -1.*t212*t167*t1476;
  t2160 = -1.*t928*t1545;
  t2163 = -1.*t848*t1602;
  t2166 = 0. + t1116 + t1123 + t1132 + t2147 + t2160 + t2163;
  t2172 = t73*t212*t1476;
  t2183 = t703*t1545;
  t2195 = t673*t1602;
  t2232 = 0. + var1[0] + t1107 + t1108 + t2172 + t2183 + t2195;
  t2079 = t212*t1813*t167;
  t2081 = t848*t1401;
  t2085 = t928*t1436;
  t2092 = t2079 + t2081 + t2085;
  t2412 = Cos(var1[8]);
  t2421 = -1.*t2412;
  t2424 = 1. + t2421;
  t2428 = Sin(var1[8]);
  t2266 = -1.*t1813*t231;
  t2272 = t796*t1401;
  t2278 = t891*t1436;
  t2293 = t2266 + t2272 + t2278;
  t2437 = -0.366501*t2428;
  t2458 = 0. + t2437;
  t2396 = 3.2909349868922137e-7*var1[8];
  t2426 = 0.055653945343889656*t2424;
  t2460 = -0.045000372235*t2458;
  t2464 = t2396 + t2426 + t2460;
  t2477 = -0.04500040093286238*t2424;
  t2482 = -0.930418*t2428;
  t2492 = 0. + t2482;
  t2498 = -0.141285834136*t2492;
  t2504 = 0.366501*t2428;
  t2505 = 0. + t2504;
  t2510 = 0.055653909852*t2505;
  t2511 = 0. + t2477 + t2498 + t2510;
  t2526 = 1.296332362046933e-7*var1[8];
  t2529 = -0.14128592423750855*t2424;
  t2531 = 0.930418*t2428;
  t2534 = 0. + t2531;
  t2535 = -0.045000372235*t2534;
  t2540 = t2526 + t2529 + t2535;
  t2576 = -0.134322983001*t2424;
  t2617 = 1. + t2576;
  t2469 = t1776*t2464;
  t2521 = t2092*t2511;
  t2545 = t1651*t2540;
  t2546 = 0. + var1[1] + t774 + t781 + t1660 + t1661 + t1666 + t2469 + t2521 + t2545;
  t2685 = -1.*t1787*t2464;
  t2693 = -1.*t2293*t2511;
  t2694 = -1.*t1703*t2540;
  t2702 = 0. + t807 + t813 + t815 + t1478 + t1551 + t1606 + t2685 + t2693 + t2694;
  t2743 = -0.8656776547239999*t2424;
  t2745 = 1. + t2743;
  t1814 = t73*t212*t1813;
  t1817 = t673*t1401;
  t1834 = t703*t1436;
  t1838 = t1814 + t1817 + t1834;
  t2550 = 0.340999127418*t2424*t1703;
  t2650 = t2617*t1787;
  t2661 = t2293*t2458;
  t2665 = t2550 + t2650 + t2661;
  t2797 = 0.340999127418*t2424*t1866;
  t2803 = t2617*t1919;
  t2811 = t1838*t2458;
  t2812 = t2797 + t2803 + t2811;
  t2883 = -1.*t1919*t2464;
  t2884 = -1.*t1838*t2511;
  t2889 = -1.*t1866*t2540;
  t2891 = 0. + t15 + t994 + t1006 + t1979 + t1985 + t1994 + t2883 + t2884 + t2889;
  t2765 = t2745*t1703;
  t2766 = 0.340999127418*t2424*t1787;
  t2771 = t2293*t2534;
  t2774 = t2765 + t2766 + t2771;
  t2893 = t1787*t2464;
  t2896 = t2293*t2511;
  t2910 = t1703*t2540;
  t2911 = 0. + var1[2] + t1030 + t1032 + t1953 + t1954 + t1962 + t2893 + t2896 + t2910;
  t2862 = t2745*t1866;
  t2864 = 0.340999127418*t2424*t1919;
  t2871 = t1838*t2534;
  t2875 = t2862 + t2864 + t2871;
  t2703 = 0.340999127418*t2424*t1651;
  t2710 = t2617*t1776;
  t2719 = t2092*t2458;
  t2724 = t2703 + t2710 + t2719;
  t2825 = -1.000000637725*t2424;
  t2829 = 1. + t2825;
  t2778 = t2745*t1651;
  t2780 = 0.340999127418*t2424*t1776;
  t2783 = t2092*t2534;
  t2786 = t2778 + t2780 + t2783;
  t3004 = -1.*t1776*t2464;
  t3007 = -1.*t2092*t2511;
  t3009 = -1.*t1651*t2540;
  t3018 = 0. + t1116 + t1123 + t1132 + t2147 + t2160 + t2163 + t3004 + t3007 + t3009;
  t3022 = t1919*t2464;
  t3023 = t1838*t2511;
  t3050 = t1866*t2540;
  t3054 = 0. + var1[0] + t1107 + t1108 + t2172 + t2183 + t2195 + t3022 + t3023 + t3050;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=1.;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=1.;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=var1[1];
  p_output1[19]=t15;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=-1.*t73*var1[2];
  p_output1[25]=-1.*t167*var1[2];
  p_output1[26]=t73*var1[0] + t167*var1[1];
  p_output1[27]=-1.*t167;
  p_output1[28]=t73;
  p_output1[29]=0;
  p_output1[30]=-1.*t231*var1[1] - 1.*t167*t212*var1[2];
  p_output1[31]=t231*var1[0] + t212*t73*var1[2];
  p_output1[32]=t167*t212*var1[0] - 1.*t212*t73*var1[1];
  p_output1[33]=t212*t73;
  p_output1[34]=t167*t212;
  p_output1[35]=-1.*t231;
  p_output1[36]=0.091*t380 + t231*var1[1] + t167*t212*var1[2];
  p_output1[37]=0.091*t419 - 1.*t231*var1[0] - 1.*t212*t73*var1[2];
  p_output1[38]=0.091*t212*t357 - 1.*t167*t212*var1[0] + t212*t73*var1[1];
  p_output1[39]=0. - 1.*t212*t73;
  p_output1[40]=0. - 1.*t167*t212;
  p_output1[41]=0. + t231;
  p_output1[42]=-0.041869*t673 - 0.016493*t703 - 0.084668*t212*t73 + 0.366501*(t783*t796 + t819*t848) - 0.930418*(t783*t891 + t819*t928);
  p_output1[43]=-0.084668*t167*t212 + 0.366501*(t1038*t673 + t1020*t796) - 0.041869*t848 - 0.930418*(t1038*t703 + t1020*t891) - 0.016493*t928;
  p_output1[44]=0.084668*t231 - 0.041869*t796 + 0.366501*(t1138*t673 + t1113*t848) - 0.016493*t891 - 0.930418*(t1138*t703 + t1113*t928);
  p_output1[45]=0. + 0.366501*t673 - 0.930418*t703;
  p_output1[46]=0. + 0.366501*t848 - 0.930418*t928;
  p_output1[47]=0. + 0.366501*t796 - 0.930418*t891;
  p_output1[48]=0.366501*(t1616*t1651 + t1669*t1703) + 0.930418*(t1616*t1776 + t1669*t1787) + 0.151852*t1838 - 0.041869*t1866 + 0.016493*t1919;
  p_output1[49]=-0.041869*t1651 + 0.016493*t1776 + 0.366501*(t1866*t1965 + t1703*t1995) + 0.930418*(t1919*t1965 + t1787*t1995) + 0.151852*t2092;
  p_output1[50]=-0.041869*t1703 + 0.016493*t1787 + 0.366501*(t1866*t2166 + t1651*t2232) + 0.930418*(t1919*t2166 + t1776*t2232) + 0.151852*t2293;
  p_output1[51]=0. + 0.366501*t1866 + 0.930418*t1919;
  p_output1[52]=0. + 0.366501*t1651 + 0.930418*t1776;
  p_output1[53]=0. + 0.366501*t1703 + 0.930418*t1787;
  p_output1[54]=-0.930418*(t2546*t2665 + t2702*t2724) - 0.366501*(t2546*t2774 + t2702*t2786) + 0.014606*t2812 - 0.236705*(t1866*t2492 + t1919*t2505 + t1838*t2829) - 0.03708*t2875;
  p_output1[55]=0.014606*t2724 - 0.03708*t2786 - 0.236705*(t1651*t2492 + t1776*t2505 + t2092*t2829) - 0.930418*(t2665*t2891 + t2812*t2911) - 0.366501*(t2774*t2891 + t2875*t2911);
  p_output1[56]=0.014606*t2665 - 0.03708*t2774 - 0.236705*(t1703*t2492 + t1787*t2505 + t2293*t2829) - 0.930418*(t2812*t3018 + t2724*t3054) - 0.366501*(t2875*t3018 + t2786*t3054);
  p_output1[57]=0. - 0.930418*t2812 - 0.366501*t2875;
  p_output1[58]=0. - 0.930418*t2724 - 0.366501*t2786;
  p_output1[59]=0. - 0.930418*t2665 - 0.366501*t2774;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
}



void Js_knee_joint_left_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
