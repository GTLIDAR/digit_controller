/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:56:48 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "AMWorld_left_hip_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1100;
  double t1126;
  double t1172;
  double t1030;
  double t1035;
  double t1097;
  double t1537;
  double t1209;
  double t1235;
  double t1321;
  double t1497;
  double t1568;
  double t1602;
  double t1612;
  double t1627;
  double t1974;
  double t1978;
  double t2009;
  double t2038;
  double t2137;
  double t2248;
  double t2287;
  double t2340;
  double t2441;
  double t2633;
  double t2713;
  double t2720;
  double t2741;
  double t2923;
  double t3044;
  double t3056;
  double t3199;
  double t3241;
  double t3249;
  double t3356;
  double t1690;
  double t1714;
  double t1789;
  double t2421;
  double t2491;
  double t2496;
  double t3290;
  double t3307;
  double t588;
  double t3467;
  double t3481;
  double t3586;
  double t3588;
  double t3759;
  double t3801;
  double t3806;
  double t3809;
  double t3897;
  double t3337;
  double t3826;
  double t3841;
  double t350;
  double t3914;
  double t3929;
  double t3941;
  double t4575;
  double t4584;
  double t4746;
  double t4759;
  double t4807;
  double t4834;
  double t4621;
  double t4801;
  double t4840;
  double t4842;
  double t5227;
  double t5266;
  double t5300;
  double t5338;
  double t5405;
  double t5407;
  double t5489;
  double t5490;
  double t5507;
  double t5462;
  double t5467;
  double t5516;
  double t5546;
  double t5559;
  double t5561;
  double t5564;
  double t5648;
  double t4118;
  double t5550;
  double t5658;
  double t5696;
  double t5737;
  double t5743;
  double t5744;
  double t4531;
  double t5807;
  double t5828;
  double t5830;
  double t5834;
  double t5966;
  double t5967;
  double t5983;
  double t5988;
  double t5989;
  double t5993;
  double t5999;
  double t6021;
  double t6023;
  double t5986;
  double t5996;
  double t6030;
  double t6033;
  double t6039;
  double t6109;
  double t6121;
  double t6171;
  double t6035;
  double t6173;
  double t6176;
  double t6214;
  double t6242;
  double t6246;
  double t6293;
  double t6294;
  double t6299;
  double t6306;
  double t6410;
  double t6406;
  double t6427;
  double t6431;
  double t6435;
  double t6408;
  double t6415;
  double t6416;
  double t6422;
  double t6445;
  double t6467;
  double t6471;
  double t6475;
  double t6484;
  double t6569;
  double t6606;
  double t6613;
  double t6621;
  double t6468;
  double t6487;
  double t6506;
  double t6507;
  double t6530;
  double t6541;
  double t6555;
  double t6558;
  double t19;
  double t3895;
  double t4005;
  double t4014;
  double t4053;
  double t4350;
  double t4365;
  double t4421;
  double t4502;
  double t4854;
  double t4869;
  double t4901;
  double t4904;
  double t4938;
  double t4947;
  double t4981;
  double t5000;
  double t5016;
  double t5118;
  double t5141;
  double t5152;
  double t5154;
  double t5181;
  double t5196;
  double t5327;
  double t5430;
  double t5455;
  double t5457;
  double t5715;
  double t5766;
  double t5785;
  double t5786;
  double t5791;
  double t5796;
  double t5801;
  double t5806;
  double t5840;
  double t5849;
  double t5856;
  double t5866;
  double t5874;
  double t5879;
  double t5887;
  double t5930;
  double t5947;
  double t5955;
  double t5963;
  double t6181;
  double t6251;
  double t6252;
  double t6265;
  double t6266;
  double t6277;
  double t6279;
  double t6289;
  double t6309;
  double t6310;
  double t6316;
  double t6318;
  double t6322;
  double t6333;
  double t6338;
  double t6342;
  double t6352;
  double t6359;
  double t6363;
  double t6379;
  double t6383;
  double t6392;
  double t6515;
  double t6568;
  double t6623;
  double t6625;
  double t6674;
  double t6686;
  double t6690;
  double t6703;
  double t6634;
  double t6638;
  double t6644;
  double t6647;
  double t6649;
  double t5195;
  double t5960;
  double t6393;
  double t6405;
  double t6889;
  double t6892;
  double t6904;
  double t6868;
  double t6871;
  double t6878;
  double t6886;
  double t6908;
  double t6913;
  double t6937;
  double t6954;
  double t6957;
  double t7006;
  double t7009;
  double t7011;
  double t7015;
  double t6936;
  double t6961;
  double t6967;
  double t6970;
  double t6973;
  double t6974;
  double t6992;
  double t6995;
  double t6719;
  double t6725;
  double t6727;
  double t6728;
  double t6971;
  double t7000;
  double t7019;
  double t7025;
  double t7080;
  double t7084;
  double t7086;
  double t7090;
  double t6765;
  double t6771;
  double t6794;
  double t6796;
  double t7029;
  double t7034;
  double t7073;
  double t7074;
  double t7075;
  double t7171;
  double t7176;
  double t7180;
  double t7188;
  double t7198;
  double t7203;
  double t7274;
  double t7275;
  double t7280;
  double t7283;
  double t7181;
  double t7210;
  double t7213;
  double t7215;
  double t7231;
  double t7245;
  double t7256;
  double t7261;
  double t7228;
  double t7266;
  double t7285;
  double t7288;
  double t7313;
  double t7315;
  double t7318;
  double t7325;
  double t7292;
  double t7303;
  double t7304;
  double t7306;
  double t7310;
  t1100 = Cos(var1[8]);
  t1126 = -1.*t1100;
  t1172 = 1. + t1126;
  t1030 = Cos(var1[7]);
  t1035 = -1.*t1030;
  t1097 = 1. + t1035;
  t1537 = Sin(var1[8]);
  t1209 = -0.8656776547239999*t1172;
  t1235 = 1. + t1209;
  t1321 = -0.657905*t1235;
  t1497 = 0.0883716288660118*t1172;
  t1568 = -0.930418*t1537;
  t1602 = 0. + t1568;
  t1612 = 0.707107*t1602;
  t1627 = t1321 + t1497 + t1612;
  t1974 = -0.134322983001*t1172;
  t1978 = 1. + t1974;
  t2009 = 0.259155*t1978;
  t2038 = -0.22434503092393926*t1172;
  t2137 = 0.366501*t1537;
  t2248 = 0. + t2137;
  t2287 = 0.707107*t2248;
  t2340 = t2009 + t2038 + t2287;
  t2441 = Sin(var1[7]);
  t2633 = -1.000000637725*t1172;
  t2713 = 1. + t2633;
  t2720 = 0.707107*t2713;
  t2741 = -0.366501*t1537;
  t2923 = 0. + t2741;
  t3044 = 0.259155*t2923;
  t3056 = 0.930418*t1537;
  t3199 = 0. + t3056;
  t3241 = -0.657905*t3199;
  t3249 = t2720 + t3044 + t3241;
  t3356 = Cos(var1[6]);
  t1690 = -0.340999127418*t1097*t1627;
  t1714 = -0.8656776547239999*t1097;
  t1789 = 1. + t1714;
  t2421 = t1789*t2340;
  t2491 = -0.930418*t2441;
  t2496 = 0. + t2491;
  t3290 = t2496*t3249;
  t3307 = 0. + t1690 + t2421 + t3290;
  t588 = Sin(var1[6]);
  t3467 = -0.134322983001*t1097;
  t3481 = 1. + t3467;
  t3586 = t3481*t1627;
  t3588 = -0.340999127418*t1097*t2340;
  t3759 = -0.366501*t2441;
  t3801 = 0. + t3759;
  t3806 = t3801*t3249;
  t3809 = 0. + t3586 + t3588 + t3806;
  t3897 = Cos(var1[5]);
  t3337 = -1.*t588*t3307;
  t3826 = t3356*t3809;
  t3841 = 0. + t3337 + t3826;
  t350 = Sin(var1[5]);
  t3914 = t3356*t3307;
  t3929 = t588*t3809;
  t3941 = 0. + t3914 + t3929;
  t4575 = 0.366501*t2441;
  t4584 = 0. + t4575;
  t4746 = 0.930418*t2441;
  t4759 = 0. + t4746;
  t4807 = -1.000000637725*t1097;
  t4834 = 1. + t4807;
  t4621 = t4584*t1627;
  t4801 = t4759*t2340;
  t4840 = t4834*t3249;
  t4842 = 0. + t4621 + t4801 + t4840;
  t5227 = -0.366501*t1235;
  t5266 = -0.3172717261340007*t1172;
  t5300 = t5227 + t5266;
  t5338 = -0.930418*t1978;
  t5405 = -0.12497652119782442*t1172;
  t5407 = t5338 + t5405;
  t5489 = -0.930418*t2923;
  t5490 = -0.366501*t3199;
  t5507 = t5489 + t5490;
  t5462 = -0.340999127418*t1097*t5300;
  t5467 = t1789*t5407;
  t5516 = t2496*t5507;
  t5546 = 0. + t5462 + t5467 + t5516;
  t5559 = t3481*t5300;
  t5561 = -0.340999127418*t1097*t5407;
  t5564 = t3801*t5507;
  t5648 = 0. + t5559 + t5561 + t5564;
  t4118 = Cos(var1[4]);
  t5550 = -1.*t588*t5546;
  t5658 = t3356*t5648;
  t5696 = 0. + t5550 + t5658;
  t5737 = t3356*t5546;
  t5743 = t588*t5648;
  t5744 = 0. + t5737 + t5743;
  t4531 = Sin(var1[4]);
  t5807 = t5300*t4584;
  t5828 = t5407*t4759;
  t5830 = t4834*t5507;
  t5834 = 0. + t5807 + t5828 + t5830;
  t5966 = 0.657905*t1235;
  t5967 = -0.0883716288660118*t1172;
  t5983 = t5966 + t5967 + t1612;
  t5988 = -0.259155*t1978;
  t5989 = 0.22434503092393926*t1172;
  t5993 = t5988 + t5989 + t2287;
  t5999 = -0.259155*t2923;
  t6021 = 0.657905*t3199;
  t6023 = t2720 + t5999 + t6021;
  t5986 = -0.340999127418*t1097*t5983;
  t5996 = t1789*t5993;
  t6030 = t2496*t6023;
  t6033 = 0. + t5986 + t5996 + t6030;
  t6039 = t3481*t5983;
  t6109 = -0.340999127418*t1097*t5993;
  t6121 = t3801*t6023;
  t6171 = 0. + t6039 + t6109 + t6121;
  t6035 = -1.*t588*t6033;
  t6173 = t3356*t6171;
  t6176 = 0. + t6035 + t6173;
  t6214 = t3356*t6033;
  t6242 = t588*t6171;
  t6246 = 0. + t6214 + t6242;
  t6293 = t4584*t5983;
  t6294 = t4759*t5993;
  t6299 = t4834*t6023;
  t6306 = 0. + t6293 + t6294 + t6299;
  t6410 = Cos(var1[3]);
  t6406 = Sin(var1[3]);
  t6427 = t6410*t3897*t4531;
  t6431 = t6406*t350;
  t6435 = t6427 + t6431;
  t6408 = -1.*t3897*t6406;
  t6415 = t6410*t4531*t350;
  t6416 = t6408 + t6415;
  t6422 = t3356*t6416;
  t6445 = -1.*t6435*t588;
  t6467 = t6422 + t6445;
  t6471 = t3356*t6435;
  t6475 = t6416*t588;
  t6484 = t6471 + t6475;
  t6569 = t6410*t4118*t4834;
  t6606 = t6467*t2496;
  t6613 = t6484*t3801;
  t6621 = t6569 + t6606 + t6613;
  t6468 = -0.340999127418*t1097*t6467;
  t6487 = t3481*t6484;
  t6506 = t6410*t4118*t4584;
  t6507 = t6468 + t6487 + t6506;
  t6530 = t1789*t6467;
  t6541 = -0.340999127418*t1097*t6484;
  t6555 = t6410*t4118*t4759;
  t6558 = t6530 + t6541 + t6555;
  t19 = -3.6361499999859603e-7*var2[8];
  t3895 = -1.*t350*t3841;
  t4005 = t3897*t3941;
  t4014 = 0. + t3895 + t4005;
  t4053 = var2[4]*t4014;
  t4350 = t3897*t3841;
  t4365 = t350*t3941;
  t4421 = 0. + t4350 + t4365;
  t4502 = t4118*t4421;
  t4854 = -1.*t4531*t4842;
  t4869 = 0. + t4502 + t4854;
  t4901 = var2[3]*t4869;
  t4904 = -0.930418*t1627;
  t4938 = 0.366501*t2340;
  t4947 = 0. + t4904 + t4938;
  t4981 = var2[7]*t4947;
  t5000 = -1.*t4584*t1627;
  t5016 = -1.*t4759*t2340;
  t5118 = -1.*t4834*t3249;
  t5141 = 0. + t5000 + t5016 + t5118;
  t5152 = var2[6]*t5141;
  t5154 = var2[5]*t4842;
  t5181 = t19 + t4053 + t4901 + t4981 + t5152 + t5154;
  t5196 = -1.000000637725*var2[8];
  t5327 = -0.930418*t5300;
  t5430 = 0.366501*t5407;
  t5455 = 0. + t5327 + t5430;
  t5457 = var2[7]*t5455;
  t5715 = -1.*t350*t5696;
  t5766 = t3897*t5744;
  t5785 = 0. + t5715 + t5766;
  t5786 = var2[4]*t5785;
  t5791 = t3897*t5696;
  t5796 = t350*t5744;
  t5801 = 0. + t5791 + t5796;
  t5806 = t4118*t5801;
  t5840 = -1.*t4531*t5834;
  t5849 = 0. + t5806 + t5840;
  t5856 = var2[3]*t5849;
  t5866 = -1.*t5300*t4584;
  t5874 = -1.*t5407*t4759;
  t5879 = -1.*t4834*t5507;
  t5887 = 0. + t5866 + t5874 + t5879;
  t5930 = var2[6]*t5887;
  t5947 = var2[5]*t5834;
  t5955 = t5196 + t5457 + t5786 + t5856 + t5930 + t5947;
  t5963 = 3.6361499999859603e-7*var2[8];
  t6181 = -1.*t350*t6176;
  t6251 = t3897*t6246;
  t6252 = 0. + t6181 + t6251;
  t6265 = var2[4]*t6252;
  t6266 = t3897*t6176;
  t6277 = t350*t6246;
  t6279 = 0. + t6266 + t6277;
  t6289 = t4118*t6279;
  t6309 = -1.*t4531*t6306;
  t6310 = 0. + t6289 + t6309;
  t6316 = var2[3]*t6310;
  t6318 = -0.930418*t5983;
  t6322 = 0.366501*t5993;
  t6333 = 0. + t6318 + t6322;
  t6338 = var2[7]*t6333;
  t6342 = -1.*t4584*t5983;
  t6352 = -1.*t4759*t5993;
  t6359 = -1.*t4834*t6023;
  t6363 = 0. + t6342 + t6352 + t6359;
  t6379 = var2[6]*t6363;
  t6383 = var2[5]*t6306;
  t6392 = t5963 + t6265 + t6316 + t6338 + t6379 + t6383;
  t6515 = 0.340999127418*t1172*t6507;
  t6568 = t1978*t6558;
  t6623 = t6621*t2923;
  t6625 = t6515 + t6568 + t6623;
  t6674 = t1235*t6507;
  t6686 = 0.340999127418*t1172*t6558;
  t6690 = t6621*t3199;
  t6703 = t6674 + t6686 + t6690;
  t6634 = t2713*t6621;
  t6638 = t6507*t1602;
  t6644 = t6558*t2248;
  t6647 = t6634 + t6638 + t6644;
  t6649 = 0.707107*t6647;
  t5195 = 0.01153*t5181;
  t5960 = 0.00015*t5955;
  t6393 = -0.00017*t6392;
  t6405 = t5195 + t5960 + t6393;
  t6889 = t3897*t6406*t4531;
  t6892 = -1.*t6410*t350;
  t6904 = t6889 + t6892;
  t6868 = t6410*t3897;
  t6871 = t6406*t4531*t350;
  t6878 = t6868 + t6871;
  t6886 = t3356*t6878;
  t6908 = -1.*t6904*t588;
  t6913 = t6886 + t6908;
  t6937 = t3356*t6904;
  t6954 = t6878*t588;
  t6957 = t6937 + t6954;
  t7006 = t4118*t4834*t6406;
  t7009 = t6913*t2496;
  t7011 = t6957*t3801;
  t7015 = t7006 + t7009 + t7011;
  t6936 = -0.340999127418*t1097*t6913;
  t6961 = t3481*t6957;
  t6967 = t4118*t6406*t4584;
  t6970 = t6936 + t6961 + t6967;
  t6973 = t1789*t6913;
  t6974 = -0.340999127418*t1097*t6957;
  t6992 = t4118*t6406*t4759;
  t6995 = t6973 + t6974 + t6992;
  t6719 = 0.00015*t5181;
  t6725 = 0.03396*t5955;
  t6727 = 0.00018*t6392;
  t6728 = t6719 + t6725 + t6727;
  t6971 = 0.340999127418*t1172*t6970;
  t7000 = t1978*t6995;
  t7019 = t7015*t2923;
  t7025 = t6971 + t7000 + t7019;
  t7080 = t1235*t6970;
  t7084 = 0.340999127418*t1172*t6995;
  t7086 = t7015*t3199;
  t7090 = t7080 + t7084 + t7086;
  t6765 = -0.00017*t5181;
  t6771 = 0.00018*t5955;
  t6794 = 0.03335*t6392;
  t6796 = t6765 + t6771 + t6794;
  t7029 = t2713*t7015;
  t7034 = t6970*t1602;
  t7073 = t6995*t2248;
  t7074 = t7029 + t7034 + t7073;
  t7075 = 0.707107*t7074;
  t7171 = t4118*t3356*t350;
  t7176 = -1.*t4118*t3897*t588;
  t7180 = t7171 + t7176;
  t7188 = t4118*t3897*t3356;
  t7198 = t4118*t350*t588;
  t7203 = t7188 + t7198;
  t7274 = -1.*t4834*t4531;
  t7275 = t7180*t2496;
  t7280 = t7203*t3801;
  t7283 = t7274 + t7275 + t7280;
  t7181 = -0.340999127418*t1097*t7180;
  t7210 = t3481*t7203;
  t7213 = -1.*t4531*t4584;
  t7215 = t7181 + t7210 + t7213;
  t7231 = t1789*t7180;
  t7245 = -0.340999127418*t1097*t7203;
  t7256 = -1.*t4531*t4759;
  t7261 = t7231 + t7245 + t7256;
  t7228 = 0.340999127418*t1172*t7215;
  t7266 = t1978*t7261;
  t7285 = t7283*t2923;
  t7288 = t7228 + t7266 + t7285;
  t7313 = t1235*t7215;
  t7315 = 0.340999127418*t1172*t7261;
  t7318 = t7283*t3199;
  t7325 = t7313 + t7315 + t7318;
  t7292 = t2713*t7283;
  t7303 = t7215*t1602;
  t7304 = t7261*t2248;
  t7306 = t7292 + t7303 + t7304;
  t7310 = 0.707107*t7306;
  p_output1[0]=t6405*(0.259155*t6625 + t6649 - 0.657905*t6703) + (-0.930418*t6625 - 0.366501*t6703)*t6728 + (-0.259155*t6625 + t6649 + 0.657905*t6703)*t6796;
  p_output1[1]=t6405*(0.259155*t7025 + t7075 - 0.657905*t7090) + t6728*(-0.930418*t7025 - 0.366501*t7090) + t6796*(-0.259155*t7025 + t7075 + 0.657905*t7090);
  p_output1[2]=t6405*(0.259155*t7288 + t7310 - 0.657905*t7325) + t6728*(-0.930418*t7288 - 0.366501*t7325) + t6796*(-0.259155*t7288 + t7310 + 0.657905*t7325);
}



void AMWorld_left_hip_pitch_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
