/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:44:45 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dT_hip_flexion_right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t56;
  double t339;
  double t280;
  double t298;
  double t304;
  double t988;
  double t827;
  double t865;
  double t1001;
  double t6;
  double t57;
  double t130;
  double t937;
  double t1027;
  double t1106;
  double t1130;
  double t1136;
  double t1141;
  double t1630;
  double t1652;
  double t1654;
  double t96;
  double t120;
  double t178;
  double t1109;
  double t1113;
  double t1124;
  double t1168;
  double t1189;
  double t1230;
  double t1301;
  double t1383;
  double t1386;
  double t1400;
  double t1424;
  double t1614;
  double t1624;
  double t1746;
  double t1768;
  double t1770;
  double t1789;
  double t1799;
  double t1812;
  double t1825;
  double t1846;
  double t1864;
  double t1868;
  double t1211;
  double t1217;
  double t2284;
  double t2272;
  double t2374;
  double t2388;
  double t2417;
  double t2437;
  double t2444;
  double t18;
  double t38;
  double t2408;
  double t2448;
  double t2465;
  double t2503;
  double t2511;
  double t2565;
  double t1655;
  double t1742;
  double t2470;
  double t2567;
  double t2571;
  double t1947;
  double t1987;
  double t2587;
  double t2612;
  double t2615;
  double t2009;
  double t2010;
  double t2630;
  double t2635;
  double t2642;
  double t2035;
  double t2066;
  double t2091;
  double t2094;
  double t2854;
  double t2862;
  double t2867;
  double t2849;
  double t2899;
  double t2900;
  double t2937;
  double t2957;
  double t2961;
  double t2901;
  double t2971;
  double t2972;
  double t2992;
  double t2998;
  double t3005;
  double t3027;
  double t3030;
  double t3031;
  double t3209;
  double t3222;
  double t3207;
  double t3246;
  double t3249;
  double t3293;
  double t3314;
  double t3317;
  double t3325;
  double t3327;
  double t3328;
  double t3329;
  double t3335;
  double t3451;
  double t3453;
  double t3466;
  double t3479;
  double t3494;
  double t3530;
  double t3535;
  double t3541;
  double t3555;
  double t3557;
  double t3558;
  double t3559;
  double t3715;
  double t3736;
  double t3738;
  double t3742;
  double t3751;
  double t3770;
  double t3739;
  double t3775;
  double t3783;
  double t3789;
  double t3792;
  double t3798;
  double t3713;
  double t3785;
  double t3801;
  double t3811;
  double t3819;
  double t3841;
  double t3842;
  double t3844;
  double t3855;
  double t3858;
  double t3863;
  double t3877;
  double t3992;
  double t3994;
  double t3998;
  double t4016;
  double t4017;
  double t4024;
  double t3989;
  double t4006;
  double t4027;
  double t4030;
  double t4033;
  double t4039;
  double t4043;
  double t4047;
  double t4054;
  double t4064;
  double t4065;
  double t4070;
  double t4310;
  double t4316;
  double t4318;
  double t4321;
  double t4333;
  double t4337;
  double t4343;
  double t4349;
  double t4334;
  double t4350;
  double t4355;
  double t4362;
  double t4368;
  double t4369;
  double t4380;
  double t4396;
  double t4399;
  double t4502;
  double t4506;
  double t4511;
  double t4499;
  double t4515;
  double t4518;
  double t4533;
  double t4538;
  double t4542;
  double t4521;
  double t4551;
  double t4558;
  double t4572;
  double t4575;
  double t4583;
  double t4592;
  double t4594;
  double t4596;
  double t4670;
  double t4671;
  double t4666;
  double t4673;
  double t4682;
  double t4697;
  double t4701;
  double t4706;
  double t4714;
  double t4730;
  double t4735;
  double t4737;
  double t4757;
  double t4813;
  double t4816;
  double t4820;
  double t4821;
  double t4829;
  double t4832;
  double t4849;
  double t4851;
  double t4865;
  double t4868;
  double t4890;
  double t4897;
  double t4982;
  double t4986;
  double t4990;
  double t4993;
  double t4994;
  double t4997;
  double t4991;
  double t5002;
  double t5010;
  double t5017;
  double t5033;
  double t5037;
  double t5046;
  double t5056;
  double t5058;
  double t5132;
  double t5137;
  double t5138;
  double t5154;
  double t5156;
  double t5157;
  double t5141;
  double t5163;
  double t5166;
  double t5169;
  double t5171;
  double t5172;
  double t5179;
  double t5184;
  double t5186;
  double t5290;
  double t5293;
  double t5295;
  double t5320;
  double t5322;
  double t5326;
  double t5370;
  double t5384;
  double t5390;
  double t5413;
  double t5552;
  double t5562;
  double t5574;
  double t5575;
  double t5605;
  double t5615;
  double t5616;
  double t5617;
  double t5629;
  double t5637;
  double t5638;
  double t5662;
  double t5846;
  double t5857;
  double t5866;
  double t5871;
  double t5874;
  double t5876;
  double t5844;
  double t5867;
  double t5881;
  double t5904;
  double t5917;
  double t5918;
  double t5920;
  double t5932;
  double t5941;
  double t5942;
  double t5952;
  double t5956;
  double t1198;
  double t1629;
  double t1869;
  double t1913;
  double t1989;
  double t2006;
  double t2012;
  double t2013;
  double t2016;
  double t2024;
  double t2090;
  double t2140;
  double t2142;
  double t2163;
  double t2573;
  double t2627;
  double t2657;
  double t2676;
  double t2705;
  double t2712;
  double t2723;
  double t2731;
  double t2735;
  double t2741;
  double t2761;
  double t2770;
  double t2803;
  double t2811;
  double t2984;
  double t3025;
  double t3044;
  double t3080;
  double t3116;
  double t3123;
  double t3137;
  double t3152;
  double t3165;
  double t3172;
  double t3175;
  double t3185;
  double t3193;
  double t3194;
  double t3256;
  double t3326;
  double t3353;
  double t3356;
  double t3364;
  double t3375;
  double t3376;
  double t3388;
  double t3390;
  double t3395;
  double t3401;
  double t3412;
  double t3422;
  double t3426;
  double t3487;
  double t3554;
  double t3565;
  double t3571;
  double t3576;
  double t3580;
  double t3587;
  double t3605;
  double t3609;
  double t3623;
  double t3642;
  double t3643;
  double t3644;
  double t3647;
  double t3818;
  double t3854;
  double t3891;
  double t3907;
  double t3911;
  double t3912;
  double t3915;
  double t3927;
  double t3937;
  double t3942;
  double t3944;
  double t3954;
  double t3962;
  double t3968;
  double t4032;
  double t4049;
  double t4076;
  double t4080;
  double t4159;
  double t4175;
  double t4176;
  double t4177;
  double t4186;
  double t4192;
  double t4197;
  double t4198;
  double t4203;
  double t4204;
  double t4215;
  double t4220;
  double t4222;
  double t4232;
  double t4250;
  double t4266;
  double t4267;
  double t4273;
  double t4276;
  double t4277;
  double t4287;
  double t4290;
  double t4291;
  double t4297;
  double t4360;
  double t4378;
  double t4420;
  double t4423;
  double t4443;
  double t4447;
  double t4456;
  double t4457;
  double t4461;
  double t4465;
  double t4473;
  double t4474;
  double t4477;
  double t4478;
  double t4564;
  double t4584;
  double t4604;
  double t4608;
  double t4612;
  double t4618;
  double t4621;
  double t4623;
  double t4625;
  double t4632;
  double t4635;
  double t4639;
  double t4642;
  double t4645;
  double t4695;
  double t4725;
  double t4762;
  double t4767;
  double t4768;
  double t4771;
  double t4773;
  double t4775;
  double t4778;
  double t4779;
  double t4783;
  double t4788;
  double t4789;
  double t4791;
  double t4823;
  double t4855;
  double t4900;
  double t4908;
  double t4909;
  double t4910;
  double t4914;
  double t4918;
  double t4925;
  double t4931;
  double t4932;
  double t4942;
  double t4948;
  double t4955;
  double t5012;
  double t5045;
  double t5059;
  double t5065;
  double t5071;
  double t5073;
  double t5079;
  double t5080;
  double t5081;
  double t5085;
  double t5086;
  double t5097;
  double t5101;
  double t5105;
  double t5168;
  double t5178;
  double t5193;
  double t5204;
  double t5220;
  double t5222;
  double t5223;
  double t5232;
  double t5235;
  double t5239;
  double t5243;
  double t5247;
  double t5262;
  double t5264;
  double t5309;
  double t5347;
  double t5421;
  double t5428;
  double t5443;
  double t5449;
  double t5450;
  double t5451;
  double t5456;
  double t5460;
  double t5471;
  double t5486;
  double t5496;
  double t5511;
  double t5577;
  double t5626;
  double t5674;
  double t5690;
  double t5710;
  double t5742;
  double t5744;
  double t5752;
  double t5761;
  double t5771;
  double t5778;
  double t5790;
  double t5803;
  double t5808;
  double t5911;
  double t5936;
  double t5967;
  double t5977;
  double t5983;
  double t5984;
  double t5987;
  double t5988;
  double t5992;
  double t5993;
  double t5997;
  double t6000;
  double t6004;
  double t6005;
  double t6742;
  double t6746;
  double t6749;
  double t6752;
  double t6671;
  double t6680;
  double t6801;
  double t6804;
  double t6813;
  double t6825;
  double t6760;
  double t6770;
  double t6774;
  double t6791;
  double t6861;
  double t6871;
  double t6872;
  double t6874;
  double t6841;
  double t6842;
  double t6848;
  double t6851;
  double t6898;
  double t6901;
  double t6906;
  double t6912;
  double t6697;
  double t6723;
  double t6732;
  double t6734;
  double t7031;
  double t7034;
  double t7039;
  double t7041;
  double t7043;
  double t7044;
  double t7053;
  double t7054;
  double t7056;
  double t7085;
  double t7087;
  double t7089;
  double t7103;
  double t7107;
  double t7109;
  double t7118;
  double t7119;
  double t7124;
  t56 = Cos(var1[3]);
  t339 = Cos(var1[4]);
  t280 = Cos(var1[18]);
  t298 = -1.*t280;
  t304 = 1. + t298;
  t988 = Cos(var1[17]);
  t827 = Cos(var1[5]);
  t865 = Sin(var1[17]);
  t1001 = Sin(var1[5]);
  t6 = Sin(var1[19]);
  t57 = Sin(var1[18]);
  t130 = Sin(var1[4]);
  t937 = -1.*t56*t339*t827*t865;
  t1027 = t988*t56*t339*t1001;
  t1106 = t937 + t1027;
  t1130 = t988*t56*t339*t827;
  t1136 = t56*t339*t865*t1001;
  t1141 = t1130 + t1136;
  t1630 = Cos(var1[19]);
  t1652 = -1.*t1630;
  t1654 = 1. + t1652;
  t96 = -0.366501*t57;
  t120 = 0. + t96;
  t178 = -1.*t56*t120*t130;
  t1109 = 0.340999127418*t304*t1106;
  t1113 = -0.134322983001*t304;
  t1124 = 1. + t1113;
  t1168 = t1124*t1141;
  t1189 = t178 + t1109 + t1168;
  t1230 = 0.930418*t57;
  t1301 = 0. + t1230;
  t1383 = -1.*t56*t1301*t130;
  t1386 = -0.8656776547239999*t304;
  t1400 = 1. + t1386;
  t1424 = t1400*t1106;
  t1614 = 0.340999127418*t304*t1141;
  t1624 = t1383 + t1424 + t1614;
  t1746 = -1.000000637725*t304;
  t1768 = 1. + t1746;
  t1770 = -1.*t1768*t56*t130;
  t1789 = -0.930418*t57;
  t1799 = 0. + t1789;
  t1812 = t1799*t1106;
  t1825 = 0.366501*t57;
  t1846 = 0. + t1825;
  t1864 = t1846*t1141;
  t1868 = t1770 + t1812 + t1864;
  t1211 = 0.366501*t6;
  t1217 = 0. + t1211;
  t2284 = Sin(var1[3]);
  t2272 = t56*t827*t130;
  t2374 = t2284*t1001;
  t2388 = t2272 + t2374;
  t2417 = t827*t2284;
  t2437 = -1.*t56*t130*t1001;
  t2444 = t2417 + t2437;
  t18 = 0.930418*t6;
  t38 = 0. + t18;
  t2408 = t865*t2388;
  t2448 = t988*t2444;
  t2465 = t2408 + t2448;
  t2503 = t988*t2388;
  t2511 = -1.*t865*t2444;
  t2565 = t2503 + t2511;
  t1655 = -1.000000637725*t1654;
  t1742 = 1. + t1655;
  t2470 = 0.340999127418*t304*t2465;
  t2567 = t1400*t2565;
  t2571 = t2470 + t2567;
  t1947 = -0.8656776547239999*t1654;
  t1987 = 1. + t1947;
  t2587 = t1124*t2465;
  t2612 = 0.340999127418*t304*t2565;
  t2615 = t2587 + t2612;
  t2009 = -0.930418*t6;
  t2010 = 0. + t2009;
  t2630 = t1846*t2465;
  t2635 = t1799*t2565;
  t2642 = t2630 + t2635;
  t2035 = -0.134322983001*t1654;
  t2066 = 1. + t2035;
  t2091 = -0.366501*t6;
  t2094 = 0. + t2091;
  t2854 = -1.*t827*t2284;
  t2862 = t56*t130*t1001;
  t2867 = t2854 + t2862;
  t2849 = -1.*t865*t2388;
  t2899 = t988*t2867;
  t2900 = t2849 + t2899;
  t2937 = -1.*t988*t2388;
  t2957 = -1.*t865*t2867;
  t2961 = t2937 + t2957;
  t2901 = 0.340999127418*t304*t2900;
  t2971 = t1400*t2961;
  t2972 = t2901 + t2971;
  t2992 = t1124*t2900;
  t2998 = 0.340999127418*t304*t2961;
  t3005 = t2992 + t2998;
  t3027 = t1846*t2900;
  t3030 = t1799*t2961;
  t3031 = t3027 + t3030;
  t3209 = t865*t2867;
  t3222 = t2503 + t3209;
  t3207 = t56*t339*t120;
  t3246 = t1124*t3222;
  t3249 = t3207 + t2901 + t3246;
  t3293 = t56*t339*t1301;
  t3314 = t1400*t2900;
  t3317 = 0.340999127418*t304*t3222;
  t3325 = t3293 + t3314 + t3317;
  t3327 = t1768*t56*t339;
  t3328 = t1799*t2900;
  t3329 = t1846*t3222;
  t3335 = t3327 + t3328 + t3329;
  t3451 = -1.000000637725*t56*t339*t57;
  t3453 = -0.930418*t280*t2900;
  t3466 = 0.366501*t280*t3222;
  t3479 = t3451 + t3453 + t3466;
  t3494 = -0.366501*t280*t56*t339;
  t3530 = 0.340999127418*t57*t2900;
  t3535 = -0.134322983001*t57*t3222;
  t3541 = t3494 + t3530 + t3535;
  t3555 = 0.930418*t280*t56*t339;
  t3557 = -0.8656776547239999*t57*t2900;
  t3558 = 0.340999127418*t57*t3222;
  t3559 = t3555 + t3557 + t3558;
  t3715 = -1.*t827*t2284*t130;
  t3736 = t56*t1001;
  t3738 = t3715 + t3736;
  t3742 = -1.*t56*t827;
  t3751 = -1.*t2284*t130*t1001;
  t3770 = t3742 + t3751;
  t3739 = -1.*t865*t3738;
  t3775 = t988*t3770;
  t3783 = t3739 + t3775;
  t3789 = t988*t3738;
  t3792 = t865*t3770;
  t3798 = t3789 + t3792;
  t3713 = -1.*t339*t120*t2284;
  t3785 = 0.340999127418*t304*t3783;
  t3801 = t1124*t3798;
  t3811 = t3713 + t3785 + t3801;
  t3819 = -1.*t339*t1301*t2284;
  t3841 = t1400*t3783;
  t3842 = 0.340999127418*t304*t3798;
  t3844 = t3819 + t3841 + t3842;
  t3855 = -1.*t1768*t339*t2284;
  t3858 = t1799*t3783;
  t3863 = t1846*t3798;
  t3877 = t3855 + t3858 + t3863;
  t3992 = -1.*t339*t827*t865*t2284;
  t3994 = t988*t339*t2284*t1001;
  t3998 = t3992 + t3994;
  t4016 = t988*t339*t827*t2284;
  t4017 = t339*t865*t2284*t1001;
  t4024 = t4016 + t4017;
  t3989 = -1.*t120*t2284*t130;
  t4006 = 0.340999127418*t304*t3998;
  t4027 = t1124*t4024;
  t4030 = t3989 + t4006 + t4027;
  t4033 = -1.*t1301*t2284*t130;
  t4039 = t1400*t3998;
  t4043 = 0.340999127418*t304*t4024;
  t4047 = t4033 + t4039 + t4043;
  t4054 = -1.*t1768*t2284*t130;
  t4064 = t1799*t3998;
  t4065 = t1846*t4024;
  t4070 = t4054 + t4064 + t4065;
  t4310 = t827*t2284*t130;
  t4316 = -1.*t56*t1001;
  t4318 = t4310 + t4316;
  t4321 = t865*t4318;
  t4333 = t4321 + t3775;
  t4337 = t988*t4318;
  t4343 = -1.*t865*t3770;
  t4349 = t4337 + t4343;
  t4334 = 0.340999127418*t304*t4333;
  t4350 = t1400*t4349;
  t4355 = t4334 + t4350;
  t4362 = t1124*t4333;
  t4368 = 0.340999127418*t304*t4349;
  t4369 = t4362 + t4368;
  t4380 = t1846*t4333;
  t4396 = t1799*t4349;
  t4399 = t4380 + t4396;
  t4502 = t56*t827;
  t4506 = t2284*t130*t1001;
  t4511 = t4502 + t4506;
  t4499 = -1.*t865*t4318;
  t4515 = t988*t4511;
  t4518 = t4499 + t4515;
  t4533 = -1.*t988*t4318;
  t4538 = -1.*t865*t4511;
  t4542 = t4533 + t4538;
  t4521 = 0.340999127418*t304*t4518;
  t4551 = t1400*t4542;
  t4558 = t4521 + t4551;
  t4572 = t1124*t4518;
  t4575 = 0.340999127418*t304*t4542;
  t4583 = t4572 + t4575;
  t4592 = t1846*t4518;
  t4594 = t1799*t4542;
  t4596 = t4592 + t4594;
  t4670 = t865*t4511;
  t4671 = t4337 + t4670;
  t4666 = t339*t120*t2284;
  t4673 = t1124*t4671;
  t4682 = t4666 + t4521 + t4673;
  t4697 = t339*t1301*t2284;
  t4701 = t1400*t4518;
  t4706 = 0.340999127418*t304*t4671;
  t4714 = t4697 + t4701 + t4706;
  t4730 = t1768*t339*t2284;
  t4735 = t1799*t4518;
  t4737 = t1846*t4671;
  t4757 = t4730 + t4735 + t4737;
  t4813 = -1.000000637725*t339*t57*t2284;
  t4816 = -0.930418*t280*t4518;
  t4820 = 0.366501*t280*t4671;
  t4821 = t4813 + t4816 + t4820;
  t4829 = -0.366501*t280*t339*t2284;
  t4832 = 0.340999127418*t57*t4518;
  t4849 = -0.134322983001*t57*t4671;
  t4851 = t4829 + t4832 + t4849;
  t4865 = 0.930418*t280*t339*t2284;
  t4868 = -0.8656776547239999*t57*t4518;
  t4890 = 0.340999127418*t57*t4671;
  t4897 = t4865 + t4868 + t4890;
  t4982 = -1.*t339*t827*t865;
  t4986 = t988*t339*t1001;
  t4990 = t4982 + t4986;
  t4993 = -1.*t988*t339*t827;
  t4994 = -1.*t339*t865*t1001;
  t4997 = t4993 + t4994;
  t4991 = 0.340999127418*t304*t4990;
  t5002 = t1400*t4997;
  t5010 = t4991 + t5002;
  t5017 = t1124*t4990;
  t5033 = 0.340999127418*t304*t4997;
  t5037 = t5017 + t5033;
  t5046 = t1846*t4990;
  t5056 = t1799*t4997;
  t5058 = t5046 + t5056;
  t5132 = t339*t827*t865;
  t5137 = -1.*t988*t339*t1001;
  t5138 = t5132 + t5137;
  t5154 = t988*t339*t827;
  t5156 = t339*t865*t1001;
  t5157 = t5154 + t5156;
  t5141 = 0.340999127418*t304*t5138;
  t5163 = t1400*t5157;
  t5166 = t5141 + t5163;
  t5169 = t1124*t5138;
  t5171 = 0.340999127418*t304*t5157;
  t5172 = t5169 + t5171;
  t5179 = t1846*t5138;
  t5184 = t1799*t5157;
  t5186 = t5179 + t5184;
  t5290 = -1.*t120*t130;
  t5293 = t1124*t5157;
  t5295 = t5290 + t4991 + t5293;
  t5320 = -1.*t1301*t130;
  t5322 = t1400*t4990;
  t5326 = t5320 + t5322 + t5171;
  t5370 = -1.*t1768*t130;
  t5384 = t1799*t4990;
  t5390 = t1846*t5157;
  t5413 = t5370 + t5384 + t5390;
  t5552 = 1.000000637725*t57*t130;
  t5562 = -0.930418*t280*t4990;
  t5574 = 0.366501*t280*t5157;
  t5575 = t5552 + t5562 + t5574;
  t5605 = 0.366501*t280*t130;
  t5615 = 0.340999127418*t57*t4990;
  t5616 = -0.134322983001*t57*t5157;
  t5617 = t5605 + t5615 + t5616;
  t5629 = -0.930418*t280*t130;
  t5637 = -0.8656776547239999*t57*t4990;
  t5638 = 0.340999127418*t57*t5157;
  t5662 = t5629 + t5637 + t5638;
  t5846 = t827*t865*t130;
  t5857 = -1.*t988*t130*t1001;
  t5866 = t5846 + t5857;
  t5871 = -1.*t988*t827*t130;
  t5874 = -1.*t865*t130*t1001;
  t5876 = t5871 + t5874;
  t5844 = -1.*t339*t120;
  t5867 = 0.340999127418*t304*t5866;
  t5881 = t1124*t5876;
  t5904 = t5844 + t5867 + t5881;
  t5917 = -1.*t339*t1301;
  t5918 = t1400*t5866;
  t5920 = 0.340999127418*t304*t5876;
  t5932 = t5917 + t5918 + t5920;
  t5941 = -1.*t1768*t339;
  t5942 = t1799*t5866;
  t5952 = t1846*t5876;
  t5956 = t5941 + t5942 + t5952;
  t1198 = t38*t1189;
  t1629 = t1217*t1624;
  t1869 = t1742*t1868;
  t1913 = t1198 + t1629 + t1869;
  t1989 = t1987*t1189;
  t2006 = -0.340999127418*t1654*t1624;
  t2012 = t2010*t1868;
  t2013 = t1989 + t2006 + t2012;
  t2016 = -0.657905*t2013;
  t2024 = -0.340999127418*t1654*t1189;
  t2090 = t2066*t1624;
  t2140 = t2094*t1868;
  t2142 = t2024 + t2090 + t2140;
  t2163 = -0.259155*t2142;
  t2573 = t1217*t2571;
  t2627 = t38*t2615;
  t2657 = t1742*t2642;
  t2676 = t2573 + t2627 + t2657;
  t2705 = -0.340999127418*t1654*t2571;
  t2712 = t1987*t2615;
  t2723 = t2010*t2642;
  t2731 = t2705 + t2712 + t2723;
  t2735 = -0.657905*t2731;
  t2741 = t2066*t2571;
  t2761 = -0.340999127418*t1654*t2615;
  t2770 = t2094*t2642;
  t2803 = t2741 + t2761 + t2770;
  t2811 = -0.259155*t2803;
  t2984 = t1217*t2972;
  t3025 = t38*t3005;
  t3044 = t1742*t3031;
  t3080 = t2984 + t3025 + t3044;
  t3116 = -0.340999127418*t1654*t2972;
  t3123 = t1987*t3005;
  t3137 = t2010*t3031;
  t3152 = t3116 + t3123 + t3137;
  t3165 = -0.657905*t3152;
  t3172 = t2066*t2972;
  t3175 = -0.340999127418*t1654*t3005;
  t3185 = t2094*t3031;
  t3193 = t3172 + t3175 + t3185;
  t3194 = -0.259155*t3193;
  t3256 = -0.8656776547239999*t6*t3249;
  t3326 = -0.340999127418*t6*t3325;
  t3353 = -0.930418*t1630*t3335;
  t3356 = t3256 + t3326 + t3353;
  t3364 = -0.657905*t3356;
  t3375 = -0.340999127418*t6*t3249;
  t3376 = -0.134322983001*t6*t3325;
  t3388 = -0.366501*t1630*t3335;
  t3390 = t3375 + t3376 + t3388;
  t3395 = -0.259155*t3390;
  t3401 = 0.930418*t1630*t3249;
  t3412 = 0.366501*t1630*t3325;
  t3422 = -1.000000637725*t6*t3335;
  t3426 = t3401 + t3412 + t3422;
  t3487 = t2094*t3479;
  t3554 = -0.340999127418*t1654*t3541;
  t3565 = t2066*t3559;
  t3571 = t3487 + t3554 + t3565;
  t3576 = -0.259155*t3571;
  t3580 = t2010*t3479;
  t3587 = t1987*t3541;
  t3605 = -0.340999127418*t1654*t3559;
  t3609 = t3580 + t3587 + t3605;
  t3623 = -0.657905*t3609;
  t3642 = t1742*t3479;
  t3643 = t38*t3541;
  t3644 = t1217*t3559;
  t3647 = t3642 + t3643 + t3644;
  t3818 = t38*t3811;
  t3854 = t1217*t3844;
  t3891 = t1742*t3877;
  t3907 = t3818 + t3854 + t3891;
  t3911 = t1987*t3811;
  t3912 = -0.340999127418*t1654*t3844;
  t3915 = t2010*t3877;
  t3927 = t3911 + t3912 + t3915;
  t3937 = -0.657905*t3927;
  t3942 = -0.340999127418*t1654*t3811;
  t3944 = t2066*t3844;
  t3954 = t2094*t3877;
  t3962 = t3942 + t3944 + t3954;
  t3968 = -0.259155*t3962;
  t4032 = t38*t4030;
  t4049 = t1217*t4047;
  t4076 = t1742*t4070;
  t4080 = t4032 + t4049 + t4076;
  t4159 = t1987*t4030;
  t4175 = -0.340999127418*t1654*t4047;
  t4176 = t2010*t4070;
  t4177 = t4159 + t4175 + t4176;
  t4186 = -0.657905*t4177;
  t4192 = -0.340999127418*t1654*t4030;
  t4197 = t2066*t4047;
  t4198 = t2094*t4070;
  t4203 = t4192 + t4197 + t4198;
  t4204 = -0.259155*t4203;
  t4215 = t38*t3249;
  t4220 = t1217*t3325;
  t4222 = t1742*t3335;
  t4232 = t4215 + t4220 + t4222;
  t4250 = t1987*t3249;
  t4266 = -0.340999127418*t1654*t3325;
  t4267 = t2010*t3335;
  t4273 = t4250 + t4266 + t4267;
  t4276 = -0.657905*t4273;
  t4277 = -0.340999127418*t1654*t3249;
  t4287 = t2066*t3325;
  t4290 = t2094*t3335;
  t4291 = t4277 + t4287 + t4290;
  t4297 = -0.259155*t4291;
  t4360 = t1217*t4355;
  t4378 = t38*t4369;
  t4420 = t1742*t4399;
  t4423 = t4360 + t4378 + t4420;
  t4443 = -0.340999127418*t1654*t4355;
  t4447 = t1987*t4369;
  t4456 = t2010*t4399;
  t4457 = t4443 + t4447 + t4456;
  t4461 = -0.657905*t4457;
  t4465 = t2066*t4355;
  t4473 = -0.340999127418*t1654*t4369;
  t4474 = t2094*t4399;
  t4477 = t4465 + t4473 + t4474;
  t4478 = -0.259155*t4477;
  t4564 = t1217*t4558;
  t4584 = t38*t4583;
  t4604 = t1742*t4596;
  t4608 = t4564 + t4584 + t4604;
  t4612 = -0.340999127418*t1654*t4558;
  t4618 = t1987*t4583;
  t4621 = t2010*t4596;
  t4623 = t4612 + t4618 + t4621;
  t4625 = -0.657905*t4623;
  t4632 = t2066*t4558;
  t4635 = -0.340999127418*t1654*t4583;
  t4639 = t2094*t4596;
  t4642 = t4632 + t4635 + t4639;
  t4645 = -0.259155*t4642;
  t4695 = -0.8656776547239999*t6*t4682;
  t4725 = -0.340999127418*t6*t4714;
  t4762 = -0.930418*t1630*t4757;
  t4767 = t4695 + t4725 + t4762;
  t4768 = -0.657905*t4767;
  t4771 = -0.340999127418*t6*t4682;
  t4773 = -0.134322983001*t6*t4714;
  t4775 = -0.366501*t1630*t4757;
  t4778 = t4771 + t4773 + t4775;
  t4779 = -0.259155*t4778;
  t4783 = 0.930418*t1630*t4682;
  t4788 = 0.366501*t1630*t4714;
  t4789 = -1.000000637725*t6*t4757;
  t4791 = t4783 + t4788 + t4789;
  t4823 = t2094*t4821;
  t4855 = -0.340999127418*t1654*t4851;
  t4900 = t2066*t4897;
  t4908 = t4823 + t4855 + t4900;
  t4909 = -0.259155*t4908;
  t4910 = t2010*t4821;
  t4914 = t1987*t4851;
  t4918 = -0.340999127418*t1654*t4897;
  t4925 = t4910 + t4914 + t4918;
  t4931 = -0.657905*t4925;
  t4932 = t1742*t4821;
  t4942 = t38*t4851;
  t4948 = t1217*t4897;
  t4955 = t4932 + t4942 + t4948;
  t5012 = t1217*t5010;
  t5045 = t38*t5037;
  t5059 = t1742*t5058;
  t5065 = t5012 + t5045 + t5059;
  t5071 = -0.340999127418*t1654*t5010;
  t5073 = t1987*t5037;
  t5079 = t2010*t5058;
  t5080 = t5071 + t5073 + t5079;
  t5081 = -0.657905*t5080;
  t5085 = t2066*t5010;
  t5086 = -0.340999127418*t1654*t5037;
  t5097 = t2094*t5058;
  t5101 = t5085 + t5086 + t5097;
  t5105 = -0.259155*t5101;
  t5168 = t1217*t5166;
  t5178 = t38*t5172;
  t5193 = t1742*t5186;
  t5204 = t5168 + t5178 + t5193;
  t5220 = -0.340999127418*t1654*t5166;
  t5222 = t1987*t5172;
  t5223 = t2010*t5186;
  t5232 = t5220 + t5222 + t5223;
  t5235 = -0.657905*t5232;
  t5239 = t2066*t5166;
  t5243 = -0.340999127418*t1654*t5172;
  t5247 = t2094*t5186;
  t5262 = t5239 + t5243 + t5247;
  t5264 = -0.259155*t5262;
  t5309 = -0.8656776547239999*t6*t5295;
  t5347 = -0.340999127418*t6*t5326;
  t5421 = -0.930418*t1630*t5413;
  t5428 = t5309 + t5347 + t5421;
  t5443 = -0.657905*t5428;
  t5449 = -0.340999127418*t6*t5295;
  t5450 = -0.134322983001*t6*t5326;
  t5451 = -0.366501*t1630*t5413;
  t5456 = t5449 + t5450 + t5451;
  t5460 = -0.259155*t5456;
  t5471 = 0.930418*t1630*t5295;
  t5486 = 0.366501*t1630*t5326;
  t5496 = -1.000000637725*t6*t5413;
  t5511 = t5471 + t5486 + t5496;
  t5577 = t2094*t5575;
  t5626 = -0.340999127418*t1654*t5617;
  t5674 = t2066*t5662;
  t5690 = t5577 + t5626 + t5674;
  t5710 = -0.259155*t5690;
  t5742 = t2010*t5575;
  t5744 = t1987*t5617;
  t5752 = -0.340999127418*t1654*t5662;
  t5761 = t5742 + t5744 + t5752;
  t5771 = -0.657905*t5761;
  t5778 = t1742*t5575;
  t5790 = t38*t5617;
  t5803 = t1217*t5662;
  t5808 = t5778 + t5790 + t5803;
  t5911 = t38*t5904;
  t5936 = t1217*t5932;
  t5967 = t1742*t5956;
  t5977 = t5911 + t5936 + t5967;
  t5983 = t1987*t5904;
  t5984 = -0.340999127418*t1654*t5932;
  t5987 = t2010*t5956;
  t5988 = t5983 + t5984 + t5987;
  t5992 = -0.657905*t5988;
  t5993 = -0.340999127418*t1654*t5904;
  t5997 = t2066*t5932;
  t6000 = t2094*t5956;
  t6004 = t5993 + t5997 + t6000;
  t6005 = -0.259155*t6004;
  t6742 = -1.*t988;
  t6746 = 1. + t6742;
  t6749 = -0.091*t6746;
  t6752 = 0. + t6749;
  t6671 = -0.091*t865;
  t6680 = 0. + t6671;
  t6801 = 3.2909349868922137e-7*var1[18];
  t6804 = 0.03103092645718495*t304;
  t6813 = -0.045000372235*t120;
  t6825 = t6801 + t6804 + t6813;
  t6760 = 1.296332362046933e-7*var1[18];
  t6770 = -0.07877668146182712*t304;
  t6774 = -0.045000372235*t1301;
  t6791 = t6760 + t6770 + t6774;
  t6861 = 3.2909349868922137e-7*var1[19];
  t6871 = -0.055653945343889656*t1654;
  t6872 = -0.045000372235*t2094;
  t6874 = t6861 + t6871 + t6872;
  t6841 = -1.296332362046933e-7*var1[19];
  t6842 = -0.14128592423750855*t1654;
  t6848 = -0.045000372235*t2010;
  t6851 = t6841 + t6842 + t6848;
  t6898 = -0.04500040093286238*t1654;
  t6901 = -0.055653909852*t1217;
  t6906 = -0.141285834136*t38;
  t6912 = 0. + t6898 + t6901 + t6906;
  t6697 = -0.04500040093286238*t304;
  t6723 = -0.07877663122399998*t1799;
  t6732 = 0.031030906668*t1846;
  t6734 = 0. + t6697 + t6723 + t6732;
  t7031 = 0.04186915633414423*t1630;
  t7034 = -0.14128592423750855*t6;
  t7039 = -1.296332362046933e-7 + t7031 + t7034;
  t7041 = 0.016492681424499736*t1630;
  t7043 = -0.055653945343889656*t6;
  t7044 = 3.2909349868922137e-7 + t7041 + t7043;
  t7053 = -0.15185209683981668*t1630;
  t7054 = -0.04500040093286238*t6;
  t7056 = t7053 + t7054;
  t7085 = 0.0846680539949003*t280;
  t7087 = -0.04500040093286238*t57;
  t7089 = t7085 + t7087;
  t7103 = -0.04186915633414423*t280;
  t7107 = -0.07877668146182712*t57;
  t7109 = 1.296332362046933e-7 + t7103 + t7107;
  t7118 = 0.016492681424499736*t280;
  t7119 = 0.03103092645718495*t57;
  t7124 = 3.2909349868922137e-7 + t7118 + t7119;
  p_output1[0]=(0.707107*t3907 + t3937 + t3968)*var2[3] + (0.707107*t1913 + t2016 + t2163)*var2[4] + (0.707107*t2676 + t2735 + t2811)*var2[5] + (0.707107*t3080 + t3165 + t3194)*var2[17] + (t3576 + t3623 + 0.707107*t3647)*var2[18] + (t3364 + t3395 + 0.707107*t3426)*var2[19];
  p_output1[1]=(0.707107*t4232 + t4276 + t4297)*var2[3] + (0.707107*t4080 + t4186 + t4204)*var2[4] + (0.707107*t4423 + t4461 + t4478)*var2[5] + (0.707107*t4608 + t4625 + t4645)*var2[17] + (t4909 + t4931 + 0.707107*t4955)*var2[18] + (t4768 + t4779 + 0.707107*t4791)*var2[19];
  p_output1[2]=(0.707107*t5977 + t5992 + t6005)*var2[4] + (0.707107*t5204 + t5235 + t5264)*var2[5] + (0.707107*t5065 + t5081 + t5105)*var2[17] + (t5710 + t5771 + 0.707107*t5808)*var2[18] + (t5443 + t5460 + 0.707107*t5511)*var2[19];
  p_output1[3]=0;
  p_output1[4]=(-0.707107*t3907 + t3937 + t3968)*var2[3] + (-0.707107*t1913 + t2016 + t2163)*var2[4] + (-0.707107*t2676 + t2735 + t2811)*var2[5] + (-0.707107*t3080 + t3165 + t3194)*var2[17] + (t3576 + t3623 - 0.707107*t3647)*var2[18] + (t3364 + t3395 - 0.707107*t3426)*var2[19];
  p_output1[5]=(-0.707107*t4232 + t4276 + t4297)*var2[3] + (-0.707107*t4080 + t4186 + t4204)*var2[4] + (-0.707107*t4423 + t4461 + t4478)*var2[5] + (-0.707107*t4608 + t4625 + t4645)*var2[17] + (t4909 + t4931 - 0.707107*t4955)*var2[18] + (t4768 + t4779 - 0.707107*t4791)*var2[19];
  p_output1[6]=(-0.707107*t5977 + t5992 + t6005)*var2[4] + (-0.707107*t5204 + t5235 + t5264)*var2[5] + (-0.707107*t5065 + t5081 + t5105)*var2[17] + (t5710 + t5771 - 0.707107*t5808)*var2[18] + (t5443 + t5460 - 0.707107*t5511)*var2[19];
  p_output1[7]=0;
  p_output1[8]=(-0.366501*t3927 + 0.930418*t3962)*var2[3] + (-0.366501*t2013 + 0.930418*t2142)*var2[4] + (-0.366501*t2731 + 0.930418*t2803)*var2[5] + (-0.366501*t3152 + 0.930418*t3193)*var2[17] + (0.930418*t3571 - 0.366501*t3609)*var2[18] + (-0.366501*t3356 + 0.930418*t3390)*var2[19];
  p_output1[9]=(-0.366501*t4273 + 0.930418*t4291)*var2[3] + (-0.366501*t4177 + 0.930418*t4203)*var2[4] + (-0.366501*t4457 + 0.930418*t4477)*var2[5] + (-0.366501*t4623 + 0.930418*t4642)*var2[17] + (0.930418*t4908 - 0.366501*t4925)*var2[18] + (-0.366501*t4767 + 0.930418*t4778)*var2[19];
  p_output1[10]=(-0.366501*t5988 + 0.930418*t6004)*var2[4] + (-0.366501*t5232 + 0.930418*t5262)*var2[5] + (-0.366501*t5080 + 0.930418*t5101)*var2[17] + (0.930418*t5690 - 0.366501*t5761)*var2[18] + (-0.366501*t5428 + 0.930418*t5456)*var2[19];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (-0.045*t3907 - 0.108789*t3927 - 0.138152*t3962 + t3738*t6680 - 1.*t2284*t339*t6734 + t3770*t6752 + t3783*t6791 + t3798*t6825 + t3811*t6851 + t3844*t6874 + t3877*t6912)*var2[3] + (-0.045*t1913 - 0.108789*t2013 - 0.138152*t2142 - 1.*t130*t56*t6734 + t1001*t339*t56*t6752 + t1106*t6791 + t1141*t6825 + t1189*t6851 + t1624*t6874 + t1868*t6912 + t339*t56*t6680*t827)*var2[4] + (-0.045*t2676 - 0.108789*t2731 - 0.138152*t2803 + t2444*t6680 + t2388*t6752 + t2565*t6791 + t2465*t6825 + t2615*t6851 + t2571*t6874 + t2642*t6912)*var2[5] + (-0.045*t3080 - 0.108789*t3152 - 0.138152*t3193 + t2961*t6791 + t2900*t6825 + t3005*t6851 + t2972*t6874 + t3031*t6912 - 0.091*t2867*t865 - 0.091*t2388*t988)*var2[17] + (-0.138152*t3571 - 0.108789*t3609 - 0.045*t3647 + t3541*t6851 + t3559*t6874 + t3479*t6912 + t339*t56*t7089 + t2900*t7109 + t3222*t7124)*var2[18] + (-0.108789*t3356 - 0.138152*t3390 - 0.045*t3426 + t3249*t7039 + t3325*t7044 + t3335*t7056)*var2[19];
  p_output1[13]=var2[1] + (-0.045*t4232 - 0.108789*t4273 - 0.138152*t4291 + t2388*t6680 + t339*t56*t6734 + t2867*t6752 + t2900*t6791 + t3222*t6825 + t3249*t6851 + t3325*t6874 + t3335*t6912)*var2[3] + (-0.045*t4080 - 0.108789*t4177 - 0.138152*t4203 - 1.*t130*t2284*t6734 + t1001*t2284*t339*t6752 + t3998*t6791 + t4024*t6825 + t4030*t6851 + t4047*t6874 + t4070*t6912 + t2284*t339*t6680*t827)*var2[4] + (-0.045*t4423 - 0.108789*t4457 - 0.138152*t4477 + t3770*t6680 + t4318*t6752 + t4349*t6791 + t4333*t6825 + t4369*t6851 + t4355*t6874 + t4399*t6912)*var2[5] + (-0.045*t4608 - 0.108789*t4623 - 0.138152*t4642 + t4542*t6791 + t4518*t6825 + t4583*t6851 + t4558*t6874 + t4596*t6912 - 0.091*t4511*t865 - 0.091*t4318*t988)*var2[17] + (-0.138152*t4908 - 0.108789*t4925 - 0.045*t4955 + t4851*t6851 + t4897*t6874 + t4821*t6912 + t2284*t339*t7089 + t4518*t7109 + t4671*t7124)*var2[18] + (-0.108789*t4767 - 0.138152*t4778 - 0.045*t4791 + t4682*t7039 + t4714*t7044 + t4757*t7056)*var2[19];
  p_output1[14]=var2[2] + (-0.045*t5977 - 0.108789*t5988 - 0.138152*t6004 - 1.*t339*t6734 - 1.*t1001*t130*t6752 + t5866*t6791 + t5876*t6825 + t5904*t6851 + t5932*t6874 + t5956*t6912 - 1.*t130*t6680*t827)*var2[4] + (-0.045*t5204 - 0.108789*t5232 - 0.138152*t5262 - 1.*t1001*t339*t6680 + t5157*t6791 + t5138*t6825 + t5172*t6851 + t5166*t6874 + t5186*t6912 + t339*t6752*t827)*var2[5] + (-0.045*t5065 - 0.108789*t5080 - 0.138152*t5101 + t4997*t6791 + t4990*t6825 + t5037*t6851 + t5010*t6874 + t5058*t6912 - 0.091*t1001*t339*t865 - 0.091*t339*t827*t988)*var2[17] + (-0.138152*t5690 - 0.108789*t5761 - 0.045*t5808 + t5617*t6851 + t5662*t6874 + t5575*t6912 - 1.*t130*t7089 + t4990*t7109 + t5157*t7124)*var2[18] + (-0.108789*t5428 - 0.138152*t5456 - 0.045*t5511 + t5295*t7039 + t5326*t7044 + t5413*t7056)*var2[19];
  p_output1[15]=0;
}



void dT_hip_flexion_right_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
