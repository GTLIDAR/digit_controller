/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:59:30 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_left_toe_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1069;
  double t940;
  double t1077;
  double t1035;
  double t1120;
  double t844;
  double t860;
  double t913;
  double t922;
  double t1307;
  double t1309;
  double t1313;
  double t1053;
  double t1138;
  double t1166;
  double t1331;
  double t528;
  double t698;
  double t836;
  double t1169;
  double t1352;
  double t1409;
  double t1455;
  double t1496;
  double t1511;
  double t1521;
  double t1523;
  double t1800;
  double t1801;
  double t1803;
  double t1826;
  double t1829;
  double t1834;
  double t1840;
  double t1848;
  double t1878;
  double t1880;
  double t1410;
  double t1441;
  double t1443;
  double t1513;
  double t1572;
  double t1576;
  double t1577;
  double t1644;
  double t1881;
  double t1684;
  double t1699;
  double t1720;
  double t1766;
  double t1772;
  double t1783;
  double t1788;
  double t1792;
  double t34;
  double t357;
  double t385;
  double t22;
  double t1646;
  double t1656;
  double t1665;
  double t1799;
  double t1889;
  double t1892;
  double t1954;
  double t1963;
  double t1980;
  double t2000;
  double t2001;
  double t2007;
  double t2025;
  double t2036;
  double t2081;
  double t2082;
  double t2089;
  double t2091;
  double t2092;
  double t2143;
  double t2144;
  double t2153;
  double t2167;
  double t2168;
  double t2169;
  double t2171;
  double t2172;
  double t2298;
  double t2303;
  double t2304;
  double t1966;
  double t1993;
  double t1994;
  double t2096;
  double t2108;
  double t2142;
  double t2181;
  double t2207;
  double t2246;
  double t2247;
  double t2252;
  double t2256;
  double t2265;
  double t2270;
  double t2271;
  double t2273;
  double t2308;
  double t2319;
  double t2327;
  double t2328;
  double t2333;
  double t2335;
  double t2336;
  double t2337;
  double t2339;
  double t2344;
  double t2364;
  double t2370;
  double t2381;
  double t9;
  double t26;
  double t29;
  double t2227;
  double t2232;
  double t2234;
  double t2297;
  double t2305;
  double t2306;
  double t2346;
  double t2355;
  double t2388;
  double t2389;
  double t2391;
  double t2403;
  double t2405;
  double t2406;
  double t2412;
  double t2414;
  double t2424;
  double t2427;
  double t2428;
  double t2429;
  double t2430;
  double t2431;
  double t2432;
  double t2440;
  double t13;
  double t17;
  double t2519;
  double t2520;
  double t2523;
  double t2508;
  double t2511;
  double t2512;
  double t2515;
  double t2526;
  double t2527;
  double t2529;
  double t2530;
  double t2533;
  double t2557;
  double t2559;
  double t2563;
  double t2565;
  double t2528;
  double t2535;
  double t2536;
  double t2538;
  double t2541;
  double t2542;
  double t2543;
  double t2546;
  double t2539;
  double t2552;
  double t2569;
  double t2574;
  double t2576;
  double t2578;
  double t2587;
  double t2588;
  double t2601;
  double t2605;
  double t2606;
  double t2607;
  double t2575;
  double t2593;
  double t2610;
  double t2611;
  double t2615;
  double t2617;
  double t2620;
  double t2624;
  double t2627;
  double t2631;
  double t2635;
  double t2636;
  double t2422;
  double t2423;
  double t2447;
  double t2448;
  double t2612;
  double t2625;
  double t2640;
  double t2641;
  double t2451;
  double t2452;
  double t2647;
  double t2652;
  double t2655;
  double t2657;
  double t2660;
  double t2663;
  double t2664;
  double t2665;
  double t2469;
  double t2470;
  double t2472;
  double t2479;
  double t2484;
  double t2500;
  double t2734;
  double t2736;
  double t2737;
  double t2739;
  double t2743;
  double t2751;
  double t2780;
  double t2782;
  double t2783;
  double t2784;
  double t2738;
  double t2753;
  double t2754;
  double t2757;
  double t2762;
  double t2768;
  double t2769;
  double t2776;
  double t2759;
  double t2779;
  double t2788;
  double t2791;
  double t2797;
  double t2800;
  double t2801;
  double t2806;
  double t2813;
  double t2815;
  double t2817;
  double t2818;
  double t2796;
  double t2811;
  double t2821;
  double t2823;
  double t2825;
  double t2830;
  double t2832;
  double t2835;
  double t2841;
  double t2842;
  double t2850;
  double t2856;
  double t2824;
  double t2836;
  double t2862;
  double t2866;
  double t2877;
  double t2879;
  double t2880;
  double t2885;
  double t2899;
  double t2900;
  double t2905;
  double t2908;
  double t2357;
  double t2415;
  double t2441;
  double t2443;
  double t2450;
  double t2459;
  double t2460;
  double t2463;
  double t2471;
  double t2480;
  double t2502;
  double t2503;
  double t2643;
  double t2658;
  double t2666;
  double t2670;
  double t2672;
  double t2681;
  double t2686;
  double t2687;
  double t2697;
  double t2710;
  double t2713;
  double t2728;
  double t2869;
  double t2891;
  double t2910;
  double t2912;
  double t2920;
  double t2921;
  double t2922;
  double t2929;
  double t2932;
  double t2936;
  double t2941;
  double t2943;
  t1069 = Cos(var1[3]);
  t940 = Cos(var1[5]);
  t1077 = Sin(var1[4]);
  t1035 = Sin(var1[3]);
  t1120 = Sin(var1[5]);
  t844 = Cos(var1[7]);
  t860 = -1.*t844;
  t913 = 1. + t860;
  t922 = Cos(var1[6]);
  t1307 = t1069*t940*t1077;
  t1309 = t1035*t1120;
  t1313 = t1307 + t1309;
  t1053 = -1.*t940*t1035;
  t1138 = t1069*t1077*t1120;
  t1166 = t1053 + t1138;
  t1331 = Sin(var1[6]);
  t528 = Cos(var1[8]);
  t698 = -1.*t528;
  t836 = 1. + t698;
  t1169 = t922*t1166;
  t1352 = -1.*t1313*t1331;
  t1409 = t1169 + t1352;
  t1455 = t922*t1313;
  t1496 = t1166*t1331;
  t1511 = t1455 + t1496;
  t1521 = Cos(var1[4]);
  t1523 = Sin(var1[7]);
  t1800 = -1.000000637725*t913;
  t1801 = 1. + t1800;
  t1803 = t1069*t1521*t1801;
  t1826 = -0.930418*t1523;
  t1829 = 0. + t1826;
  t1834 = t1409*t1829;
  t1840 = -0.366501*t1523;
  t1848 = 0. + t1840;
  t1878 = t1511*t1848;
  t1880 = t1803 + t1834 + t1878;
  t1410 = -0.340999127418*t913*t1409;
  t1441 = -0.134322983001*t913;
  t1443 = 1. + t1441;
  t1513 = t1443*t1511;
  t1572 = 0.366501*t1523;
  t1576 = 0. + t1572;
  t1577 = t1069*t1521*t1576;
  t1644 = t1410 + t1513 + t1577;
  t1881 = Sin(var1[8]);
  t1684 = -0.8656776547239999*t913;
  t1699 = 1. + t1684;
  t1720 = t1699*t1409;
  t1766 = -0.340999127418*t913*t1511;
  t1772 = 0.930418*t1523;
  t1783 = 0. + t1772;
  t1788 = t1069*t1521*t1783;
  t1792 = t1720 + t1766 + t1788;
  t34 = Cos(var1[9]);
  t357 = -1.*t34;
  t385 = 1. + t357;
  t22 = Sin(var1[10]);
  t1646 = 0.340999127418*t836*t1644;
  t1656 = -0.134322983001*t836;
  t1665 = 1. + t1656;
  t1799 = t1665*t1792;
  t1889 = -0.366501*t1881;
  t1892 = 0. + t1889;
  t1954 = t1880*t1892;
  t1963 = t1646 + t1799 + t1954;
  t1980 = Sin(var1[9]);
  t2000 = -1.000000637725*t836;
  t2001 = 1. + t2000;
  t2007 = t2001*t1880;
  t2025 = -0.930418*t1881;
  t2036 = 0. + t2025;
  t2081 = t1644*t2036;
  t2082 = 0.366501*t1881;
  t2089 = 0. + t2082;
  t2091 = t1792*t2089;
  t2092 = t2007 + t2081 + t2091;
  t2143 = -0.8656776547239999*t836;
  t2144 = 1. + t2143;
  t2153 = t2144*t1644;
  t2167 = 0.340999127418*t836*t1792;
  t2168 = 0.930418*t1881;
  t2169 = 0. + t2168;
  t2171 = t1880*t2169;
  t2172 = t2153 + t2167 + t2171;
  t2298 = Cos(var1[10]);
  t2303 = -1.*t2298;
  t2304 = 1. + t2303;
  t1966 = 0.340999127418*t385*t1963;
  t1993 = -0.930418*t1980;
  t1994 = 0. + t1993;
  t2096 = t1994*t2092;
  t2108 = -0.8656776547239999*t385;
  t2142 = 1. + t2108;
  t2181 = t2142*t2172;
  t2207 = t1966 + t2096 + t2181;
  t2246 = -0.134322983001*t385;
  t2247 = 1. + t2246;
  t2252 = t2247*t1963;
  t2256 = 0.366501*t1980;
  t2265 = 0. + t2256;
  t2270 = t2265*t2092;
  t2271 = 0.340999127418*t385*t2172;
  t2273 = t2252 + t2270 + t2271;
  t2308 = -0.366501*t1980;
  t2319 = 0. + t2308;
  t2327 = t2319*t1963;
  t2328 = -1.000000637725*t385;
  t2333 = 1. + t2328;
  t2335 = t2333*t2092;
  t2336 = 0.930418*t1980;
  t2337 = 0. + t2336;
  t2339 = t2337*t2172;
  t2344 = t2327 + t2335 + t2339;
  t2364 = Cos(var1[11]);
  t2370 = -1.*t2364;
  t2381 = 1. + t2370;
  t9 = Sin(var1[11]);
  t26 = 0.930418*t22;
  t29 = 0. + t26;
  t2227 = t29*t2207;
  t2232 = -0.366501*t22;
  t2234 = 0. + t2232;
  t2297 = t2234*t2273;
  t2305 = -1.000000637725*t2304;
  t2306 = 1. + t2305;
  t2346 = t2306*t2344;
  t2355 = t2227 + t2297 + t2346;
  t2388 = -0.8656776547239999*t2304;
  t2389 = 1. + t2388;
  t2391 = t2389*t2207;
  t2403 = 0.340999127418*t2304*t2273;
  t2405 = -0.930418*t22;
  t2406 = 0. + t2405;
  t2412 = t2406*t2344;
  t2414 = t2391 + t2403 + t2412;
  t2424 = 0.340999127418*t2304*t2207;
  t2427 = -0.134322983001*t2304;
  t2428 = 1. + t2427;
  t2429 = t2428*t2273;
  t2430 = 0.366501*t22;
  t2431 = 0. + t2430;
  t2432 = t2431*t2344;
  t2440 = t2424 + t2429 + t2432;
  t13 = 0.366501*t9;
  t17 = 0. + t13;
  t2519 = t940*t1035*t1077;
  t2520 = -1.*t1069*t1120;
  t2523 = t2519 + t2520;
  t2508 = t1069*t940;
  t2511 = t1035*t1077*t1120;
  t2512 = t2508 + t2511;
  t2515 = t922*t2512;
  t2526 = -1.*t2523*t1331;
  t2527 = t2515 + t2526;
  t2529 = t922*t2523;
  t2530 = t2512*t1331;
  t2533 = t2529 + t2530;
  t2557 = t1521*t1801*t1035;
  t2559 = t2527*t1829;
  t2563 = t2533*t1848;
  t2565 = t2557 + t2559 + t2563;
  t2528 = -0.340999127418*t913*t2527;
  t2535 = t1443*t2533;
  t2536 = t1521*t1035*t1576;
  t2538 = t2528 + t2535 + t2536;
  t2541 = t1699*t2527;
  t2542 = -0.340999127418*t913*t2533;
  t2543 = t1521*t1035*t1783;
  t2546 = t2541 + t2542 + t2543;
  t2539 = 0.340999127418*t836*t2538;
  t2552 = t1665*t2546;
  t2569 = t2565*t1892;
  t2574 = t2539 + t2552 + t2569;
  t2576 = t2001*t2565;
  t2578 = t2538*t2036;
  t2587 = t2546*t2089;
  t2588 = t2576 + t2578 + t2587;
  t2601 = t2144*t2538;
  t2605 = 0.340999127418*t836*t2546;
  t2606 = t2565*t2169;
  t2607 = t2601 + t2605 + t2606;
  t2575 = 0.340999127418*t385*t2574;
  t2593 = t1994*t2588;
  t2610 = t2142*t2607;
  t2611 = t2575 + t2593 + t2610;
  t2615 = t2247*t2574;
  t2617 = t2265*t2588;
  t2620 = 0.340999127418*t385*t2607;
  t2624 = t2615 + t2617 + t2620;
  t2627 = t2319*t2574;
  t2631 = t2333*t2588;
  t2635 = t2337*t2607;
  t2636 = t2627 + t2631 + t2635;
  t2422 = -0.134322983001*t2381;
  t2423 = 1. + t2422;
  t2447 = -0.930418*t9;
  t2448 = 0. + t2447;
  t2612 = t29*t2611;
  t2625 = t2234*t2624;
  t2640 = t2306*t2636;
  t2641 = t2612 + t2625 + t2640;
  t2451 = -0.8656776547239999*t2381;
  t2452 = 1. + t2451;
  t2647 = t2389*t2611;
  t2652 = 0.340999127418*t2304*t2624;
  t2655 = t2406*t2636;
  t2657 = t2647 + t2652 + t2655;
  t2660 = 0.340999127418*t2304*t2611;
  t2663 = t2428*t2624;
  t2664 = t2431*t2636;
  t2665 = t2660 + t2663 + t2664;
  t2469 = -1.000000637725*t2381;
  t2470 = 1. + t2469;
  t2472 = 0.930418*t9;
  t2479 = 0. + t2472;
  t2484 = -0.366501*t9;
  t2500 = 0. + t2484;
  t2734 = t1521*t922*t1120;
  t2736 = -1.*t1521*t940*t1331;
  t2737 = t2734 + t2736;
  t2739 = t1521*t940*t922;
  t2743 = t1521*t1120*t1331;
  t2751 = t2739 + t2743;
  t2780 = -1.*t1801*t1077;
  t2782 = t2737*t1829;
  t2783 = t2751*t1848;
  t2784 = t2780 + t2782 + t2783;
  t2738 = -0.340999127418*t913*t2737;
  t2753 = t1443*t2751;
  t2754 = -1.*t1077*t1576;
  t2757 = t2738 + t2753 + t2754;
  t2762 = t1699*t2737;
  t2768 = -0.340999127418*t913*t2751;
  t2769 = -1.*t1077*t1783;
  t2776 = t2762 + t2768 + t2769;
  t2759 = 0.340999127418*t836*t2757;
  t2779 = t1665*t2776;
  t2788 = t2784*t1892;
  t2791 = t2759 + t2779 + t2788;
  t2797 = t2001*t2784;
  t2800 = t2757*t2036;
  t2801 = t2776*t2089;
  t2806 = t2797 + t2800 + t2801;
  t2813 = t2144*t2757;
  t2815 = 0.340999127418*t836*t2776;
  t2817 = t2784*t2169;
  t2818 = t2813 + t2815 + t2817;
  t2796 = 0.340999127418*t385*t2791;
  t2811 = t1994*t2806;
  t2821 = t2142*t2818;
  t2823 = t2796 + t2811 + t2821;
  t2825 = t2247*t2791;
  t2830 = t2265*t2806;
  t2832 = 0.340999127418*t385*t2818;
  t2835 = t2825 + t2830 + t2832;
  t2841 = t2319*t2791;
  t2842 = t2333*t2806;
  t2850 = t2337*t2818;
  t2856 = t2841 + t2842 + t2850;
  t2824 = t29*t2823;
  t2836 = t2234*t2835;
  t2862 = t2306*t2856;
  t2866 = t2824 + t2836 + t2862;
  t2877 = t2389*t2823;
  t2879 = 0.340999127418*t2304*t2835;
  t2880 = t2406*t2856;
  t2885 = t2877 + t2879 + t2880;
  t2899 = 0.340999127418*t2304*t2823;
  t2900 = t2428*t2835;
  t2905 = t2431*t2856;
  t2908 = t2899 + t2900 + t2905;
  t2357 = t17*t2355;
  t2415 = 0.340999127418*t2381*t2414;
  t2441 = t2423*t2440;
  t2443 = t2357 + t2415 + t2441;
  t2450 = t2448*t2355;
  t2459 = t2452*t2414;
  t2460 = 0.340999127418*t2381*t2440;
  t2463 = t2450 + t2459 + t2460;
  t2471 = t2470*t2355;
  t2480 = t2479*t2414;
  t2502 = t2500*t2440;
  t2503 = t2471 + t2480 + t2502;
  t2643 = t17*t2641;
  t2658 = 0.340999127418*t2381*t2657;
  t2666 = t2423*t2665;
  t2670 = t2643 + t2658 + t2666;
  t2672 = t2448*t2641;
  t2681 = t2452*t2657;
  t2686 = 0.340999127418*t2381*t2665;
  t2687 = t2672 + t2681 + t2686;
  t2697 = t2470*t2641;
  t2710 = t2479*t2657;
  t2713 = t2500*t2665;
  t2728 = t2697 + t2710 + t2713;
  t2869 = t17*t2866;
  t2891 = 0.340999127418*t2381*t2885;
  t2910 = t2423*t2908;
  t2912 = t2869 + t2891 + t2910;
  t2920 = t2448*t2866;
  t2921 = t2452*t2885;
  t2922 = 0.340999127418*t2381*t2908;
  t2929 = t2920 + t2921 + t2922;
  t2932 = t2470*t2866;
  t2936 = t2479*t2885;
  t2941 = t2500*t2908;
  t2943 = t2932 + t2936 + t2941;
  p_output1[0]=-0.218018*t2443 + 0.553471*t2463 + 0.803828*t2503;
  p_output1[1]=-0.218018*t2670 + 0.553471*t2687 + 0.803828*t2728;
  p_output1[2]=-0.218018*t2912 + 0.553471*t2929 + 0.803828*t2943;
  p_output1[3]=-0.294604*t2443 + 0.747896*t2463 - 0.594863*t2503;
  p_output1[4]=-0.294604*t2670 + 0.747896*t2687 - 0.594863*t2728;
  p_output1[5]=-0.294604*t2912 + 0.747896*t2929 - 0.594863*t2943;
  p_output1[6]=-0.930418*t2443 - 0.366501*t2463;
  p_output1[7]=-0.930418*t2670 - 0.366501*t2687;
  p_output1[8]=-0.930418*t2912 - 0.366501*t2929;
}



void R_left_toe_pitch_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
