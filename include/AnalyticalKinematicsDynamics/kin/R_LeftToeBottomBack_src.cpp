/*
 * Automatically Generated from Mathematica.
 * Thu 10 Nov 2022 14:34:38 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_LeftToeBottomBack_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1324;
  double t1253;
  double t1329;
  double t1279;
  double t1336;
  double t1161;
  double t1167;
  double t1206;
  double t1240;
  double t1374;
  double t1378;
  double t1440;
  double t1283;
  double t1344;
  double t1348;
  double t1472;
  double t1111;
  double t1134;
  double t1154;
  double t1349;
  double t1547;
  double t1551;
  double t1638;
  double t1643;
  double t1653;
  double t1708;
  double t1709;
  double t1900;
  double t1903;
  double t1908;
  double t1914;
  double t1917;
  double t1918;
  double t1921;
  double t1924;
  double t1988;
  double t2004;
  double t1552;
  double t1579;
  double t1634;
  double t1667;
  double t1710;
  double t1717;
  double t1725;
  double t1764;
  double t2007;
  double t1793;
  double t1802;
  double t1811;
  double t1821;
  double t1823;
  double t1824;
  double t1826;
  double t1881;
  double t824;
  double t1036;
  double t1090;
  double t556;
  double t1777;
  double t1788;
  double t1792;
  double t1896;
  double t2016;
  double t2026;
  double t2029;
  double t2049;
  double t2065;
  double t2068;
  double t2073;
  double t2075;
  double t2076;
  double t2077;
  double t2079;
  double t2085;
  double t2093;
  double t2154;
  double t2160;
  double t2184;
  double t2186;
  double t2187;
  double t2188;
  double t2205;
  double t2208;
  double t2215;
  double t2217;
  double t2324;
  double t2325;
  double t2331;
  double t2056;
  double t2066;
  double t2067;
  double t2174;
  double t2182;
  double t2183;
  double t2219;
  double t2229;
  double t2269;
  double t2276;
  double t2278;
  double t2281;
  double t2284;
  double t2292;
  double t2297;
  double t2298;
  double t2339;
  double t2346;
  double t2352;
  double t2353;
  double t2354;
  double t2365;
  double t2374;
  double t2376;
  double t2378;
  double t2380;
  double t2396;
  double t2397;
  double t2399;
  double t167;
  double t182;
  double t184;
  double t227;
  double t346;
  double t636;
  double t783;
  double t2236;
  double t2242;
  double t2250;
  double t2299;
  double t2332;
  double t2336;
  double t2382;
  double t2389;
  double t2408;
  double t2411;
  double t2413;
  double t2414;
  double t2427;
  double t2435;
  double t2437;
  double t2438;
  double t2449;
  double t2452;
  double t2453;
  double t2461;
  double t2473;
  double t2474;
  double t2476;
  double t2487;
  double t439;
  double t454;
  double t2395;
  double t2442;
  double t2444;
  double t2447;
  double t2492;
  double t2494;
  double t2503;
  double t2504;
  double t2520;
  double t2522;
  double t2528;
  double t2531;
  double t2534;
  double t2535;
  double t206;
  double t2545;
  double t2552;
  double t2558;
  double t2560;
  double t2561;
  double t2563;
  double t2567;
  double t2570;
  double t2572;
  double t2575;
  double t2608;
  double t2496;
  double t278;
  double t323;
  double t2683;
  double t2695;
  double t2697;
  double t2662;
  double t2671;
  double t2676;
  double t2678;
  double t2699;
  double t2701;
  double t2712;
  double t2714;
  double t2715;
  double t2739;
  double t2740;
  double t2742;
  double t2744;
  double t2705;
  double t2720;
  double t2721;
  double t2722;
  double t2726;
  double t2730;
  double t2732;
  double t2737;
  double t2724;
  double t2738;
  double t2748;
  double t2750;
  double t2755;
  double t2756;
  double t2757;
  double t2758;
  double t2761;
  double t2764;
  double t2765;
  double t2768;
  double t2752;
  double t2760;
  double t2769;
  double t2779;
  double t2785;
  double t2787;
  double t2788;
  double t2791;
  double t2807;
  double t2811;
  double t2817;
  double t2822;
  double t2497;
  double t2502;
  double t2783;
  double t2801;
  double t2827;
  double t2831;
  double t2836;
  double t2837;
  double t2845;
  double t2846;
  double t2850;
  double t2851;
  double t2852;
  double t2857;
  double t2541;
  double t2544;
  double t2590;
  double t2597;
  double t2832;
  double t2847;
  double t2861;
  double t2862;
  double t2609;
  double t2611;
  double t2867;
  double t2868;
  double t2870;
  double t2871;
  double t2613;
  double t2614;
  double t2874;
  double t2876;
  double t2879;
  double t2883;
  double t2620;
  double t2622;
  double t2626;
  double t2627;
  double t2629;
  double t2632;
  double t2940;
  double t2941;
  double t2945;
  double t2967;
  double t2968;
  double t2970;
  double t2985;
  double t2986;
  double t2990;
  double t2992;
  double t2965;
  double t2971;
  double t2972;
  double t2974;
  double t2979;
  double t2980;
  double t2981;
  double t2982;
  double t2978;
  double t2983;
  double t2994;
  double t2997;
  double t3003;
  double t3004;
  double t3007;
  double t3011;
  double t3019;
  double t3020;
  double t3023;
  double t3026;
  double t3001;
  double t3016;
  double t3028;
  double t3031;
  double t3040;
  double t3041;
  double t3042;
  double t3044;
  double t3051;
  double t3057;
  double t3061;
  double t3064;
  double t3037;
  double t3048;
  double t3067;
  double t3068;
  double t3073;
  double t3078;
  double t3079;
  double t3081;
  double t3087;
  double t3088;
  double t3090;
  double t3092;
  double t3070;
  double t3086;
  double t3093;
  double t3097;
  double t3103;
  double t3104;
  double t3106;
  double t3108;
  double t3113;
  double t3118;
  double t3120;
  double t3121;
  double t2604;
  double t2612;
  double t2616;
  double t2617;
  double t2623;
  double t2628;
  double t2641;
  double t2645;
  double t2899;
  double t2901;
  double t2902;
  double t2906;
  double t2914;
  double t2925;
  double t2926;
  double t2933;
  double t3130;
  double t3131;
  double t3134;
  double t3138;
  double t3148;
  double t3150;
  double t3155;
  double t3156;
  double t2495;
  double t2537;
  double t2583;
  double t2584;
  double t2865;
  double t2872;
  double t2892;
  double t2896;
  double t3102;
  double t3109;
  double t3122;
  double t3126;
  t1324 = Cos(var1[3]);
  t1253 = Cos(var1[5]);
  t1329 = Sin(var1[4]);
  t1279 = Sin(var1[3]);
  t1336 = Sin(var1[5]);
  t1161 = Cos(var1[7]);
  t1167 = -1.*t1161;
  t1206 = 1. + t1167;
  t1240 = Cos(var1[6]);
  t1374 = t1324*t1253*t1329;
  t1378 = t1279*t1336;
  t1440 = t1374 + t1378;
  t1283 = -1.*t1253*t1279;
  t1344 = t1324*t1329*t1336;
  t1348 = t1283 + t1344;
  t1472 = Sin(var1[6]);
  t1111 = Cos(var1[8]);
  t1134 = -1.*t1111;
  t1154 = 1. + t1134;
  t1349 = t1240*t1348;
  t1547 = -1.*t1440*t1472;
  t1551 = t1349 + t1547;
  t1638 = t1240*t1440;
  t1643 = t1348*t1472;
  t1653 = t1638 + t1643;
  t1708 = Cos(var1[4]);
  t1709 = Sin(var1[7]);
  t1900 = -1.000000637725*t1206;
  t1903 = 1. + t1900;
  t1908 = t1324*t1708*t1903;
  t1914 = -0.930418*t1709;
  t1917 = 0. + t1914;
  t1918 = t1551*t1917;
  t1921 = -0.366501*t1709;
  t1924 = 0. + t1921;
  t1988 = t1653*t1924;
  t2004 = t1908 + t1918 + t1988;
  t1552 = -0.340999127418*t1206*t1551;
  t1579 = -0.134322983001*t1206;
  t1634 = 1. + t1579;
  t1667 = t1634*t1653;
  t1710 = 0.366501*t1709;
  t1717 = 0. + t1710;
  t1725 = t1324*t1708*t1717;
  t1764 = t1552 + t1667 + t1725;
  t2007 = Sin(var1[8]);
  t1793 = -0.8656776547239999*t1206;
  t1802 = 1. + t1793;
  t1811 = t1802*t1551;
  t1821 = -0.340999127418*t1206*t1653;
  t1823 = 0.930418*t1709;
  t1824 = 0. + t1823;
  t1826 = t1324*t1708*t1824;
  t1881 = t1811 + t1821 + t1826;
  t824 = Cos(var1[9]);
  t1036 = -1.*t824;
  t1090 = 1. + t1036;
  t556 = Sin(var1[10]);
  t1777 = 0.340999127418*t1154*t1764;
  t1788 = -0.134322983001*t1154;
  t1792 = 1. + t1788;
  t1896 = t1792*t1881;
  t2016 = -0.366501*t2007;
  t2026 = 0. + t2016;
  t2029 = t2004*t2026;
  t2049 = t1777 + t1896 + t2029;
  t2065 = Sin(var1[9]);
  t2068 = -1.000000637725*t1154;
  t2073 = 1. + t2068;
  t2075 = t2073*t2004;
  t2076 = -0.930418*t2007;
  t2077 = 0. + t2076;
  t2079 = t1764*t2077;
  t2085 = 0.366501*t2007;
  t2093 = 0. + t2085;
  t2154 = t1881*t2093;
  t2160 = t2075 + t2079 + t2154;
  t2184 = -0.8656776547239999*t1154;
  t2186 = 1. + t2184;
  t2187 = t2186*t1764;
  t2188 = 0.340999127418*t1154*t1881;
  t2205 = 0.930418*t2007;
  t2208 = 0. + t2205;
  t2215 = t2004*t2208;
  t2217 = t2187 + t2188 + t2215;
  t2324 = Cos(var1[10]);
  t2325 = -1.*t2324;
  t2331 = 1. + t2325;
  t2056 = 0.340999127418*t1090*t2049;
  t2066 = -0.930418*t2065;
  t2067 = 0. + t2066;
  t2174 = t2067*t2160;
  t2182 = -0.8656776547239999*t1090;
  t2183 = 1. + t2182;
  t2219 = t2183*t2217;
  t2229 = t2056 + t2174 + t2219;
  t2269 = -0.134322983001*t1090;
  t2276 = 1. + t2269;
  t2278 = t2276*t2049;
  t2281 = 0.366501*t2065;
  t2284 = 0. + t2281;
  t2292 = t2284*t2160;
  t2297 = 0.340999127418*t1090*t2217;
  t2298 = t2278 + t2292 + t2297;
  t2339 = -0.366501*t2065;
  t2346 = 0. + t2339;
  t2352 = t2346*t2049;
  t2353 = -1.000000637725*t1090;
  t2354 = 1. + t2353;
  t2365 = t2354*t2160;
  t2374 = 0.930418*t2065;
  t2376 = 0. + t2374;
  t2378 = t2376*t2217;
  t2380 = t2352 + t2365 + t2378;
  t2396 = Cos(var1[11]);
  t2397 = -1.*t2396;
  t2399 = 1. + t2397;
  t167 = Cos(var1[12]);
  t182 = -1.*t167;
  t184 = 1. + t182;
  t227 = Sin(var1[12]);
  t346 = Sin(var1[11]);
  t636 = 0.930418*t556;
  t783 = 0. + t636;
  t2236 = t783*t2229;
  t2242 = -0.366501*t556;
  t2250 = 0. + t2242;
  t2299 = t2250*t2298;
  t2332 = -1.000000637725*t2331;
  t2336 = 1. + t2332;
  t2382 = t2336*t2380;
  t2389 = t2236 + t2299 + t2382;
  t2408 = -0.8656776547239999*t2331;
  t2411 = 1. + t2408;
  t2413 = t2411*t2229;
  t2414 = 0.340999127418*t2331*t2298;
  t2427 = -0.930418*t556;
  t2435 = 0. + t2427;
  t2437 = t2435*t2380;
  t2438 = t2413 + t2414 + t2437;
  t2449 = 0.340999127418*t2331*t2229;
  t2452 = -0.134322983001*t2331;
  t2453 = 1. + t2452;
  t2461 = t2453*t2298;
  t2473 = 0.366501*t556;
  t2474 = 0. + t2473;
  t2476 = t2474*t2380;
  t2487 = t2449 + t2461 + t2476;
  t439 = 0.366501*t346;
  t454 = 0. + t439;
  t2395 = t454*t2389;
  t2442 = 0.340999127418*t2399*t2438;
  t2444 = -0.134322983001*t2399;
  t2447 = 1. + t2444;
  t2492 = t2447*t2487;
  t2494 = t2395 + t2442 + t2492;
  t2503 = -0.930418*t346;
  t2504 = 0. + t2503;
  t2520 = t2504*t2389;
  t2522 = -0.8656776547239999*t2399;
  t2528 = 1. + t2522;
  t2531 = t2528*t2438;
  t2534 = 0.340999127418*t2399*t2487;
  t2535 = t2520 + t2531 + t2534;
  t206 = -0.175248972904*t184;
  t2545 = -1.000000637725*t2399;
  t2552 = 1. + t2545;
  t2558 = t2552*t2389;
  t2560 = 0.930418*t346;
  t2561 = 0. + t2560;
  t2563 = t2561*t2438;
  t2567 = -0.366501*t346;
  t2570 = 0. + t2567;
  t2572 = t2570*t2487;
  t2575 = t2558 + t2563 + t2572;
  t2608 = -0.120666640478*t184;
  t2496 = 0.444895486988*t184;
  t278 = 0.553471*t227;
  t323 = t206 + t278;
  t2683 = t1253*t1279*t1329;
  t2695 = -1.*t1324*t1336;
  t2697 = t2683 + t2695;
  t2662 = t1324*t1253;
  t2671 = t1279*t1329*t1336;
  t2676 = t2662 + t2671;
  t2678 = t1240*t2676;
  t2699 = -1.*t2697*t1472;
  t2701 = t2678 + t2699;
  t2712 = t1240*t2697;
  t2714 = t2676*t1472;
  t2715 = t2712 + t2714;
  t2739 = t1708*t1903*t1279;
  t2740 = t2701*t1917;
  t2742 = t2715*t1924;
  t2744 = t2739 + t2740 + t2742;
  t2705 = -0.340999127418*t1206*t2701;
  t2720 = t1634*t2715;
  t2721 = t1708*t1279*t1717;
  t2722 = t2705 + t2720 + t2721;
  t2726 = t1802*t2701;
  t2730 = -0.340999127418*t1206*t2715;
  t2732 = t1708*t1279*t1824;
  t2737 = t2726 + t2730 + t2732;
  t2724 = 0.340999127418*t1154*t2722;
  t2738 = t1792*t2737;
  t2748 = t2744*t2026;
  t2750 = t2724 + t2738 + t2748;
  t2755 = t2073*t2744;
  t2756 = t2722*t2077;
  t2757 = t2737*t2093;
  t2758 = t2755 + t2756 + t2757;
  t2761 = t2186*t2722;
  t2764 = 0.340999127418*t1154*t2737;
  t2765 = t2744*t2208;
  t2768 = t2761 + t2764 + t2765;
  t2752 = 0.340999127418*t1090*t2750;
  t2760 = t2067*t2758;
  t2769 = t2183*t2768;
  t2779 = t2752 + t2760 + t2769;
  t2785 = t2276*t2750;
  t2787 = t2284*t2758;
  t2788 = 0.340999127418*t1090*t2768;
  t2791 = t2785 + t2787 + t2788;
  t2807 = t2346*t2750;
  t2811 = t2354*t2758;
  t2817 = t2376*t2768;
  t2822 = t2807 + t2811 + t2817;
  t2497 = 0.218018*t227;
  t2502 = t2496 + t2497;
  t2783 = t783*t2779;
  t2801 = t2250*t2791;
  t2827 = t2336*t2822;
  t2831 = t2783 + t2801 + t2827;
  t2836 = t2411*t2779;
  t2837 = 0.340999127418*t2331*t2791;
  t2845 = t2435*t2822;
  t2846 = t2836 + t2837 + t2845;
  t2850 = 0.340999127418*t2331*t2779;
  t2851 = t2453*t2791;
  t2852 = t2474*t2822;
  t2857 = t2850 + t2851 + t2852;
  t2541 = -0.353861996165*t184;
  t2544 = 1. + t2541;
  t2590 = -0.952469601425*t184;
  t2597 = 1. + t2590;
  t2832 = t454*t2831;
  t2847 = 0.340999127418*t2399*t2846;
  t2861 = t2447*t2857;
  t2862 = t2832 + t2847 + t2861;
  t2609 = 0.803828*t227;
  t2611 = t2608 + t2609;
  t2867 = t2504*t2831;
  t2868 = t2528*t2846;
  t2870 = 0.340999127418*t2399*t2857;
  t2871 = t2867 + t2868 + t2870;
  t2613 = -0.553471*t227;
  t2614 = t206 + t2613;
  t2874 = t2552*t2831;
  t2876 = t2561*t2846;
  t2879 = t2570*t2857;
  t2883 = t2874 + t2876 + t2879;
  t2620 = -0.803828*t227;
  t2622 = t2608 + t2620;
  t2626 = -0.693671301908*t184;
  t2627 = 1. + t2626;
  t2629 = -0.218018*t227;
  t2632 = t2496 + t2629;
  t2940 = t1708*t1240*t1336;
  t2941 = -1.*t1708*t1253*t1472;
  t2945 = t2940 + t2941;
  t2967 = t1708*t1253*t1240;
  t2968 = t1708*t1336*t1472;
  t2970 = t2967 + t2968;
  t2985 = -1.*t1903*t1329;
  t2986 = t2945*t1917;
  t2990 = t2970*t1924;
  t2992 = t2985 + t2986 + t2990;
  t2965 = -0.340999127418*t1206*t2945;
  t2971 = t1634*t2970;
  t2972 = -1.*t1329*t1717;
  t2974 = t2965 + t2971 + t2972;
  t2979 = t1802*t2945;
  t2980 = -0.340999127418*t1206*t2970;
  t2981 = -1.*t1329*t1824;
  t2982 = t2979 + t2980 + t2981;
  t2978 = 0.340999127418*t1154*t2974;
  t2983 = t1792*t2982;
  t2994 = t2992*t2026;
  t2997 = t2978 + t2983 + t2994;
  t3003 = t2073*t2992;
  t3004 = t2974*t2077;
  t3007 = t2982*t2093;
  t3011 = t3003 + t3004 + t3007;
  t3019 = t2186*t2974;
  t3020 = 0.340999127418*t1154*t2982;
  t3023 = t2992*t2208;
  t3026 = t3019 + t3020 + t3023;
  t3001 = 0.340999127418*t1090*t2997;
  t3016 = t2067*t3011;
  t3028 = t2183*t3026;
  t3031 = t3001 + t3016 + t3028;
  t3040 = t2276*t2997;
  t3041 = t2284*t3011;
  t3042 = 0.340999127418*t1090*t3026;
  t3044 = t3040 + t3041 + t3042;
  t3051 = t2346*t2997;
  t3057 = t2354*t3011;
  t3061 = t2376*t3026;
  t3064 = t3051 + t3057 + t3061;
  t3037 = t783*t3031;
  t3048 = t2250*t3044;
  t3067 = t2336*t3064;
  t3068 = t3037 + t3048 + t3067;
  t3073 = t2411*t3031;
  t3078 = 0.340999127418*t2331*t3044;
  t3079 = t2435*t3064;
  t3081 = t3073 + t3078 + t3079;
  t3087 = 0.340999127418*t2331*t3031;
  t3088 = t2453*t3044;
  t3090 = t2474*t3064;
  t3092 = t3087 + t3088 + t3090;
  t3070 = t454*t3068;
  t3086 = 0.340999127418*t2399*t3081;
  t3093 = t2447*t3092;
  t3097 = t3070 + t3086 + t3093;
  t3103 = t2504*t3068;
  t3104 = t2528*t3081;
  t3106 = 0.340999127418*t2399*t3092;
  t3108 = t3103 + t3104 + t3106;
  t3113 = t2552*t3068;
  t3118 = t2561*t3081;
  t3120 = t2570*t3092;
  t3121 = t3113 + t3118 + t3120;
  t2604 = t2597*t2494;
  t2612 = t2611*t2535;
  t2616 = t2614*t2575;
  t2617 = t2604 + t2612 + t2616;
  t2623 = t2622*t2494;
  t2628 = t2627*t2535;
  t2641 = t2632*t2575;
  t2645 = t2623 + t2628 + t2641;
  t2899 = t2597*t2862;
  t2901 = t2611*t2871;
  t2902 = t2614*t2883;
  t2906 = t2899 + t2901 + t2902;
  t2914 = t2622*t2862;
  t2925 = t2627*t2871;
  t2926 = t2632*t2883;
  t2933 = t2914 + t2925 + t2926;
  t3130 = t2597*t3097;
  t3131 = t2611*t3108;
  t3134 = t2614*t3121;
  t3138 = t3130 + t3131 + t3134;
  t3148 = t2622*t3097;
  t3150 = t2627*t3108;
  t3155 = t2632*t3121;
  t3156 = t3148 + t3150 + t3155;
  t2495 = t323*t2494;
  t2537 = t2502*t2535;
  t2583 = t2544*t2575;
  t2584 = t2495 + t2537 + t2583;
  t2865 = t323*t2862;
  t2872 = t2502*t2871;
  t2892 = t2544*t2883;
  t2896 = t2865 + t2872 + t2892;
  t3102 = t323*t3097;
  t3109 = t2502*t3108;
  t3122 = t2544*t3121;
  t3126 = t3102 + t3109 + t3122;
  p_output1[0]=0.993567*t2584 - 0.041508*t2617 + 0.105375*t2645;
  p_output1[1]=0.993567*t2896 - 0.041508*t2906 + 0.105375*t2933;
  p_output1[2]=0.993567*t3126 - 0.041508*t3138 + 0.105375*t3156;
  p_output1[3]=0.930418*t2617 + 0.366501*t2645;
  p_output1[4]=0.930418*t2906 + 0.366501*t2933;
  p_output1[5]=0.930418*t3138 + 0.366501*t3156;
  p_output1[6]=-0.113255*t2584 - 0.364143*t2617 + 0.924432*t2645;
  p_output1[7]=-0.113255*t2896 - 0.364143*t2906 + 0.924432*t2933;
  p_output1[8]=-0.113255*t3126 - 0.364143*t3138 + 0.924432*t3156;
}



void R_LeftToeBottomBack_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
