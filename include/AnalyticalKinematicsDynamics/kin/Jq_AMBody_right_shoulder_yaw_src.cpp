/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:22:03 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jq_AMBody_right_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t456;
  double t521;
  double t722;
  double t893;
  double t981;
  double t205;
  double t2095;
  double t873;
  double t1671;
  double t1709;
  double t1890;
  double t790;
  double t831;
  double t847;
  double t912;
  double t950;
  double t968;
  double t987;
  double t1039;
  double t1076;
  double t1556;
  double t2012;
  double t2022;
  double t2067;
  double t2156;
  double t2318;
  double t2319;
  double t2353;
  double t2389;
  double t2488;
  double t2554;
  double t2624;
  double t2638;
  double t2673;
  double t2690;
  double t2889;
  double t2910;
  double t2912;
  double t3115;
  double t3147;
  double t3154;
  double t3462;
  double t3263;
  double t3268;
  double t3292;
  double t3307;
  double t3340;
  double t3382;
  double t3440;
  double t3448;
  double t3261;
  double t3485;
  double t3502;
  double t3541;
  double t3562;
  double t3569;
  double t3603;
  double t3703;
  double t3706;
  double t40;
  double t246;
  double t253;
  double t1967;
  double t2000;
  double t2573;
  double t2614;
  double t3216;
  double t3260;
  double t3938;
  double t3958;
  double t3972;
  double t3983;
  double t3986;
  double t4006;
  double t4012;
  double t4030;
  double t4036;
  double t4085;
  double t4109;
  double t4130;
  double t4181;
  double t4207;
  double t4208;
  double t4211;
  double t4219;
  double t3852;
  double t4489;
  double t4496;
  double t4497;
  double t4520;
  double t4530;
  double t4533;
  double t4562;
  double t4579;
  double t4580;
  double t4657;
  double t4668;
  double t4676;
  double t4677;
  double t4689;
  double t4693;
  double t4706;
  double t4707;
  double t3981;
  double t4010;
  double t4037;
  double t4041;
  double t4062;
  double t4193;
  double t4224;
  double t4238;
  double t4249;
  double t4256;
  double t4289;
  double t4290;
  double t4297;
  double t4390;
  double t4391;
  double t4410;
  double t4505;
  double t4549;
  double t4630;
  double t4635;
  double t4646;
  double t4685;
  double t4708;
  double t4709;
  double t4721;
  double t4726;
  double t4739;
  double t4740;
  double t4758;
  double t4760;
  double t4763;
  double t4767;
  double t3457;
  double t3720;
  double t3721;
  double t3743;
  double t3845;
  double t3851;
  double t4875;
  double t4880;
  double t4886;
  double t4897;
  double t4898;
  double t4899;
  double t4904;
  double t4906;
  double t4907;
  double t4924;
  double t4925;
  double t4931;
  double t4933;
  double t4939;
  double t4952;
  double t4953;
  double t4954;
  double t4956;
  double t5038;
  double t5040;
  double t5052;
  double t5023;
  double t5127;
  double t5137;
  double t5143;
  double t5124;
  double t5247;
  double t5260;
  double t5267;
  double t5226;
  double t5125;
  double t5152;
  double t5154;
  double t5161;
  double t5174;
  double t5178;
  double t5206;
  double t5214;
  double t5216;
  double t5234;
  double t5269;
  double t5277;
  double t5284;
  double t5300;
  double t5306;
  double t5312;
  double t5315;
  double t5328;
  double t5416;
  double t5427;
  double t5439;
  double t5441;
  double t5450;
  double t5452;
  double t5456;
  double t5459;
  double t5371;
  double t5378;
  double t5379;
  double t5383;
  double t5470;
  double t5485;
  double t5486;
  double t5446;
  double t5464;
  double t5467;
  double t5617;
  double t5626;
  double t5634;
  double t5637;
  double t5644;
  double t5646;
  double t5649;
  double t5650;
  double t5559;
  double t5565;
  double t5567;
  double t5570;
  double t5670;
  double t5676;
  double t5678;
  double t5638;
  double t5655;
  double t5656;
  double t5788;
  double t5792;
  double t5798;
  double t5802;
  double t5816;
  double t5817;
  double t5822;
  double t5826;
  double t5748;
  double t5749;
  double t5755;
  double t5759;
  double t5841;
  double t5848;
  double t5854;
  double t5813;
  double t5829;
  double t5837;
  double t5571;
  double t5574;
  double t5576;
  double t5577;
  double t5578;
  double t5598;
  double t5668;
  double t5683;
  double t5685;
  double t5690;
  double t5703;
  double t5708;
  double t5719;
  double t5724;
  double t5728;
  double t5729;
  double t5731;
  double t5733;
  double t5764;
  double t5766;
  double t5777;
  double t5784;
  double t5785;
  double t5787;
  double t5840;
  double t5858;
  double t5860;
  double t5869;
  double t5883;
  double t5885;
  double t5897;
  double t5898;
  double t5901;
  double t5906;
  double t5909;
  double t5910;
  double t5951;
  double t5933;
  double t5934;
  double t5935;
  double t5937;
  double t5948;
  double t5952;
  double t5963;
  double t5969;
  double t5972;
  double t5988;
  double t5982;
  double t5989;
  double t5991;
  double t5996;
  double t6000;
  double t6001;
  double t6007;
  double t6012;
  double t6025;
  double t6026;
  double t6034;
  double t6036;
  double t6037;
  double t6045;
  double t6055;
  double t6065;
  double t6173;
  double t6176;
  double t6177;
  double t6181;
  double t6189;
  double t6197;
  double t6199;
  double t6200;
  double t6133;
  double t6152;
  double t6155;
  double t6164;
  double t6214;
  double t6216;
  double t6236;
  double t6182;
  double t6201;
  double t6206;
  double t6302;
  double t6305;
  double t6319;
  double t6327;
  double t6332;
  double t6334;
  double t6371;
  double t6373;
  double t6399;
  double t6439;
  double t6443;
  double t6446;
  double t6453;
  double t6466;
  double t6469;
  double t6473;
  double t6475;
  double t6417;
  double t6421;
  double t6423;
  double t6431;
  double t6490;
  double t6508;
  double t6522;
  double t6464;
  double t6476;
  double t6483;
  double t6580;
  double t6581;
  double t6582;
  double t6589;
  double t6599;
  double t6601;
  double t6627;
  double t6629;
  double t6636;
  double t6686;
  double t6687;
  double t6695;
  double t6696;
  double t6739;
  double t6742;
  double t6748;
  double t6750;
  double t6664;
  double t6665;
  double t6668;
  double t6680;
  double t6759;
  double t6761;
  double t6765;
  double t6699;
  double t6753;
  double t6755;
  double t6321;
  double t6355;
  double t6364;
  double t6365;
  double t6400;
  double t6403;
  double t6407;
  double t6408;
  double t6412;
  double t6432;
  double t6485;
  double t6525;
  double t6528;
  double t6529;
  double t6532;
  double t6537;
  double t6541;
  double t6551;
  double t6558;
  double t6559;
  double t6560;
  double t6567;
  double t6583;
  double t6602;
  double t6621;
  double t6622;
  double t6640;
  double t6641;
  double t6645;
  double t6647;
  double t6663;
  double t6685;
  double t6756;
  double t6767;
  double t6768;
  double t6771;
  double t6779;
  double t6780;
  double t6781;
  double t6785;
  double t6787;
  double t6795;
  double t6797;
  double t6807;
  t456 = Cos(var1[26]);
  t521 = -1.*t456;
  t722 = 1. + t521;
  t893 = Sin(var1[26]);
  t981 = -0.05226439969100001*t722;
  t205 = Sin(var1[25]);
  t2095 = -0.49726168403800003*t722;
  t873 = 0.051978134642000004*t722;
  t1671 = Cos(var1[25]);
  t1709 = -1.*t1671;
  t1890 = 1. + t1709;
  t790 = -0.9945383682050002*t722;
  t831 = 1. + t790;
  t847 = 0.073913*t831;
  t912 = -0.707107*t893;
  t950 = t873 + t912;
  t968 = 0.703234*t950;
  t987 = -0.703234*t893;
  t1039 = t981 + t987;
  t1076 = 0.707107*t1039;
  t1556 = t847 + t968 + t1076;
  t2012 = -0.500001190325*t722;
  t2022 = 1. + t2012;
  t2067 = 0.707107*t2022;
  t2156 = -0.073913*t893;
  t2318 = t2095 + t2156;
  t2319 = 0.703234*t2318;
  t2353 = 0.703234*t893;
  t2389 = t981 + t2353;
  t2488 = 0.073913*t2389;
  t2554 = t2067 + t2319 + t2488;
  t2624 = -0.5054634410180001*t722;
  t2638 = 1. + t2624;
  t2673 = 0.703234*t2638;
  t2690 = 0.073913*t893;
  t2889 = t2095 + t2690;
  t2910 = 0.707107*t2889;
  t2912 = 0.707107*t893;
  t3115 = t873 + t2912;
  t3147 = 0.073913*t3115;
  t3154 = t2673 + t2910 + t3147;
  t3462 = Sin(var1[24]);
  t3263 = -0.103955395616*t1890*t1556;
  t3268 = 0.994522*t205;
  t3292 = 0. + t3268;
  t3307 = t3292*t2554;
  t3340 = -0.9890740084840001*t1890;
  t3382 = 1. + t3340;
  t3440 = t3382*t3154;
  t3448 = 0. + t3263 + t3307 + t3440;
  t3261 = Cos(var1[24]);
  t3485 = -0.010926102783999999*t1890;
  t3502 = 1. + t3485;
  t3541 = t3502*t1556;
  t3562 = 0.104528*t205;
  t3569 = 0. + t3562;
  t3603 = t3569*t2554;
  t3703 = -0.103955395616*t1890*t3154;
  t3706 = 0. + t3541 + t3603 + t3703;
  t40 = Cos(var1[4]);
  t246 = -0.104528*t205;
  t253 = 0. + t246;
  t1967 = -1.0000001112680001*t1890;
  t2000 = 1. + t1967;
  t2573 = -0.994522*t205;
  t2614 = 0. + t2573;
  t3216 = Sin(var1[4]);
  t3260 = Cos(var1[5]);
  t3938 = -0.994522*t831;
  t3958 = 0.104528*t950;
  t3972 = t3938 + t3958;
  t3983 = 0.104528*t2318;
  t3986 = -0.994522*t2389;
  t4006 = t3983 + t3986;
  t4012 = 0.104528*t2638;
  t4030 = -0.994522*t3115;
  t4036 = t4012 + t4030;
  t4085 = -0.103955395616*t1890*t3972;
  t4109 = t3292*t4006;
  t4130 = t3382*t4036;
  t4181 = 0. + t4085 + t4109 + t4130;
  t4207 = t3502*t3972;
  t4208 = t3569*t4006;
  t4211 = -0.103955395616*t1890*t4036;
  t4219 = 0. + t4207 + t4208 + t4211;
  t3852 = Sin(var1[5]);
  t4489 = -0.073913*t831;
  t4496 = -0.703234*t950;
  t4497 = t4489 + t4496 + t1076;
  t4520 = -0.703234*t2318;
  t4530 = -0.073913*t2389;
  t4533 = t2067 + t4520 + t4530;
  t4562 = -0.703234*t2638;
  t4579 = -0.073913*t3115;
  t4580 = t4562 + t2910 + t4579;
  t4657 = -0.103955395616*t1890*t4497;
  t4668 = t3292*t4533;
  t4676 = t3382*t4580;
  t4677 = 0. + t4657 + t4668 + t4676;
  t4689 = t3502*t4497;
  t4693 = t3569*t4533;
  t4706 = -0.103955395616*t1890*t4580;
  t4707 = 0. + t4689 + t4693 + t4706;
  t3981 = t253*t3972;
  t4010 = t2000*t4006;
  t4037 = t2614*t4036;
  t4041 = 0. + t3981 + t4010 + t4037;
  t4062 = -1.*t40*t4041;
  t4193 = t3261*t4181;
  t4224 = -1.*t3462*t4219;
  t4238 = 0. + t4193 + t4224;
  t4249 = t3260*t4238;
  t4256 = t3462*t4181;
  t4289 = t3261*t4219;
  t4290 = 0. + t4256 + t4289;
  t4297 = t4290*t3852;
  t4390 = 0. + t4249 + t4297;
  t4391 = -1.*t3216*t4390;
  t4410 = t4062 + t4391;
  t4505 = t253*t4497;
  t4549 = t2000*t4533;
  t4630 = t2614*t4580;
  t4635 = 0. + t4505 + t4549 + t4630;
  t4646 = -1.*t40*t4635;
  t4685 = t3261*t4677;
  t4708 = -1.*t3462*t4707;
  t4709 = 0. + t4685 + t4708;
  t4721 = t3260*t4709;
  t4726 = t3462*t4677;
  t4739 = t3261*t4707;
  t4740 = 0. + t4726 + t4739;
  t4758 = t4740*t3852;
  t4760 = 0. + t4721 + t4758;
  t4763 = -1.*t3216*t4760;
  t4767 = t4646 + t4763;
  t3457 = t3261*t3448;
  t3720 = -1.*t3462*t3706;
  t3721 = 0. + t3457 + t3720;
  t3743 = t3462*t3448;
  t3845 = t3261*t3706;
  t3851 = 0. + t3743 + t3845;
  t4875 = -1.*t3260*t4238;
  t4880 = -1.*t4290*t3852;
  t4886 = t4875 + t4880;
  t4897 = var2[4]*t4886;
  t4898 = t3260*t4290;
  t4899 = -1.*t4238*t3852;
  t4904 = t4898 + t4899;
  t4906 = var2[3]*t40*t4904;
  t4907 = t4897 + t4906;
  t4924 = -1.*t3260*t4709;
  t4925 = -1.*t4740*t3852;
  t4931 = t4924 + t4925;
  t4933 = var2[4]*t4931;
  t4939 = t3260*t4740;
  t4952 = -1.*t4709*t3852;
  t4953 = t4939 + t4952;
  t4954 = var2[3]*t40*t4953;
  t4956 = t4933 + t4954;
  t5038 = -1.*t3462*t3448;
  t5040 = -1.*t3261*t3706;
  t5052 = t5038 + t5040;
  t5023 = t3457 + t3720;
  t5127 = -1.*t3462*t4181;
  t5137 = -1.*t3261*t4219;
  t5143 = t5127 + t5137;
  t5124 = t4193 + t4224;
  t5247 = -1.*t3462*t4677;
  t5260 = -1.*t3261*t4707;
  t5267 = t5247 + t5260;
  t5226 = t4685 + t4708;
  t5125 = t3260*t5124;
  t5152 = -1.*t5143*t3852;
  t5154 = t5125 + t5152;
  t5161 = var2[4]*t5154;
  t5174 = t3260*t5143;
  t5178 = t5124*t3852;
  t5206 = t5174 + t5178;
  t5214 = var2[3]*t40*t5206;
  t5216 = t5161 + t5214;
  t5234 = t3260*t5226;
  t5269 = -1.*t5267*t3852;
  t5277 = t5234 + t5269;
  t5284 = var2[4]*t5277;
  t5300 = t3260*t5267;
  t5306 = t5226*t3852;
  t5312 = t5300 + t5306;
  t5315 = var2[3]*t40*t5312;
  t5328 = t5284 + t5315;
  t5416 = -0.103955395616*t205*t1556;
  t5427 = 0.994522*t1671*t2554;
  t5439 = -0.9890740084840001*t205*t3154;
  t5441 = t5416 + t5427 + t5439;
  t5450 = -0.010926102783999999*t205*t1556;
  t5452 = 0.104528*t1671*t2554;
  t5456 = -0.103955395616*t205*t3154;
  t5459 = t5450 + t5452 + t5456;
  t5371 = -0.104528*t1671*t1556;
  t5378 = -1.0000001112680001*t205*t2554;
  t5379 = -0.994522*t1671*t3154;
  t5383 = t5371 + t5378 + t5379;
  t5470 = t3261*t5441;
  t5485 = -1.*t3462*t5459;
  t5486 = t5470 + t5485;
  t5446 = t3462*t5441;
  t5464 = t3261*t5459;
  t5467 = t5446 + t5464;
  t5617 = -0.103955395616*t205*t3972;
  t5626 = 0.994522*t1671*t4006;
  t5634 = -0.9890740084840001*t205*t4036;
  t5637 = t5617 + t5626 + t5634;
  t5644 = -0.010926102783999999*t205*t3972;
  t5646 = 0.104528*t1671*t4006;
  t5649 = -0.103955395616*t205*t4036;
  t5650 = t5644 + t5646 + t5649;
  t5559 = -0.104528*t1671*t3972;
  t5565 = -1.0000001112680001*t205*t4006;
  t5567 = -0.994522*t1671*t4036;
  t5570 = t5559 + t5565 + t5567;
  t5670 = t3261*t5637;
  t5676 = -1.*t3462*t5650;
  t5678 = t5670 + t5676;
  t5638 = t3462*t5637;
  t5655 = t3261*t5650;
  t5656 = t5638 + t5655;
  t5788 = -0.103955395616*t205*t4497;
  t5792 = 0.994522*t1671*t4533;
  t5798 = -0.9890740084840001*t205*t4580;
  t5802 = t5788 + t5792 + t5798;
  t5816 = -0.010926102783999999*t205*t4497;
  t5817 = 0.104528*t1671*t4533;
  t5822 = -0.103955395616*t205*t4580;
  t5826 = t5816 + t5817 + t5822;
  t5748 = -0.104528*t1671*t4497;
  t5749 = -1.0000001112680001*t205*t4533;
  t5755 = -0.994522*t1671*t4580;
  t5759 = t5748 + t5749 + t5755;
  t5841 = t3261*t5802;
  t5848 = -1.*t3462*t5826;
  t5854 = t5841 + t5848;
  t5813 = t3462*t5802;
  t5829 = t3261*t5826;
  t5837 = t5813 + t5829;
  t5571 = var2[5]*t5570;
  t5574 = 0.104528*t1671*t3972;
  t5576 = 1.0000001112680001*t205*t4006;
  t5577 = 0.994522*t1671*t4036;
  t5578 = t5574 + t5576 + t5577;
  t5598 = var2[24]*t5578;
  t5668 = t3260*t5656;
  t5683 = -1.*t5678*t3852;
  t5685 = t5668 + t5683;
  t5690 = var2[4]*t5685;
  t5703 = -1.*t5570*t3216;
  t5708 = t3260*t5678;
  t5719 = t5656*t3852;
  t5724 = t5708 + t5719;
  t5728 = t40*t5724;
  t5729 = t5703 + t5728;
  t5731 = var2[3]*t5729;
  t5733 = t5571 + t5598 + t5690 + t5731;
  t5764 = var2[5]*t5759;
  t5766 = 0.104528*t1671*t4497;
  t5777 = 1.0000001112680001*t205*t4533;
  t5784 = 0.994522*t1671*t4580;
  t5785 = t5766 + t5777 + t5784;
  t5787 = var2[24]*t5785;
  t5840 = t3260*t5837;
  t5858 = -1.*t5854*t3852;
  t5860 = t5840 + t5858;
  t5869 = var2[4]*t5860;
  t5883 = -1.*t5759*t3216;
  t5885 = t3260*t5854;
  t5897 = t5837*t3852;
  t5898 = t5885 + t5897;
  t5901 = t40*t5898;
  t5906 = t5883 + t5901;
  t5909 = var2[3]*t5906;
  t5910 = t5764 + t5787 + t5869 + t5909;
  t5951 = 0.051978134642000004*t893;
  t5933 = 0.073913*t456;
  t5934 = -0.49726168403800003*t893;
  t5935 = t5933 + t5934;
  t5937 = 0.707107*t5935;
  t5948 = 0.707107*t456;
  t5952 = t5948 + t5951;
  t5963 = 0.073913*t5952;
  t5969 = -0.3554590774808523*t893;
  t5972 = t5937 + t5963 + t5969;
  t5988 = -0.05226439969100001*t893;
  t5982 = -0.703234*t456;
  t5989 = t5982 + t5988;
  t5991 = 0.707107*t5989;
  t5996 = -0.707107*t456;
  t6000 = t5996 + t5951;
  t6001 = 0.703234*t6000;
  t6007 = -0.07350931440913619*t893;
  t6012 = t5991 + t6001 + t6007;
  t6025 = -0.073913*t456;
  t6026 = t6025 + t5934;
  t6034 = 0.703234*t6026;
  t6036 = 0.703234*t456;
  t6037 = t6036 + t5988;
  t6045 = 0.073913*t6037;
  t6055 = -0.3535543416871398*t893;
  t6065 = t6034 + t6045 + t6055;
  t6173 = -0.103955395616*t1890*t5972;
  t6176 = t3569*t6065;
  t6177 = t3502*t6012;
  t6181 = t6173 + t6176 + t6177;
  t6189 = t3382*t5972;
  t6197 = t3292*t6065;
  t6199 = -0.103955395616*t1890*t6012;
  t6200 = t6189 + t6197 + t6199;
  t6133 = t2614*t5972;
  t6152 = t2000*t6065;
  t6155 = t253*t6012;
  t6164 = t6133 + t6152 + t6155;
  t6214 = -1.*t3462*t6181;
  t6216 = t3261*t6200;
  t6236 = t6214 + t6216;
  t6182 = t3261*t6181;
  t6201 = t3462*t6200;
  t6206 = t6182 + t6201;
  t6302 = -0.703234*t6000;
  t6305 = 0.07350931440913619*t893;
  t6319 = t5991 + t6302 + t6305;
  t6327 = -0.073913*t5952;
  t6332 = 0.3554590774808523*t893;
  t6334 = t5937 + t6327 + t6332;
  t6371 = -0.703234*t6026;
  t6373 = -0.073913*t6037;
  t6399 = t6371 + t6373 + t6055;
  t6439 = t3292*t6399;
  t6443 = -0.103955395616*t1890*t6319;
  t6446 = t3382*t6334;
  t6453 = t6439 + t6443 + t6446;
  t6466 = t3569*t6399;
  t6469 = t3502*t6319;
  t6473 = -0.103955395616*t1890*t6334;
  t6475 = t6466 + t6469 + t6473;
  t6417 = t2000*t6399;
  t6421 = t253*t6319;
  t6423 = t2614*t6334;
  t6431 = t6417 + t6421 + t6423;
  t6490 = t3261*t6453;
  t6508 = -1.*t3462*t6475;
  t6522 = t6490 + t6508;
  t6464 = t3462*t6453;
  t6476 = t3261*t6475;
  t6483 = t6464 + t6476;
  t6580 = -0.994522*t5952;
  t6581 = -0.052835082562729514*t893;
  t6582 = t6580 + t6581;
  t6589 = 0.104528*t6000;
  t6599 = 0.9890902870239732*t893;
  t6601 = t6589 + t6599;
  t6627 = 0.104528*t6026;
  t6629 = -0.994522*t6037;
  t6636 = t6627 + t6629;
  t6686 = t3569*t6636;
  t6687 = -0.103955395616*t1890*t6582;
  t6695 = t3502*t6601;
  t6696 = t6686 + t6687 + t6695;
  t6739 = t3292*t6636;
  t6742 = t3382*t6582;
  t6748 = -0.103955395616*t1890*t6601;
  t6750 = t6739 + t6742 + t6748;
  t6664 = t2000*t6636;
  t6665 = t2614*t6582;
  t6668 = t253*t6601;
  t6680 = t6664 + t6665 + t6668;
  t6759 = -1.*t3462*t6696;
  t6761 = t3261*t6750;
  t6765 = t6759 + t6761;
  t6699 = t3261*t6696;
  t6753 = t3462*t6750;
  t6755 = t6699 + t6753;
  t6321 = -0.994522*t6319;
  t6355 = 0.104528*t6334;
  t6364 = t6321 + t6355;
  t6365 = var2[25]*t6364;
  t6400 = -1.*t2000*t6399;
  t6403 = -1.*t253*t6319;
  t6407 = -1.*t2614*t6334;
  t6408 = t6400 + t6403 + t6407;
  t6412 = var2[24]*t6408;
  t6432 = var2[5]*t6431;
  t6485 = t3260*t6483;
  t6525 = -1.*t6522*t3852;
  t6528 = t6485 + t6525;
  t6529 = var2[4]*t6528;
  t6532 = -1.*t6431*t3216;
  t6537 = t3260*t6522;
  t6541 = t6483*t3852;
  t6551 = t6537 + t6541;
  t6558 = t40*t6551;
  t6559 = t6532 + t6558;
  t6560 = var2[3]*t6559;
  t6567 = t6365 + t6412 + t6432 + t6529 + t6560;
  t6583 = 0.104528*t6582;
  t6602 = -0.994522*t6601;
  t6621 = t6583 + t6602;
  t6622 = var2[25]*t6621;
  t6640 = -1.*t2000*t6636;
  t6641 = -1.*t2614*t6582;
  t6645 = -1.*t253*t6601;
  t6647 = t6640 + t6641 + t6645;
  t6663 = var2[24]*t6647;
  t6685 = var2[5]*t6680;
  t6756 = t3260*t6755;
  t6767 = -1.*t6765*t3852;
  t6768 = t6756 + t6767;
  t6771 = var2[4]*t6768;
  t6779 = -1.*t6680*t3216;
  t6780 = t3260*t6765;
  t6781 = t6755*t3852;
  t6785 = t6780 + t6781;
  t6787 = t40*t6785;
  t6795 = t6779 + t6787;
  t6797 = var2[3]*t6795;
  t6807 = t6622 + t6663 + t6685 + t6771 + t6797;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0.00697*(-1.*t3216*(0. + t3260*t3721 + t3851*t3852) - 1.*(0. + t1556*t253 + t2000*t2554 + t2614*t3154)*t40)*var2[3];
  p_output1[13]=0.007*t4410*var2[3] - 0.00002*t4767*var2[3];
  p_output1[14]=-0.00002*t4410*var2[3] + 0.00067*t4767*var2[3];
  p_output1[15]=0.00697*((t3260*t3851 - 1.*t3721*t3852)*t40*var2[3] + (-1.*t3260*t3721 - 1.*t3851*t3852)*var2[4]);
  p_output1[16]=0.007*t4907 - 0.00002*t4956;
  p_output1[17]=-0.00002*t4907 + 0.00067*t4956;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0.00697*(t40*(t3852*t5023 + t3260*t5052)*var2[3] + (t3260*t5023 - 1.*t3852*t5052)*var2[4]);
  p_output1[73]=0.007*t5216 - 0.00002*t5328;
  p_output1[74]=-0.00002*t5216 + 0.00067*t5328;
  p_output1[75]=0.00697*((-1.*t3216*t5383 + t40*(t3852*t5467 + t3260*t5486))*var2[3] + (t3260*t5467 - 1.*t3852*t5486)*var2[4] + t5383*var2[5] + (0.104528*t1556*t1671 + 1.0000001112680001*t205*t2554 + 0.994522*t1671*t3154)*var2[24]);
  p_output1[76]=0.007*t5733 - 0.00002*t5910;
  p_output1[77]=-0.00002*t5733 + 0.00067*t5910;
  p_output1[78]=0.00697*((-1.*t3216*t6164 + t40*(t3852*t6206 + t3260*t6236))*var2[3] + (t3260*t6206 - 1.*t3852*t6236)*var2[4] + t6164*var2[5] + (-1.*t2614*t5972 - 1.*t253*t6012 - 1.*t2000*t6065)*var2[24] + (0.104528*t5972 - 0.994522*t6012)*var2[25]);
  p_output1[79]=-0.00002*t6567 + 0.007*t6807;
  p_output1[80]=0.00067*t6567 - 0.00002*t6807;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
}



void Jq_AMBody_right_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
