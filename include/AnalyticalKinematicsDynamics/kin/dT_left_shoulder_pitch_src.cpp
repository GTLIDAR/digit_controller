/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:08:24 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dT_left_shoulder_pitch_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t82;
  double t1194;
  double t1052;
  double t1125;
  double t1189;
  double t1314;
  double t1208;
  double t1256;
  double t1396;
  double t110;
  double t385;
  double t1271;
  double t1420;
  double t1445;
  double t1577;
  double t1598;
  double t1603;
  double t2071;
  double t1752;
  double t1756;
  double t2026;
  double t2072;
  double t2085;
  double t2117;
  double t2140;
  double t2167;
  double t1483;
  double t1525;
  double t2109;
  double t2190;
  double t2208;
  double t2232;
  double t2240;
  double t2249;
  double t1903;
  double t1938;
  double t1884;
  double t1892;
  double t2503;
  double t2505;
  double t2507;
  double t2495;
  double t2510;
  double t2511;
  double t2518;
  double t2521;
  double t2532;
  double t2781;
  double t2787;
  double t123;
  double t371;
  double t3049;
  double t3050;
  double t3051;
  double t3089;
  double t3090;
  double t3091;
  double t1716;
  double t1720;
  double t3069;
  double t3113;
  double t3115;
  double t3123;
  double t3125;
  double t3147;
  double t1831;
  double t1841;
  double t3310;
  double t3317;
  double t3327;
  double t3330;
  double t3349;
  double t3357;
  double t2516;
  double t3774;
  double t3778;
  double t3784;
  double t3803;
  double t3831;
  double t3855;
  double t3859;
  double t3861;
  double t4024;
  double t4025;
  double t4026;
  double t4004;
  double t4027;
  double t4031;
  double t4036;
  double t4051;
  double t4087;
  double t4183;
  double t4192;
  double t4404;
  double t4405;
  double t4408;
  double t4411;
  double t4412;
  double t4418;
  double t4480;
  double t4489;
  double t4493;
  double t4504;
  double t4508;
  double t4514;
  double t4923;
  double t4930;
  double t4933;
  double t4941;
  double t4943;
  double t4948;
  double t991;
  double t1470;
  double t1608;
  double t1624;
  double t1639;
  double t1741;
  double t1797;
  double t1817;
  double t1819;
  double t1828;
  double t1843;
  double t1902;
  double t1950;
  double t1953;
  double t2231;
  double t2333;
  double t2334;
  double t2337;
  double t2351;
  double t2358;
  double t2372;
  double t2375;
  double t2424;
  double t2434;
  double t2437;
  double t2594;
  double t2606;
  double t2607;
  double t2613;
  double t2632;
  double t2633;
  double t2643;
  double t2657;
  double t2660;
  double t2673;
  double t2738;
  double t2743;
  double t2829;
  double t2859;
  double t2923;
  double t2925;
  double t2956;
  double t2958;
  double t2964;
  double t2965;
  double t2977;
  double t2995;
  double t3003;
  double t3007;
  double t3044;
  double t3116;
  double t3158;
  double t3169;
  double t3174;
  double t3188;
  double t3193;
  double t3217;
  double t3224;
  double t3227;
  double t3244;
  double t3252;
  double t3270;
  double t3274;
  double t3307;
  double t3328;
  double t3378;
  double t3380;
  double t3381;
  double t3397;
  double t3422;
  double t3439;
  double t3444;
  double t3474;
  double t3491;
  double t3503;
  double t3529;
  double t3612;
  double t3643;
  double t3651;
  double t3675;
  double t3678;
  double t3680;
  double t3691;
  double t3703;
  double t3710;
  double t3714;
  double t3716;
  double t3717;
  double t3721;
  double t3722;
  double t3832;
  double t3874;
  double t3877;
  double t3893;
  double t3914;
  double t3921;
  double t3922;
  double t3928;
  double t3934;
  double t3962;
  double t3970;
  double t4035;
  double t4092;
  double t4096;
  double t4103;
  double t4111;
  double t4114;
  double t4125;
  double t4137;
  double t4143;
  double t4150;
  double t4153;
  double t4173;
  double t4182;
  double t4203;
  double t4205;
  double t4213;
  double t4223;
  double t4226;
  double t4238;
  double t4256;
  double t4323;
  double t4325;
  double t4338;
  double t4350;
  double t4367;
  double t4409;
  double t4419;
  double t4422;
  double t4427;
  double t4434;
  double t4436;
  double t4440;
  double t4443;
  double t4447;
  double t4449;
  double t4461;
  double t4496;
  double t4526;
  double t4531;
  double t4576;
  double t4579;
  double t4587;
  double t4631;
  double t4641;
  double t4653;
  double t4661;
  double t4679;
  double t4739;
  double t4751;
  double t4773;
  double t4794;
  double t4807;
  double t4812;
  double t4813;
  double t4824;
  double t4838;
  double t4839;
  double t4859;
  double t4862;
  double t4865;
  double t4873;
  double t4919;
  double t4940;
  double t4951;
  double t4959;
  double t4975;
  double t4981;
  double t4987;
  double t5033;
  double t5037;
  double t5041;
  double t5052;
  double t5056;
  double t5068;
  double t5070;
  double t5980;
  double t6006;
  double t6057;
  double t6063;
  double t6067;
  double t6009;
  double t6019;
  double t6029;
  double t6109;
  double t6111;
  double t6113;
  double t6116;
  double t6083;
  double t6084;
  double t6097;
  double t6103;
  double t6034;
  double t6035;
  double t6039;
  double t6052;
  double t6173;
  double t6176;
  double t6179;
  double t6192;
  double t6194;
  double t6243;
  double t6246;
  double t6247;
  double t6254;
  double t6270;
  double t6271;
  double t6283;
  double t6285;
  double t6286;
  t82 = Cos(var1[3]);
  t1194 = Cos(var1[4]);
  t1052 = Cos(var1[14]);
  t1125 = -1.*t1052;
  t1189 = 1. + t1125;
  t1314 = Cos(var1[13]);
  t1208 = Cos(var1[5]);
  t1256 = Sin(var1[13]);
  t1396 = Sin(var1[5]);
  t110 = Sin(var1[14]);
  t385 = Sin(var1[4]);
  t1271 = -1.*t82*t1194*t1208*t1256;
  t1420 = t1314*t82*t1194*t1396;
  t1445 = t1271 + t1420;
  t1577 = t1314*t82*t1194*t1208;
  t1598 = t82*t1194*t1256*t1396;
  t1603 = t1577 + t1598;
  t2071 = Sin(var1[3]);
  t1752 = -0.010926102783999999*t1189;
  t1756 = 1. + t1752;
  t2026 = t82*t1208*t385;
  t2072 = t2071*t1396;
  t2085 = t2026 + t2072;
  t2117 = t1208*t2071;
  t2140 = -1.*t82*t385*t1396;
  t2167 = t2117 + t2140;
  t1483 = -0.9890740084840001*t1189;
  t1525 = 1. + t1483;
  t2109 = t1256*t2085;
  t2190 = t1314*t2167;
  t2208 = t2109 + t2190;
  t2232 = t1314*t2085;
  t2240 = -1.*t1256*t2167;
  t2249 = t2232 + t2240;
  t1903 = -0.994522*t110;
  t1938 = 0. + t1903;
  t1884 = 0.104528*t110;
  t1892 = 0. + t1884;
  t2503 = -1.*t1208*t2071;
  t2505 = t82*t385*t1396;
  t2507 = t2503 + t2505;
  t2495 = -1.*t1256*t2085;
  t2510 = t1314*t2507;
  t2511 = t2495 + t2510;
  t2518 = -1.*t1314*t2085;
  t2521 = -1.*t1256*t2507;
  t2532 = t2518 + t2521;
  t2781 = t1256*t2507;
  t2787 = t2232 + t2781;
  t123 = 0.994522*t110;
  t371 = 0. + t123;
  t3049 = -1.*t1208*t2071*t385;
  t3050 = t82*t1396;
  t3051 = t3049 + t3050;
  t3089 = -1.*t82*t1208;
  t3090 = -1.*t2071*t385*t1396;
  t3091 = t3089 + t3090;
  t1716 = -0.104528*t110;
  t1720 = 0. + t1716;
  t3069 = -1.*t1256*t3051;
  t3113 = t1314*t3091;
  t3115 = t3069 + t3113;
  t3123 = t1314*t3051;
  t3125 = t1256*t3091;
  t3147 = t3123 + t3125;
  t1831 = -1.0000001112680001*t1189;
  t1841 = 1. + t1831;
  t3310 = -1.*t1194*t1208*t1256*t2071;
  t3317 = t1314*t1194*t2071*t1396;
  t3327 = t3310 + t3317;
  t3330 = t1314*t1194*t1208*t2071;
  t3349 = t1194*t1256*t2071*t1396;
  t3357 = t3330 + t3349;
  t2516 = 0.103955395616*t1189*t2511;
  t3774 = t1208*t2071*t385;
  t3778 = -1.*t82*t1396;
  t3784 = t3774 + t3778;
  t3803 = t1256*t3784;
  t3831 = t3803 + t3113;
  t3855 = t1314*t3784;
  t3859 = -1.*t1256*t3091;
  t3861 = t3855 + t3859;
  t4024 = t82*t1208;
  t4025 = t2071*t385*t1396;
  t4026 = t4024 + t4025;
  t4004 = -1.*t1256*t3784;
  t4027 = t1314*t4026;
  t4031 = t4004 + t4027;
  t4036 = -1.*t1314*t3784;
  t4051 = -1.*t1256*t4026;
  t4087 = t4036 + t4051;
  t4183 = t1256*t4026;
  t4192 = t3855 + t4183;
  t4404 = -1.*t1194*t1208*t1256;
  t4405 = t1314*t1194*t1396;
  t4408 = t4404 + t4405;
  t4411 = -1.*t1314*t1194*t1208;
  t4412 = -1.*t1194*t1256*t1396;
  t4418 = t4411 + t4412;
  t4480 = t1194*t1208*t1256;
  t4489 = -1.*t1314*t1194*t1396;
  t4493 = t4480 + t4489;
  t4504 = t1314*t1194*t1208;
  t4508 = t1194*t1256*t1396;
  t4514 = t4504 + t4508;
  t4923 = t1208*t1256*t385;
  t4930 = -1.*t1314*t385*t1396;
  t4933 = t4923 + t4930;
  t4941 = -1.*t1314*t1208*t385;
  t4943 = -1.*t1256*t385*t1396;
  t4948 = t4941 + t4943;
  t991 = -1.*t82*t371*t385;
  t1470 = 0.103955395616*t1189*t1445;
  t1608 = t1525*t1603;
  t1624 = t991 + t1470 + t1608;
  t1639 = 0.703234*t1624;
  t1741 = -1.*t82*t1720*t385;
  t1797 = t1756*t1445;
  t1817 = 0.103955395616*t1189*t1603;
  t1819 = t1741 + t1797 + t1817;
  t1828 = -0.073913*t1819;
  t1843 = -1.*t1841*t82*t385;
  t1902 = t1892*t1445;
  t1950 = t1938*t1603;
  t1953 = t1843 + t1902 + t1950;
  t2231 = 0.103955395616*t1189*t2208;
  t2333 = t1756*t2249;
  t2334 = t2231 + t2333;
  t2337 = -0.073913*t2334;
  t2351 = t1525*t2208;
  t2358 = 0.103955395616*t1189*t2249;
  t2372 = t2351 + t2358;
  t2375 = 0.703234*t2372;
  t2424 = t1938*t2208;
  t2434 = t1892*t2249;
  t2437 = t2424 + t2434;
  t2594 = t1756*t2532;
  t2606 = t2516 + t2594;
  t2607 = -0.073913*t2606;
  t2613 = t1525*t2511;
  t2632 = 0.103955395616*t1189*t2532;
  t2633 = t2613 + t2632;
  t2643 = 0.703234*t2633;
  t2657 = t1938*t2511;
  t2660 = t1892*t2532;
  t2673 = t2657 + t2660;
  t2738 = -1.0000001112680001*t82*t1194*t110;
  t2743 = 0.104528*t1052*t2511;
  t2829 = -0.994522*t1052*t2787;
  t2859 = t2738 + t2743 + t2829;
  t2923 = 0.994522*t1052*t82*t1194;
  t2925 = 0.103955395616*t110*t2511;
  t2956 = -0.9890740084840001*t110*t2787;
  t2958 = t2923 + t2925 + t2956;
  t2964 = 0.703234*t2958;
  t2965 = -0.104528*t1052*t82*t1194;
  t2977 = -0.010926102783999999*t110*t2511;
  t2995 = 0.103955395616*t110*t2787;
  t3003 = t2965 + t2977 + t2995;
  t3007 = -0.073913*t3003;
  t3044 = -1.*t1194*t371*t2071;
  t3116 = 0.103955395616*t1189*t3115;
  t3158 = t1525*t3147;
  t3169 = t3044 + t3116 + t3158;
  t3174 = 0.703234*t3169;
  t3188 = -1.*t1194*t1720*t2071;
  t3193 = t1756*t3115;
  t3217 = 0.103955395616*t1189*t3147;
  t3224 = t3188 + t3193 + t3217;
  t3227 = -0.073913*t3224;
  t3244 = -1.*t1841*t1194*t2071;
  t3252 = t1892*t3115;
  t3270 = t1938*t3147;
  t3274 = t3244 + t3252 + t3270;
  t3307 = -1.*t371*t2071*t385;
  t3328 = 0.103955395616*t1189*t3327;
  t3378 = t1525*t3357;
  t3380 = t3307 + t3328 + t3378;
  t3381 = 0.703234*t3380;
  t3397 = -1.*t1720*t2071*t385;
  t3422 = t1756*t3327;
  t3439 = 0.103955395616*t1189*t3357;
  t3444 = t3397 + t3422 + t3439;
  t3474 = -0.073913*t3444;
  t3491 = -1.*t1841*t2071*t385;
  t3503 = t1892*t3327;
  t3529 = t1938*t3357;
  t3612 = t3491 + t3503 + t3529;
  t3643 = t82*t1194*t371;
  t3651 = t1525*t2787;
  t3675 = t3643 + t2516 + t3651;
  t3678 = 0.703234*t3675;
  t3680 = t82*t1194*t1720;
  t3691 = t1756*t2511;
  t3703 = 0.103955395616*t1189*t2787;
  t3710 = t3680 + t3691 + t3703;
  t3714 = -0.073913*t3710;
  t3716 = t1841*t82*t1194;
  t3717 = t1892*t2511;
  t3721 = t1938*t2787;
  t3722 = t3716 + t3717 + t3721;
  t3832 = 0.103955395616*t1189*t3831;
  t3874 = t1756*t3861;
  t3877 = t3832 + t3874;
  t3893 = -0.073913*t3877;
  t3914 = t1525*t3831;
  t3921 = 0.103955395616*t1189*t3861;
  t3922 = t3914 + t3921;
  t3928 = 0.703234*t3922;
  t3934 = t1938*t3831;
  t3962 = t1892*t3861;
  t3970 = t3934 + t3962;
  t4035 = 0.103955395616*t1189*t4031;
  t4092 = t1756*t4087;
  t4096 = t4035 + t4092;
  t4103 = -0.073913*t4096;
  t4111 = t1525*t4031;
  t4114 = 0.103955395616*t1189*t4087;
  t4125 = t4111 + t4114;
  t4137 = 0.703234*t4125;
  t4143 = t1938*t4031;
  t4150 = t1892*t4087;
  t4153 = t4143 + t4150;
  t4173 = -1.0000001112680001*t1194*t110*t2071;
  t4182 = 0.104528*t1052*t4031;
  t4203 = -0.994522*t1052*t4192;
  t4205 = t4173 + t4182 + t4203;
  t4213 = 0.994522*t1052*t1194*t2071;
  t4223 = 0.103955395616*t110*t4031;
  t4226 = -0.9890740084840001*t110*t4192;
  t4238 = t4213 + t4223 + t4226;
  t4256 = 0.703234*t4238;
  t4323 = -0.104528*t1052*t1194*t2071;
  t4325 = -0.010926102783999999*t110*t4031;
  t4338 = 0.103955395616*t110*t4192;
  t4350 = t4323 + t4325 + t4338;
  t4367 = -0.073913*t4350;
  t4409 = 0.103955395616*t1189*t4408;
  t4419 = t1756*t4418;
  t4422 = t4409 + t4419;
  t4427 = -0.073913*t4422;
  t4434 = t1525*t4408;
  t4436 = 0.103955395616*t1189*t4418;
  t4440 = t4434 + t4436;
  t4443 = 0.703234*t4440;
  t4447 = t1938*t4408;
  t4449 = t1892*t4418;
  t4461 = t4447 + t4449;
  t4496 = 0.103955395616*t1189*t4493;
  t4526 = t1756*t4514;
  t4531 = t4496 + t4526;
  t4576 = -0.073913*t4531;
  t4579 = t1525*t4493;
  t4587 = 0.103955395616*t1189*t4514;
  t4631 = t4579 + t4587;
  t4641 = 0.703234*t4631;
  t4653 = t1938*t4493;
  t4661 = t1892*t4514;
  t4679 = t4653 + t4661;
  t4739 = 1.0000001112680001*t110*t385;
  t4751 = 0.104528*t1052*t4408;
  t4773 = -0.994522*t1052*t4514;
  t4794 = t4739 + t4751 + t4773;
  t4807 = -0.994522*t1052*t385;
  t4812 = 0.103955395616*t110*t4408;
  t4813 = -0.9890740084840001*t110*t4514;
  t4824 = t4807 + t4812 + t4813;
  t4838 = 0.703234*t4824;
  t4839 = 0.104528*t1052*t385;
  t4859 = -0.010926102783999999*t110*t4408;
  t4862 = 0.103955395616*t110*t4514;
  t4865 = t4839 + t4859 + t4862;
  t4873 = -0.073913*t4865;
  t4919 = -1.*t1194*t371;
  t4940 = 0.103955395616*t1189*t4933;
  t4951 = t1525*t4948;
  t4959 = t4919 + t4940 + t4951;
  t4975 = 0.703234*t4959;
  t4981 = -1.*t1194*t1720;
  t4987 = t1756*t4933;
  t5033 = 0.103955395616*t1189*t4948;
  t5037 = t4981 + t4987 + t5033;
  t5041 = -0.073913*t5037;
  t5052 = -1.*t1841*t1194;
  t5056 = t1892*t4933;
  t5068 = t1938*t4948;
  t5070 = t5052 + t5056 + t5068;
  t5980 = -1.*t1314;
  t6006 = 1. + t5980;
  t6057 = 0.12*t6006;
  t6063 = -0.4*t1256;
  t6067 = 0. + t6057 + t6063;
  t6009 = 0.4*t6006;
  t6019 = 0.12*t1256;
  t6029 = 0. + t6009 + t6019;
  t6109 = 1.1924972351948546e-8*var1[14];
  t6111 = 0.38315655000705834*t1189;
  t6113 = -0.05650052807*t371;
  t6116 = t6109 + t6111 + t6113;
  t6083 = 1.1345904784751044e-7*var1[14];
  t6084 = -0.04027119345689465*t1189;
  t6097 = -0.05650052807*t1720;
  t6103 = t6083 + t6084 + t6097;
  t6034 = -0.056500534356700764*t1189;
  t6035 = 0.38315650737400003*t1938;
  t6039 = -0.040271188976*t1892;
  t6052 = 0. + t6034 + t6035 + t6039;
  t6173 = 0.12*t1314;
  t6176 = 0.4*t1256;
  t6179 = t6173 + t6176;
  t6192 = -0.4*t1314;
  t6194 = t6192 + t6019;
  t6243 = -0.3852670428678886*t1052;
  t6246 = -0.056500534356700764*t110;
  t6247 = t6243 + t6246;
  t6254 = 0.0059058871981009595*t1052;
  t6270 = -0.04027119345689465*t110;
  t6271 = 1.1345904784751044e-7 + t6254 + t6270;
  t6283 = -0.05619101817723254*t1052;
  t6285 = 0.38315655000705834*t110;
  t6286 = 1.1924972351948546e-8 + t6283 + t6285;
  p_output1[0]=(t3174 + t3227 + 0.707107*t3274)*var2[3] + (t1639 + t1828 + 0.707107*t1953)*var2[4] + (t2337 + t2375 + 0.707107*t2437)*var2[5] + (t2607 + t2643 + 0.707107*t2673)*var2[13] + (0.707107*t2859 + t2964 + t3007)*var2[14];
  p_output1[1]=(t3678 + t3714 + 0.707107*t3722)*var2[3] + (t3381 + t3474 + 0.707107*t3612)*var2[4] + (t3893 + t3928 + 0.707107*t3970)*var2[5] + (t4103 + t4137 + 0.707107*t4153)*var2[13] + (0.707107*t4205 + t4256 + t4367)*var2[14];
  p_output1[2]=(t4975 + t5041 + 0.707107*t5070)*var2[4] + (t4576 + t4641 + 0.707107*t4679)*var2[5] + (t4427 + t4443 + 0.707107*t4461)*var2[13] + (0.707107*t4794 + t4838 + t4873)*var2[14];
  p_output1[3]=0;
  p_output1[4]=(t3174 + t3227 - 0.707107*t3274)*var2[3] + (t1639 + t1828 - 0.707107*t1953)*var2[4] + (t2337 + t2375 - 0.707107*t2437)*var2[5] + (t2607 + t2643 - 0.707107*t2673)*var2[13] + (-0.707107*t2859 + t2964 + t3007)*var2[14];
  p_output1[5]=(t3678 + t3714 - 0.707107*t3722)*var2[3] + (t3381 + t3474 - 0.707107*t3612)*var2[4] + (t3893 + t3928 - 0.707107*t3970)*var2[5] + (t4103 + t4137 - 0.707107*t4153)*var2[13] + (-0.707107*t4205 + t4256 + t4367)*var2[14];
  p_output1[6]=(t4975 + t5041 - 0.707107*t5070)*var2[4] + (t4576 + t4641 - 0.707107*t4679)*var2[5] + (t4427 + t4443 - 0.707107*t4461)*var2[13] + (-0.707107*t4794 + t4838 + t4873)*var2[14];
  p_output1[7]=0;
  p_output1[8]=(-0.104528*t3169 - 0.994522*t3224)*var2[3] + (-0.104528*t1624 - 0.994522*t1819)*var2[4] + (-0.994522*t2334 - 0.104528*t2372)*var2[5] + (-0.994522*t2606 - 0.104528*t2633)*var2[13] + (-0.104528*t2958 - 0.994522*t3003)*var2[14];
  p_output1[9]=(-0.104528*t3675 - 0.994522*t3710)*var2[3] + (-0.104528*t3380 - 0.994522*t3444)*var2[4] + (-0.994522*t3877 - 0.104528*t3922)*var2[5] + (-0.994522*t4096 - 0.104528*t4125)*var2[13] + (-0.104528*t4238 - 0.994522*t4350)*var2[14];
  p_output1[10]=(-0.104528*t4959 - 0.994522*t5037)*var2[4] + (-0.994522*t4531 - 0.104528*t4631)*var2[5] + (-0.994522*t4422 - 0.104528*t4440)*var2[13] + (-0.104528*t4824 - 0.994522*t4865)*var2[14];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (0.362968*t3169 + 0.18652*t3224 - 0.012773*t3274 + t3051*t6029 - 1.*t1194*t2071*t6052 + t3091*t6067 + t3115*t6103 + t3147*t6116)*var2[3] + (0.362968*t1624 + 0.18652*t1819 - 0.012773*t1953 + t1445*t6103 + t1603*t6116 + t1194*t1208*t6029*t82 - 1.*t385*t6052*t82 + t1194*t1396*t6067*t82)*var2[4] + (0.18652*t2334 + 0.362968*t2372 - 0.012773*t2437 + t2167*t6029 + t2085*t6067 + t2249*t6103 + t2208*t6116)*var2[5] + (0.18652*t2606 + 0.362968*t2633 - 0.012773*t2673 + t2532*t6103 + t2511*t6116 + t2085*t6179 + t2507*t6194)*var2[13] + (-0.012773*t2859 + 0.362968*t2958 + 0.18652*t3003 + t2511*t6271 + t2787*t6286 + t1194*t6247*t82)*var2[14];
  p_output1[13]=var2[1] + (0.362968*t3675 + 0.18652*t3710 - 0.012773*t3722 + t2085*t6029 + t2507*t6067 + t2511*t6103 + t2787*t6116 + t1194*t6052*t82)*var2[3] + (0.362968*t3380 + 0.18652*t3444 - 0.012773*t3612 + t1194*t1208*t2071*t6029 - 1.*t2071*t385*t6052 + t1194*t1396*t2071*t6067 + t3327*t6103 + t3357*t6116)*var2[4] + (0.18652*t3877 + 0.362968*t3922 - 0.012773*t3970 + t3091*t6029 + t3784*t6067 + t3861*t6103 + t3831*t6116)*var2[5] + (0.18652*t4096 + 0.362968*t4125 - 0.012773*t4153 + t4087*t6103 + t4031*t6116 + t3784*t6179 + t4026*t6194)*var2[13] + (-0.012773*t4205 + 0.362968*t4238 + 0.18652*t4350 + t1194*t2071*t6247 + t4031*t6271 + t4192*t6286)*var2[14];
  p_output1[14]=var2[2] + (0.362968*t4959 + 0.18652*t5037 - 0.012773*t5070 - 1.*t1208*t385*t6029 - 1.*t1194*t6052 - 1.*t1396*t385*t6067 + t4933*t6103 + t4948*t6116)*var2[4] + (0.18652*t4531 + 0.362968*t4631 - 0.012773*t4679 - 1.*t1194*t1396*t6029 + t1194*t1208*t6067 + t4514*t6103 + t4493*t6116)*var2[5] + (0.18652*t4422 + 0.362968*t4440 - 0.012773*t4461 + t4418*t6103 + t4408*t6116 + t1194*t1208*t6179 + t1194*t1396*t6194)*var2[13] + (-0.012773*t4794 + 0.362968*t4824 + 0.18652*t4865 - 1.*t385*t6247 + t4408*t6271 + t4514*t6286)*var2[14];
  p_output1[15]=0;
}



void dT_left_shoulder_pitch_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
