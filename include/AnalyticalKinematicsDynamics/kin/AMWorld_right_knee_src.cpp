/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:10:18 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "AMWorld_right_knee_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t501;
  double t641;
  double t1071;
  double t110;
  double t180;
  double t403;
  double t1419;
  double t1131;
  double t1271;
  double t1330;
  double t1343;
  double t1444;
  double t1457;
  double t1519;
  double t1758;
  double t1826;
  double t1851;
  double t1864;
  double t1865;
  double t1906;
  double t1925;
  double t1926;
  double t1930;
  double t1941;
  double t2258;
  double t2387;
  double t2403;
  double t2540;
  double t2561;
  double t2589;
  double t2607;
  double t2634;
  double t2668;
  double t2679;
  double t1760;
  double t1780;
  double t1786;
  double t1934;
  double t2065;
  double t2241;
  double t2769;
  double t2791;
  double t4029;
  double t2879;
  double t2886;
  double t2923;
  double t3027;
  double t3065;
  double t3091;
  double t3141;
  double t3147;
  double t3282;
  double t3351;
  double t3368;
  double t3409;
  double t3577;
  double t3670;
  double t3846;
  double t3876;
  double t3879;
  double t3907;
  double t3920;
  double t3923;
  double t3927;
  double t3933;
  double t3977;
  double t4042;
  double t4055;
  double t4157;
  double t4196;
  double t4565;
  double t4398;
  double t4412;
  double t4414;
  double t4448;
  double t4449;
  double t4494;
  double t4525;
  double t4533;
  double t4360;
  double t4586;
  double t4603;
  double t4636;
  double t4662;
  double t4690;
  double t4694;
  double t4728;
  double t4755;
  double t4247;
  double t4249;
  double t4264;
  double t4265;
  double t4348;
  double t4796;
  double t4802;
  double t4811;
  double t4555;
  double t4757;
  double t4782;
  double t4840;
  double t4974;
  double t4983;
  double t4990;
  double t5017;
  double t5026;
  double t5045;
  double t5111;
  double t5129;
  double t5150;
  double t5098;
  double t5110;
  double t5152;
  double t5155;
  double t5166;
  double t5211;
  double t5225;
  double t5234;
  double t5255;
  double t5264;
  double t5265;
  double t5267;
  double t5401;
  double t5405;
  double t5418;
  double t5419;
  double t5425;
  double t5428;
  double t5430;
  double t5432;
  double t5301;
  double t5318;
  double t5336;
  double t5340;
  double t4872;
  double t4876;
  double t5441;
  double t5445;
  double t5447;
  double t5420;
  double t5436;
  double t5438;
  double t5567;
  double t5580;
  double t5590;
  double t5615;
  double t5628;
  double t5629;
  double t5652;
  double t5655;
  double t5663;
  double t5591;
  double t5634;
  double t5669;
  double t5674;
  double t5686;
  double t5689;
  double t5694;
  double t5698;
  double t5709;
  double t5711;
  double t5712;
  double t5713;
  double t5837;
  double t5838;
  double t5846;
  double t5847;
  double t5872;
  double t5873;
  double t5876;
  double t5883;
  double t5786;
  double t5787;
  double t5791;
  double t5792;
  double t5902;
  double t5917;
  double t5921;
  double t5853;
  double t5885;
  double t5892;
  double t6018;
  double t6032;
  double t6030;
  double t6034;
  double t6039;
  double t6047;
  double t6051;
  double t6063;
  double t6042;
  double t6065;
  double t6067;
  double t6069;
  double t6076;
  double t6078;
  double t6028;
  double t6068;
  double t6088;
  double t6092;
  double t6107;
  double t6113;
  double t6122;
  double t6133;
  double t6143;
  double t6144;
  double t6150;
  double t6152;
  double t6102;
  double t6135;
  double t6153;
  double t6156;
  double t6159;
  double t6165;
  double t6170;
  double t6171;
  double t6183;
  double t6185;
  double t6191;
  double t6195;
  double t28;
  double t2809;
  double t3156;
  double t3186;
  double t3214;
  double t3981;
  double t4064;
  double t4240;
  double t4242;
  double t4243;
  double t4276;
  double t4279;
  double t4284;
  double t4337;
  double t4344;
  double t4786;
  double t4842;
  double t4848;
  double t4867;
  double t4874;
  double t4900;
  double t4914;
  double t4916;
  double t4918;
  double t4938;
  double t4939;
  double t4942;
  double t4948;
  double t4995;
  double t5064;
  double t5075;
  double t5093;
  double t5165;
  double t5237;
  double t5239;
  double t5250;
  double t5268;
  double t5281;
  double t5282;
  double t5295;
  double t5299;
  double t5374;
  double t5439;
  double t5460;
  double t5462;
  double t5472;
  double t5486;
  double t5491;
  double t5493;
  double t5495;
  double t5500;
  double t5501;
  double t5504;
  double t5526;
  double t5549;
  double t5681;
  double t5704;
  double t5706;
  double t5707;
  double t5716;
  double t5733;
  double t5739;
  double t5743;
  double t5745;
  double t5820;
  double t5821;
  double t5822;
  double t5833;
  double t5836;
  double t5898;
  double t5926;
  double t5928;
  double t5931;
  double t5940;
  double t5945;
  double t5952;
  double t5980;
  double t5982;
  double t5989;
  double t5996;
  double t5999;
  double t6157;
  double t6179;
  double t6201;
  double t6203;
  double t6213;
  double t6222;
  double t6244;
  double t6247;
  double t6305;
  double t6310;
  double t6314;
  double t6315;
  double t6320;
  double t4945;
  double t5548;
  double t6015;
  double t6017;
  double t6407;
  double t6408;
  double t6410;
  double t6415;
  double t6417;
  double t6418;
  double t6414;
  double t6427;
  double t6429;
  double t6440;
  double t6442;
  double t6443;
  double t6403;
  double t6436;
  double t6448;
  double t6451;
  double t6454;
  double t6455;
  double t6460;
  double t6461;
  double t6475;
  double t6481;
  double t6485;
  double t6487;
  double t6452;
  double t6462;
  double t6490;
  double t6497;
  double t6513;
  double t6519;
  double t6527;
  double t6565;
  double t6571;
  double t6585;
  double t6586;
  double t6597;
  double t6262;
  double t6275;
  double t6277;
  double t6284;
  double t6505;
  double t6566;
  double t6608;
  double t6613;
  double t6622;
  double t6630;
  double t6637;
  double t6640;
  double t6354;
  double t6358;
  double t6361;
  double t6365;
  double t6679;
  double t6681;
  double t6689;
  double t6692;
  double t6696;
  double t6727;
  double t6731;
  double t6733;
  double t6743;
  double t6755;
  double t6763;
  double t6722;
  double t6739;
  double t6765;
  double t6766;
  double t6779;
  double t6781;
  double t6784;
  double t6789;
  double t6801;
  double t6809;
  double t6815;
  double t6816;
  double t6778;
  double t6791;
  double t6821;
  double t6833;
  double t6837;
  double t6838;
  double t6840;
  double t6841;
  double t6843;
  double t6856;
  double t6859;
  double t6860;
  double t6835;
  double t6842;
  double t6873;
  double t6874;
  double t6896;
  double t6900;
  double t6901;
  double t6912;
  double t6930;
  double t6932;
  double t6933;
  double t6935;
  double t6936;
  t501 = Cos(var1[20]);
  t641 = -1.*t501;
  t1071 = 1. + t641;
  t110 = Cos(var1[19]);
  t180 = -1.*t110;
  t403 = 1. + t180;
  t1419 = Sin(var1[20]);
  t1131 = -0.8656776547239999*t1071;
  t1271 = 1. + t1131;
  t1330 = -0.657905*t1271;
  t1343 = 0.0883716288660118*t1071;
  t1444 = -0.930418*t1419;
  t1457 = 0. + t1444;
  t1519 = -0.707107*t1457;
  t1758 = t1330 + t1343 + t1519;
  t1826 = -0.134322983001*t1071;
  t1851 = 1. + t1826;
  t1864 = -0.259155*t1851;
  t1865 = 0.22434503092393926*t1071;
  t1906 = -0.366501*t1419;
  t1925 = 0. + t1906;
  t1926 = -0.707107*t1925;
  t1930 = t1864 + t1865 + t1926;
  t1941 = Sin(var1[19]);
  t2258 = -1.000000637725*t1071;
  t2387 = 1. + t2258;
  t2403 = -0.707107*t2387;
  t2540 = 0.366501*t1419;
  t2561 = 0. + t2540;
  t2589 = -0.259155*t2561;
  t2607 = 0.930418*t1419;
  t2634 = 0. + t2607;
  t2668 = -0.657905*t2634;
  t2679 = t2403 + t2589 + t2668;
  t1760 = -0.340999127418*t403*t1758;
  t1780 = -0.134322983001*t403;
  t1786 = 1. + t1780;
  t1934 = t1786*t1930;
  t2065 = 0.366501*t1941;
  t2241 = 0. + t2065;
  t2769 = t2241*t2679;
  t2791 = 0. + t1760 + t1934 + t2769;
  t4029 = Sin(var1[18]);
  t2879 = -0.8656776547239999*t403;
  t2886 = 1. + t2879;
  t2923 = t2886*t1758;
  t3027 = -0.340999127418*t403*t1930;
  t3065 = 0.930418*t1941;
  t3091 = 0. + t3065;
  t3141 = t3091*t2679;
  t3147 = 0. + t2923 + t3027 + t3141;
  t3282 = Cos(var1[18]);
  t3351 = -1.*t3282;
  t3368 = 1. + t3351;
  t3409 = -1.000000637725*t3368;
  t3577 = 1. + t3409;
  t3670 = -0.930418*t1941;
  t3846 = 0. + t3670;
  t3876 = t3846*t1758;
  t3879 = -0.366501*t1941;
  t3907 = 0. + t3879;
  t3920 = t3907*t1930;
  t3923 = -1.000000637725*t403;
  t3927 = 1. + t3923;
  t3933 = t3927*t2679;
  t3977 = 0. + t3876 + t3920 + t3933;
  t4042 = 0.930418*t4029;
  t4055 = 0. + t4042;
  t4157 = -0.366501*t4029;
  t4196 = 0. + t4157;
  t4565 = Cos(var1[17]);
  t4398 = 0.366501*t4029;
  t4412 = 0. + t4398;
  t4414 = t4412*t3977;
  t4448 = 0.340999127418*t3368*t2791;
  t4449 = -0.134322983001*t3368;
  t4494 = 1. + t4449;
  t4525 = t4494*t3147;
  t4533 = 0. + t4414 + t4448 + t4525;
  t4360 = Sin(var1[17]);
  t4586 = -0.930418*t4029;
  t4603 = 0. + t4586;
  t4636 = t4603*t3977;
  t4662 = -0.8656776547239999*t3368;
  t4690 = 1. + t4662;
  t4694 = t4690*t2791;
  t4728 = 0.340999127418*t3368*t3147;
  t4755 = 0. + t4636 + t4694 + t4728;
  t4247 = t3577*t3977;
  t4249 = t4055*t2791;
  t4264 = t4196*t3147;
  t4265 = 0. + t4247 + t4249 + t4264;
  t4348 = Cos(var1[5]);
  t4796 = t4565*t4533;
  t4802 = -1.*t4360*t4755;
  t4811 = 0. + t4796 + t4802;
  t4555 = t4360*t4533;
  t4757 = t4565*t4755;
  t4782 = 0. + t4555 + t4757;
  t4840 = Sin(var1[5]);
  t4974 = -0.366501*t1271;
  t4983 = -0.3172717261340007*t1071;
  t4990 = t4974 + t4983;
  t5017 = 0.930418*t1851;
  t5026 = 0.12497652119782442*t1071;
  t5045 = t5017 + t5026;
  t5111 = 0.930418*t2561;
  t5129 = -0.366501*t2634;
  t5150 = t5111 + t5129;
  t5098 = -0.340999127418*t403*t4990;
  t5110 = t1786*t5045;
  t5152 = t2241*t5150;
  t5155 = 0. + t5098 + t5110 + t5152;
  t5166 = t2886*t4990;
  t5211 = -0.340999127418*t403*t5045;
  t5225 = t3091*t5150;
  t5234 = 0. + t5166 + t5211 + t5225;
  t5255 = t4990*t3846;
  t5264 = t5045*t3907;
  t5265 = t3927*t5150;
  t5267 = 0. + t5255 + t5264 + t5265;
  t5401 = t4412*t5267;
  t5405 = 0.340999127418*t3368*t5155;
  t5418 = t4494*t5234;
  t5419 = 0. + t5401 + t5405 + t5418;
  t5425 = t4603*t5267;
  t5428 = t4690*t5155;
  t5430 = 0.340999127418*t3368*t5234;
  t5432 = 0. + t5425 + t5428 + t5430;
  t5301 = t3577*t5267;
  t5318 = t4055*t5155;
  t5336 = t4196*t5234;
  t5340 = 0. + t5301 + t5318 + t5336;
  t4872 = Sin(var1[4]);
  t4876 = Cos(var1[4]);
  t5441 = t4565*t5419;
  t5445 = -1.*t4360*t5432;
  t5447 = 0. + t5441 + t5445;
  t5420 = t4360*t5419;
  t5436 = t4565*t5432;
  t5438 = 0. + t5420 + t5436;
  t5567 = 0.657905*t1271;
  t5580 = -0.0883716288660118*t1071;
  t5590 = t5567 + t5580 + t1519;
  t5615 = 0.259155*t1851;
  t5628 = -0.22434503092393926*t1071;
  t5629 = t5615 + t5628 + t1926;
  t5652 = 0.259155*t2561;
  t5655 = 0.657905*t2634;
  t5663 = t2403 + t5652 + t5655;
  t5591 = -0.340999127418*t403*t5590;
  t5634 = t1786*t5629;
  t5669 = t2241*t5663;
  t5674 = 0. + t5591 + t5634 + t5669;
  t5686 = t2886*t5590;
  t5689 = -0.340999127418*t403*t5629;
  t5694 = t3091*t5663;
  t5698 = 0. + t5686 + t5689 + t5694;
  t5709 = t3846*t5590;
  t5711 = t3907*t5629;
  t5712 = t3927*t5663;
  t5713 = 0. + t5709 + t5711 + t5712;
  t5837 = t4412*t5713;
  t5838 = 0.340999127418*t3368*t5674;
  t5846 = t4494*t5698;
  t5847 = 0. + t5837 + t5838 + t5846;
  t5872 = t4603*t5713;
  t5873 = t4690*t5674;
  t5876 = 0.340999127418*t3368*t5698;
  t5883 = 0. + t5872 + t5873 + t5876;
  t5786 = t3577*t5713;
  t5787 = t4055*t5674;
  t5791 = t4196*t5698;
  t5792 = 0. + t5786 + t5787 + t5791;
  t5902 = t4565*t5847;
  t5917 = -1.*t4360*t5883;
  t5921 = 0. + t5902 + t5917;
  t5853 = t4360*t5847;
  t5885 = t4565*t5883;
  t5892 = 0. + t5853 + t5885;
  t6018 = Cos(var1[3]);
  t6032 = Sin(var1[3]);
  t6030 = t6018*t4348*t4872;
  t6034 = t6032*t4840;
  t6039 = t6030 + t6034;
  t6047 = -1.*t4348*t6032;
  t6051 = t6018*t4872*t4840;
  t6063 = t6047 + t6051;
  t6042 = -1.*t4360*t6039;
  t6065 = t4565*t6063;
  t6067 = t6042 + t6065;
  t6069 = t4565*t6039;
  t6076 = t4360*t6063;
  t6078 = t6069 + t6076;
  t6028 = t6018*t4876*t4196;
  t6068 = 0.340999127418*t3368*t6067;
  t6088 = t4494*t6078;
  t6092 = t6028 + t6068 + t6088;
  t6107 = t6018*t4876*t4055;
  t6113 = t4690*t6067;
  t6122 = 0.340999127418*t3368*t6078;
  t6133 = t6107 + t6113 + t6122;
  t6143 = t3577*t6018*t4876;
  t6144 = t4603*t6067;
  t6150 = t4412*t6078;
  t6152 = t6143 + t6144 + t6150;
  t6102 = t3091*t6092;
  t6135 = t2241*t6133;
  t6153 = t3927*t6152;
  t6156 = t6102 + t6135 + t6153;
  t6159 = t2886*t6092;
  t6165 = -0.340999127418*t403*t6133;
  t6170 = t3846*t6152;
  t6171 = t6159 + t6165 + t6170;
  t6183 = -0.340999127418*t403*t6092;
  t6185 = t1786*t6133;
  t6191 = t3907*t6152;
  t6195 = t6183 + t6185 + t6191;
  t28 = 3.6361499999859603e-7*var2[20];
  t2809 = -0.366501*t2791;
  t3156 = -0.930418*t3147;
  t3186 = 0. + t2809 + t3156;
  t3214 = var2[18]*t3186;
  t3981 = -1.*t3577*t3977;
  t4064 = -1.*t4055*t2791;
  t4240 = -1.*t4196*t3147;
  t4242 = 0. + t3981 + t4064 + t4240;
  t4243 = var2[17]*t4242;
  t4276 = var2[5]*t4265;
  t4279 = 0.366501*t1758;
  t4284 = -0.930418*t1930;
  t4337 = 0. + t4279 + t4284;
  t4344 = var2[19]*t4337;
  t4786 = t4348*t4782;
  t4842 = -1.*t4811*t4840;
  t4848 = 0. + t4786 + t4842;
  t4867 = var2[4]*t4848;
  t4874 = -1.*t4265*t4872;
  t4900 = t4348*t4811;
  t4914 = t4782*t4840;
  t4916 = 0. + t4900 + t4914;
  t4918 = t4876*t4916;
  t4938 = 0. + t4874 + t4918;
  t4939 = var2[3]*t4938;
  t4942 = t28 + t3214 + t4243 + t4276 + t4344 + t4867 + t4939;
  t4948 = 1.000000637725*var2[20];
  t4995 = 0.366501*t4990;
  t5064 = -0.930418*t5045;
  t5075 = 0. + t4995 + t5064;
  t5093 = var2[19]*t5075;
  t5165 = -0.366501*t5155;
  t5237 = -0.930418*t5234;
  t5239 = 0. + t5165 + t5237;
  t5250 = var2[18]*t5239;
  t5268 = -1.*t3577*t5267;
  t5281 = -1.*t4055*t5155;
  t5282 = -1.*t4196*t5234;
  t5295 = 0. + t5268 + t5281 + t5282;
  t5299 = var2[17]*t5295;
  t5374 = var2[5]*t5340;
  t5439 = t4348*t5438;
  t5460 = -1.*t5447*t4840;
  t5462 = 0. + t5439 + t5460;
  t5472 = var2[4]*t5462;
  t5486 = -1.*t5340*t4872;
  t5491 = t4348*t5447;
  t5493 = t5438*t4840;
  t5495 = 0. + t5491 + t5493;
  t5500 = t4876*t5495;
  t5501 = 0. + t5486 + t5500;
  t5504 = var2[3]*t5501;
  t5526 = t4948 + t5093 + t5250 + t5299 + t5374 + t5472 + t5504;
  t5549 = -3.6361499999859603e-7*var2[20];
  t5681 = -0.366501*t5674;
  t5704 = -0.930418*t5698;
  t5706 = 0. + t5681 + t5704;
  t5707 = var2[18]*t5706;
  t5716 = -1.*t3577*t5713;
  t5733 = -1.*t4055*t5674;
  t5739 = -1.*t4196*t5698;
  t5743 = 0. + t5716 + t5733 + t5739;
  t5745 = var2[17]*t5743;
  t5820 = var2[5]*t5792;
  t5821 = 0.366501*t5590;
  t5822 = -0.930418*t5629;
  t5833 = 0. + t5821 + t5822;
  t5836 = var2[19]*t5833;
  t5898 = t4348*t5892;
  t5926 = -1.*t5921*t4840;
  t5928 = 0. + t5898 + t5926;
  t5931 = var2[4]*t5928;
  t5940 = -1.*t5792*t4872;
  t5945 = t4348*t5921;
  t5952 = t5892*t4840;
  t5980 = 0. + t5945 + t5952;
  t5982 = t4876*t5980;
  t5989 = 0. + t5940 + t5982;
  t5996 = var2[3]*t5989;
  t5999 = t5549 + t5707 + t5745 + t5820 + t5836 + t5931 + t5996;
  t6157 = t2561*t6156;
  t6179 = -0.340999127418*t1071*t6171;
  t6201 = t1851*t6195;
  t6203 = t6157 + t6179 + t6201;
  t6213 = t2634*t6156;
  t6222 = t1271*t6171;
  t6244 = -0.340999127418*t1071*t6195;
  t6247 = t6213 + t6222 + t6244;
  t6305 = t2387*t6156;
  t6310 = t1457*t6171;
  t6314 = t1925*t6195;
  t6315 = t6305 + t6310 + t6314;
  t6320 = -0.707107*t6315;
  t4945 = 0.000309*t4942;
  t5548 = 0.038903*t5526;
  t6015 = -0.00004*t5999;
  t6017 = t4945 + t5548 + t6015;
  t6407 = t4348*t6032*t4872;
  t6408 = -1.*t6018*t4840;
  t6410 = t6407 + t6408;
  t6415 = t6018*t4348;
  t6417 = t6032*t4872*t4840;
  t6418 = t6415 + t6417;
  t6414 = -1.*t4360*t6410;
  t6427 = t4565*t6418;
  t6429 = t6414 + t6427;
  t6440 = t4565*t6410;
  t6442 = t4360*t6418;
  t6443 = t6440 + t6442;
  t6403 = t4876*t4196*t6032;
  t6436 = 0.340999127418*t3368*t6429;
  t6448 = t4494*t6443;
  t6451 = t6403 + t6436 + t6448;
  t6454 = t4876*t4055*t6032;
  t6455 = t4690*t6429;
  t6460 = 0.340999127418*t3368*t6443;
  t6461 = t6454 + t6455 + t6460;
  t6475 = t3577*t4876*t6032;
  t6481 = t4603*t6429;
  t6485 = t4412*t6443;
  t6487 = t6475 + t6481 + t6485;
  t6452 = t3091*t6451;
  t6462 = t2241*t6461;
  t6490 = t3927*t6487;
  t6497 = t6452 + t6462 + t6490;
  t6513 = t2886*t6451;
  t6519 = -0.340999127418*t403*t6461;
  t6527 = t3846*t6487;
  t6565 = t6513 + t6519 + t6527;
  t6571 = -0.340999127418*t403*t6451;
  t6585 = t1786*t6461;
  t6586 = t3907*t6487;
  t6597 = t6571 + t6585 + t6586;
  t6262 = 0.004296*t4942;
  t6275 = 0.000309*t5526;
  t6277 = -0.001393*t5999;
  t6284 = t6262 + t6275 + t6277;
  t6505 = t2561*t6497;
  t6566 = -0.340999127418*t1071*t6565;
  t6608 = t1851*t6597;
  t6613 = t6505 + t6566 + t6608;
  t6622 = t2634*t6497;
  t6630 = t1271*t6565;
  t6637 = -0.340999127418*t1071*t6597;
  t6640 = t6622 + t6630 + t6637;
  t6354 = -0.001393*t4942;
  t6358 = -0.00004*t5526;
  t6361 = 0.036157*t5999;
  t6365 = t6354 + t6358 + t6361;
  t6679 = t2387*t6497;
  t6681 = t1457*t6565;
  t6689 = t1925*t6597;
  t6692 = t6679 + t6681 + t6689;
  t6696 = -0.707107*t6692;
  t6727 = -1.*t4876*t4348*t4360;
  t6731 = t4565*t4876*t4840;
  t6733 = t6727 + t6731;
  t6743 = t4565*t4876*t4348;
  t6755 = t4876*t4360*t4840;
  t6763 = t6743 + t6755;
  t6722 = -1.*t4196*t4872;
  t6739 = 0.340999127418*t3368*t6733;
  t6765 = t4494*t6763;
  t6766 = t6722 + t6739 + t6765;
  t6779 = -1.*t4055*t4872;
  t6781 = t4690*t6733;
  t6784 = 0.340999127418*t3368*t6763;
  t6789 = t6779 + t6781 + t6784;
  t6801 = -1.*t3577*t4872;
  t6809 = t4603*t6733;
  t6815 = t4412*t6763;
  t6816 = t6801 + t6809 + t6815;
  t6778 = t3091*t6766;
  t6791 = t2241*t6789;
  t6821 = t3927*t6816;
  t6833 = t6778 + t6791 + t6821;
  t6837 = t2886*t6766;
  t6838 = -0.340999127418*t403*t6789;
  t6840 = t3846*t6816;
  t6841 = t6837 + t6838 + t6840;
  t6843 = -0.340999127418*t403*t6766;
  t6856 = t1786*t6789;
  t6859 = t3907*t6816;
  t6860 = t6843 + t6856 + t6859;
  t6835 = t2561*t6833;
  t6842 = -0.340999127418*t1071*t6841;
  t6873 = t1851*t6860;
  t6874 = t6835 + t6842 + t6873;
  t6896 = t2634*t6833;
  t6900 = t1271*t6841;
  t6901 = -0.340999127418*t1071*t6860;
  t6912 = t6896 + t6900 + t6901;
  t6930 = t2387*t6833;
  t6932 = t1457*t6841;
  t6933 = t1925*t6860;
  t6935 = t6930 + t6932 + t6933;
  t6936 = -0.707107*t6935;
  p_output1[0]=t6017*(0.930418*t6203 - 0.366501*t6247) + t6284*(-0.259155*t6203 - 0.657905*t6247 + t6320) + (0.259155*t6203 + 0.657905*t6247 + t6320)*t6365;
  p_output1[1]=t6017*(0.930418*t6613 - 0.366501*t6640) + t6284*(-0.259155*t6613 - 0.657905*t6640 + t6696) + t6365*(0.259155*t6613 + 0.657905*t6640 + t6696);
  p_output1[2]=t6017*(0.930418*t6874 - 0.366501*t6912) + t6284*(-0.259155*t6874 - 0.657905*t6912 + t6936) + t6365*(0.259155*t6874 + 0.657905*t6912 + t6936);
}



void AMWorld_right_knee_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
