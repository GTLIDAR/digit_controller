/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:33:28 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dR_hip_flexion_left_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t145;
  double t489;
  double t139;
  double t142;
  double t144;
  double t1209;
  double t824;
  double t1025;
  double t1300;
  double t5;
  double t6;
  double t107;
  double t1042;
  double t1341;
  double t1593;
  double t2578;
  double t2699;
  double t2718;
  double t2781;
  double t3045;
  double t4001;
  double t4118;
  double t4168;
  double t4169;
  double t4170;
  double t4175;
  double t4286;
  double t4288;
  double t4797;
  double t4927;
  double t1597;
  double t1897;
  double t2500;
  double t2754;
  double t3071;
  double t3149;
  double t3150;
  double t3151;
  double t5016;
  double t3193;
  double t3329;
  double t3432;
  double t3531;
  double t3625;
  double t3626;
  double t3779;
  double t3849;
  double t3156;
  double t3183;
  double t5601;
  double t5713;
  double t5734;
  double t5740;
  double t5602;
  double t5662;
  double t5686;
  double t5700;
  double t5748;
  double t5750;
  double t5763;
  double t5766;
  double t5767;
  double t5032;
  double t5035;
  double t5205;
  double t5213;
  double t5802;
  double t5818;
  double t5827;
  double t5792;
  double t5793;
  double t5795;
  double t5281;
  double t5299;
  double t5751;
  double t5770;
  double t5776;
  double t5379;
  double t5396;
  double t5430;
  double t5432;
  double t5561;
  double t5562;
  double t5891;
  double t5911;
  double t5912;
  double t5913;
  double t5916;
  double t5926;
  double t5933;
  double t5937;
  double t5942;
  double t5963;
  double t5964;
  double t5968;
  double t5954;
  double t5955;
  double t5956;
  double t5927;
  double t5943;
  double t5949;
  double t6071;
  double t6072;
  double t6084;
  double t6055;
  double t6056;
  double t6058;
  double t6061;
  double t6092;
  double t6099;
  double t6103;
  double t6104;
  double t6109;
  double t6126;
  double t6128;
  double t6130;
  double t6135;
  double t6102;
  double t6110;
  double t6113;
  double t6114;
  double t6116;
  double t6117;
  double t6119;
  double t6120;
  double t6189;
  double t6190;
  double t6229;
  double t6232;
  double t6233;
  double t6236;
  double t6203;
  double t6207;
  double t6208;
  double t6215;
  double t6187;
  double t6188;
  double t6192;
  double t6196;
  double t6322;
  double t6325;
  double t6326;
  double t6329;
  double t6287;
  double t6292;
  double t6298;
  double t6300;
  double t6301;
  double t6302;
  double t6303;
  double t6374;
  double t6384;
  double t6385;
  double t6390;
  double t6394;
  double t6396;
  double t6411;
  double t6412;
  double t6432;
  double t6433;
  double t6388;
  double t6397;
  double t6400;
  double t6401;
  double t6405;
  double t6406;
  double t6407;
  double t6408;
  double t6479;
  double t6482;
  double t6483;
  double t6472;
  double t6473;
  double t6476;
  double t6477;
  double t6486;
  double t6490;
  double t6493;
  double t6494;
  double t6495;
  double t6523;
  double t6527;
  double t6529;
  double t6515;
  double t6519;
  double t6520;
  double t6491;
  double t6497;
  double t6498;
  double t6565;
  double t6566;
  double t6572;
  double t6578;
  double t6582;
  double t6607;
  double t6609;
  double t6610;
  double t6595;
  double t6598;
  double t6600;
  double t6570;
  double t6585;
  double t6588;
  double t6685;
  double t6688;
  double t6713;
  double t6715;
  double t6720;
  double t6721;
  double t6699;
  double t6701;
  double t6702;
  double t6706;
  double t6683;
  double t6684;
  double t6689;
  double t6697;
  double t6777;
  double t6778;
  double t6779;
  double t6780;
  double t6749;
  double t6750;
  double t6752;
  double t6762;
  double t6763;
  double t6768;
  double t6769;
  double t6813;
  double t6815;
  double t6816;
  double t6818;
  double t6819;
  double t6820;
  double t6832;
  double t6836;
  double t6837;
  double t6824;
  double t6826;
  double t6827;
  double t6817;
  double t6821;
  double t6822;
  double t6865;
  double t6866;
  double t6867;
  double t6871;
  double t6873;
  double t6874;
  double t6895;
  double t6897;
  double t6898;
  double t6887;
  double t6889;
  double t6890;
  double t6870;
  double t6875;
  double t6876;
  double t6926;
  double t6928;
  double t6929;
  double t6932;
  double t6933;
  double t6934;
  double t6949;
  double t6950;
  double t6951;
  double t6952;
  double t6930;
  double t6935;
  double t6939;
  double t6940;
  double t6942;
  double t6943;
  double t6946;
  double t6947;
  double t7001;
  double t7004;
  double t7005;
  double t7007;
  double t6988;
  double t6990;
  double t6991;
  double t6992;
  double t6982;
  double t6983;
  double t6985;
  double t6986;
  double t7040;
  double t7044;
  double t7045;
  double t7046;
  double t7028;
  double t7029;
  double t7031;
  double t7036;
  double t7037;
  double t7038;
  double t3155;
  double t3980;
  double t5180;
  double t5193;
  double t5272;
  double t5303;
  double t5402;
  double t5407;
  double t5412;
  double t5530;
  double t5535;
  double t5573;
  double t5574;
  double t5787;
  double t5798;
  double t5828;
  double t5841;
  double t5853;
  double t5855;
  double t5859;
  double t5868;
  double t5871;
  double t5874;
  double t5875;
  double t5881;
  double t5887;
  double t5950;
  double t5958;
  double t5972;
  double t5973;
  double t5976;
  double t5979;
  double t5991;
  double t5992;
  double t6024;
  double t6037;
  double t6042;
  double t6043;
  double t6044;
  double t6115;
  double t6122;
  double t6138;
  double t6139;
  double t6142;
  double t6143;
  double t6155;
  double t6156;
  double t6161;
  double t6173;
  double t6175;
  double t6178;
  double t6181;
  double t6197;
  double t6222;
  double t6237;
  double t6238;
  double t6244;
  double t6245;
  double t6247;
  double t6250;
  double t6262;
  double t6264;
  double t6265;
  double t6267;
  double t6269;
  double t6299;
  double t6319;
  double t6331;
  double t6333;
  double t6334;
  double t6335;
  double t6336;
  double t6337;
  double t6339;
  double t6342;
  double t6346;
  double t6351;
  double t6352;
  double t6404;
  double t6409;
  double t6437;
  double t6438;
  double t6444;
  double t6447;
  double t6448;
  double t6458;
  double t6459;
  double t6460;
  double t6461;
  double t6467;
  double t6468;
  double t6514;
  double t6522;
  double t6536;
  double t6537;
  double t6546;
  double t6547;
  double t6548;
  double t6554;
  double t6555;
  double t6557;
  double t6558;
  double t6559;
  double t6560;
  double t6590;
  double t6602;
  double t6615;
  double t6616;
  double t6618;
  double t6621;
  double t6623;
  double t6624;
  double t6625;
  double t6626;
  double t6628;
  double t6629;
  double t6630;
  double t6640;
  double t6644;
  double t6647;
  double t6648;
  double t6658;
  double t6659;
  double t6661;
  double t6662;
  double t6663;
  double t6664;
  double t6669;
  double t6671;
  double t6672;
  double t6698;
  double t6711;
  double t6722;
  double t6723;
  double t6725;
  double t6731;
  double t6732;
  double t6733;
  double t6734;
  double t6735;
  double t6739;
  double t6740;
  double t6741;
  double t6755;
  double t6770;
  double t6781;
  double t6782;
  double t6783;
  double t6787;
  double t6788;
  double t6789;
  double t6791;
  double t6795;
  double t6798;
  double t6800;
  double t6802;
  double t6823;
  double t6828;
  double t6838;
  double t6839;
  double t6842;
  double t6848;
  double t6851;
  double t6852;
  double t6853;
  double t6854;
  double t6858;
  double t6859;
  double t6860;
  double t6880;
  double t6894;
  double t6899;
  double t6900;
  double t6902;
  double t6903;
  double t6904;
  double t6905;
  double t6908;
  double t6911;
  double t6912;
  double t6914;
  double t6915;
  double t6941;
  double t6948;
  double t6953;
  double t6955;
  double t6957;
  double t6958;
  double t6959;
  double t6962;
  double t6967;
  double t6968;
  double t6969;
  double t6971;
  double t6972;
  double t6987;
  double t6993;
  double t7012;
  double t7014;
  double t7016;
  double t7017;
  double t7018;
  double t7019;
  double t7020;
  double t7021;
  double t7022;
  double t7023;
  double t7024;
  double t7032;
  double t7039;
  double t7047;
  double t7048;
  double t7049;
  double t7050;
  double t7054;
  double t7055;
  double t7058;
  double t7061;
  double t7068;
  double t7069;
  double t7070;
  t145 = Cos(var1[3]);
  t489 = Cos(var1[4]);
  t139 = Cos(var1[7]);
  t142 = -1.*t139;
  t144 = 1. + t142;
  t1209 = Cos(var1[5]);
  t824 = Cos(var1[6]);
  t1025 = Sin(var1[5]);
  t1300 = Sin(var1[6]);
  t5 = Cos(var1[8]);
  t6 = -1.*t5;
  t107 = 1. + t6;
  t1042 = t145*t489*t824*t1025;
  t1341 = -1.*t145*t489*t1209*t1300;
  t1593 = t1042 + t1341;
  t2578 = t145*t489*t1209*t824;
  t2699 = t145*t489*t1025*t1300;
  t2718 = t2578 + t2699;
  t2781 = Sin(var1[4]);
  t3045 = Sin(var1[7]);
  t4001 = -1.000000637725*t144;
  t4118 = 1. + t4001;
  t4168 = -1.*t145*t4118*t2781;
  t4169 = -0.930418*t3045;
  t4170 = 0. + t4169;
  t4175 = t1593*t4170;
  t4286 = -0.366501*t3045;
  t4288 = 0. + t4286;
  t4797 = t2718*t4288;
  t4927 = t4168 + t4175 + t4797;
  t1597 = -0.340999127418*t144*t1593;
  t1897 = -0.134322983001*t144;
  t2500 = 1. + t1897;
  t2754 = t2500*t2718;
  t3071 = 0.366501*t3045;
  t3149 = 0. + t3071;
  t3150 = -1.*t145*t2781*t3149;
  t3151 = t1597 + t2754 + t3150;
  t5016 = Sin(var1[8]);
  t3193 = -0.8656776547239999*t144;
  t3329 = 1. + t3193;
  t3432 = t3329*t1593;
  t3531 = -0.340999127418*t144*t2718;
  t3625 = 0.930418*t3045;
  t3626 = 0. + t3625;
  t3779 = -1.*t145*t2781*t3626;
  t3849 = t3432 + t3531 + t3779;
  t3156 = -0.134322983001*t107;
  t3183 = 1. + t3156;
  t5601 = Sin(var1[3]);
  t5713 = t145*t1209*t2781;
  t5734 = t5601*t1025;
  t5740 = t5713 + t5734;
  t5602 = -1.*t1209*t5601;
  t5662 = t145*t2781*t1025;
  t5686 = t5602 + t5662;
  t5700 = t824*t5686;
  t5748 = -1.*t5740*t1300;
  t5750 = t5700 + t5748;
  t5763 = -1.*t824*t5740;
  t5766 = -1.*t5686*t1300;
  t5767 = t5763 + t5766;
  t5032 = -0.366501*t5016;
  t5035 = 0. + t5032;
  t5205 = -1.000000637725*t107;
  t5213 = 1. + t5205;
  t5802 = t5767*t4170;
  t5818 = t5750*t4288;
  t5827 = t5802 + t5818;
  t5792 = t2500*t5750;
  t5793 = -0.340999127418*t144*t5767;
  t5795 = t5792 + t5793;
  t5281 = -0.930418*t5016;
  t5299 = 0. + t5281;
  t5751 = -0.340999127418*t144*t5750;
  t5770 = t3329*t5767;
  t5776 = t5751 + t5770;
  t5379 = 0.366501*t5016;
  t5396 = 0. + t5379;
  t5430 = -0.8656776547239999*t107;
  t5432 = 1. + t5430;
  t5561 = 0.930418*t5016;
  t5562 = 0. + t5561;
  t5891 = t1209*t5601;
  t5911 = -1.*t145*t2781*t1025;
  t5912 = t5891 + t5911;
  t5913 = t824*t5912;
  t5916 = t5740*t1300;
  t5926 = t5913 + t5916;
  t5933 = t824*t5740;
  t5937 = -1.*t5912*t1300;
  t5942 = t5933 + t5937;
  t5963 = t5942*t4170;
  t5964 = t5926*t4288;
  t5968 = t5963 + t5964;
  t5954 = t2500*t5926;
  t5955 = -0.340999127418*t144*t5942;
  t5956 = t5954 + t5955;
  t5927 = -0.340999127418*t144*t5926;
  t5943 = t3329*t5942;
  t5949 = t5927 + t5943;
  t6071 = -1.*t1209*t5601*t2781;
  t6072 = t145*t1025;
  t6084 = t6071 + t6072;
  t6055 = -1.*t145*t1209;
  t6056 = -1.*t5601*t2781*t1025;
  t6058 = t6055 + t6056;
  t6061 = t824*t6058;
  t6092 = -1.*t6084*t1300;
  t6099 = t6061 + t6092;
  t6103 = t824*t6084;
  t6104 = t6058*t1300;
  t6109 = t6103 + t6104;
  t6126 = -1.*t489*t4118*t5601;
  t6128 = t6099*t4170;
  t6130 = t6109*t4288;
  t6135 = t6126 + t6128 + t6130;
  t6102 = -0.340999127418*t144*t6099;
  t6110 = t2500*t6109;
  t6113 = -1.*t489*t5601*t3149;
  t6114 = t6102 + t6110 + t6113;
  t6116 = t3329*t6099;
  t6117 = -0.340999127418*t144*t6109;
  t6119 = -1.*t489*t5601*t3626;
  t6120 = t6116 + t6117 + t6119;
  t6189 = t5686*t1300;
  t6190 = t5933 + t6189;
  t6229 = -0.930418*t139*t5750;
  t6232 = -0.366501*t139*t6190;
  t6233 = -1.000000637725*t145*t489*t3045;
  t6236 = t6229 + t6232 + t6233;
  t6203 = 0.366501*t145*t489*t139;
  t6207 = -0.340999127418*t5750*t3045;
  t6208 = -0.134322983001*t6190*t3045;
  t6215 = t6203 + t6207 + t6208;
  t6187 = 0.930418*t145*t489*t139;
  t6188 = -0.8656776547239999*t5750*t3045;
  t6192 = -0.340999127418*t6190*t3045;
  t6196 = t6187 + t6188 + t6192;
  t6322 = t145*t489*t4118;
  t6325 = t5750*t4170;
  t6326 = t6190*t4288;
  t6329 = t6322 + t6325 + t6326;
  t6287 = t2500*t6190;
  t6292 = t145*t489*t3149;
  t6298 = t5751 + t6287 + t6292;
  t6300 = t3329*t5750;
  t6301 = -0.340999127418*t144*t6190;
  t6302 = t145*t489*t3626;
  t6303 = t6300 + t6301 + t6302;
  t6374 = t489*t824*t5601*t1025;
  t6384 = -1.*t489*t1209*t5601*t1300;
  t6385 = t6374 + t6384;
  t6390 = t489*t1209*t824*t5601;
  t6394 = t489*t5601*t1025*t1300;
  t6396 = t6390 + t6394;
  t6411 = -1.*t4118*t5601*t2781;
  t6412 = t6385*t4170;
  t6432 = t6396*t4288;
  t6433 = t6411 + t6412 + t6432;
  t6388 = -0.340999127418*t144*t6385;
  t6397 = t2500*t6396;
  t6400 = -1.*t5601*t2781*t3149;
  t6401 = t6388 + t6397 + t6400;
  t6405 = t3329*t6385;
  t6406 = -0.340999127418*t144*t6396;
  t6407 = -1.*t5601*t2781*t3626;
  t6408 = t6405 + t6406 + t6407;
  t6479 = t1209*t5601*t2781;
  t6482 = -1.*t145*t1025;
  t6483 = t6479 + t6482;
  t6472 = t145*t1209;
  t6473 = t5601*t2781*t1025;
  t6476 = t6472 + t6473;
  t6477 = t824*t6476;
  t6486 = -1.*t6483*t1300;
  t6490 = t6477 + t6486;
  t6493 = -1.*t824*t6483;
  t6494 = -1.*t6476*t1300;
  t6495 = t6493 + t6494;
  t6523 = t6495*t4170;
  t6527 = t6490*t4288;
  t6529 = t6523 + t6527;
  t6515 = t2500*t6490;
  t6519 = -0.340999127418*t144*t6495;
  t6520 = t6515 + t6519;
  t6491 = -0.340999127418*t144*t6490;
  t6497 = t3329*t6495;
  t6498 = t6491 + t6497;
  t6565 = t6483*t1300;
  t6566 = t6061 + t6565;
  t6572 = t824*t6483;
  t6578 = -1.*t6058*t1300;
  t6582 = t6572 + t6578;
  t6607 = t6582*t4170;
  t6609 = t6566*t4288;
  t6610 = t6607 + t6609;
  t6595 = t2500*t6566;
  t6598 = -0.340999127418*t144*t6582;
  t6600 = t6595 + t6598;
  t6570 = -0.340999127418*t144*t6566;
  t6585 = t3329*t6582;
  t6588 = t6570 + t6585;
  t6685 = t6476*t1300;
  t6688 = t6572 + t6685;
  t6713 = -0.930418*t139*t6490;
  t6715 = -0.366501*t139*t6688;
  t6720 = -1.000000637725*t489*t5601*t3045;
  t6721 = t6713 + t6715 + t6720;
  t6699 = 0.366501*t489*t139*t5601;
  t6701 = -0.340999127418*t6490*t3045;
  t6702 = -0.134322983001*t6688*t3045;
  t6706 = t6699 + t6701 + t6702;
  t6683 = 0.930418*t489*t139*t5601;
  t6684 = -0.8656776547239999*t6490*t3045;
  t6689 = -0.340999127418*t6688*t3045;
  t6697 = t6683 + t6684 + t6689;
  t6777 = t489*t4118*t5601;
  t6778 = t6490*t4170;
  t6779 = t6688*t4288;
  t6780 = t6777 + t6778 + t6779;
  t6749 = t2500*t6688;
  t6750 = t489*t5601*t3149;
  t6752 = t6491 + t6749 + t6750;
  t6762 = t3329*t6490;
  t6763 = -0.340999127418*t144*t6688;
  t6768 = t489*t5601*t3626;
  t6769 = t6762 + t6763 + t6768;
  t6813 = t489*t824*t1025;
  t6815 = -1.*t489*t1209*t1300;
  t6816 = t6813 + t6815;
  t6818 = -1.*t489*t1209*t824;
  t6819 = -1.*t489*t1025*t1300;
  t6820 = t6818 + t6819;
  t6832 = t6820*t4170;
  t6836 = t6816*t4288;
  t6837 = t6832 + t6836;
  t6824 = t2500*t6816;
  t6826 = -0.340999127418*t144*t6820;
  t6827 = t6824 + t6826;
  t6817 = -0.340999127418*t144*t6816;
  t6821 = t3329*t6820;
  t6822 = t6817 + t6821;
  t6865 = -1.*t489*t824*t1025;
  t6866 = t489*t1209*t1300;
  t6867 = t6865 + t6866;
  t6871 = t489*t1209*t824;
  t6873 = t489*t1025*t1300;
  t6874 = t6871 + t6873;
  t6895 = t6874*t4170;
  t6897 = t6867*t4288;
  t6898 = t6895 + t6897;
  t6887 = t2500*t6867;
  t6889 = -0.340999127418*t144*t6874;
  t6890 = t6887 + t6889;
  t6870 = -0.340999127418*t144*t6867;
  t6875 = t3329*t6874;
  t6876 = t6870 + t6875;
  t6926 = -1.*t824*t2781*t1025;
  t6928 = t1209*t2781*t1300;
  t6929 = t6926 + t6928;
  t6932 = -1.*t1209*t824*t2781;
  t6933 = -1.*t2781*t1025*t1300;
  t6934 = t6932 + t6933;
  t6949 = -1.*t489*t4118;
  t6950 = t6929*t4170;
  t6951 = t6934*t4288;
  t6952 = t6949 + t6950 + t6951;
  t6930 = -0.340999127418*t144*t6929;
  t6935 = t2500*t6934;
  t6939 = -1.*t489*t3149;
  t6940 = t6930 + t6935 + t6939;
  t6942 = t3329*t6929;
  t6943 = -0.340999127418*t144*t6934;
  t6946 = -1.*t489*t3626;
  t6947 = t6942 + t6943 + t6946;
  t7001 = -0.930418*t139*t6816;
  t7004 = -0.366501*t139*t6874;
  t7005 = 1.000000637725*t2781*t3045;
  t7007 = t7001 + t7004 + t7005;
  t6988 = -0.366501*t139*t2781;
  t6990 = -0.340999127418*t6816*t3045;
  t6991 = -0.134322983001*t6874*t3045;
  t6992 = t6988 + t6990 + t6991;
  t6982 = -0.930418*t139*t2781;
  t6983 = -0.8656776547239999*t6816*t3045;
  t6985 = -0.340999127418*t6874*t3045;
  t6986 = t6982 + t6983 + t6985;
  t7040 = -1.*t4118*t2781;
  t7044 = t6816*t4170;
  t7045 = t6874*t4288;
  t7046 = t7040 + t7044 + t7045;
  t7028 = t2500*t6874;
  t7029 = -1.*t2781*t3149;
  t7031 = t6817 + t7028 + t7029;
  t7036 = t3329*t6816;
  t7037 = -1.*t2781*t3626;
  t7038 = t7036 + t6889 + t7037;
  t3155 = 0.340999127418*t107*t3151;
  t3980 = t3183*t3849;
  t5180 = t4927*t5035;
  t5193 = t3155 + t3980 + t5180;
  t5272 = t5213*t4927;
  t5303 = t3151*t5299;
  t5402 = t3849*t5396;
  t5407 = t5272 + t5303 + t5402;
  t5412 = 0.707107*t5407;
  t5530 = t5432*t3151;
  t5535 = 0.340999127418*t107*t3849;
  t5573 = t4927*t5562;
  t5574 = t5530 + t5535 + t5573;
  t5787 = t3183*t5776;
  t5798 = 0.340999127418*t107*t5795;
  t5828 = t5827*t5035;
  t5841 = t5787 + t5798 + t5828;
  t5853 = t5213*t5827;
  t5855 = t5795*t5299;
  t5859 = t5776*t5396;
  t5868 = t5853 + t5855 + t5859;
  t5871 = 0.707107*t5868;
  t5874 = 0.340999127418*t107*t5776;
  t5875 = t5432*t5795;
  t5881 = t5827*t5562;
  t5887 = t5874 + t5875 + t5881;
  t5950 = t3183*t5949;
  t5958 = 0.340999127418*t107*t5956;
  t5972 = t5968*t5035;
  t5973 = t5950 + t5958 + t5972;
  t5976 = t5213*t5968;
  t5979 = t5956*t5299;
  t5991 = t5949*t5396;
  t5992 = t5976 + t5979 + t5991;
  t6024 = 0.707107*t5992;
  t6037 = 0.340999127418*t107*t5949;
  t6042 = t5432*t5956;
  t6043 = t5968*t5562;
  t6044 = t6037 + t6042 + t6043;
  t6115 = 0.340999127418*t107*t6114;
  t6122 = t3183*t6120;
  t6138 = t6135*t5035;
  t6139 = t6115 + t6122 + t6138;
  t6142 = t5213*t6135;
  t6143 = t6114*t5299;
  t6155 = t6120*t5396;
  t6156 = t6142 + t6143 + t6155;
  t6161 = 0.707107*t6156;
  t6173 = t5432*t6114;
  t6175 = 0.340999127418*t107*t6120;
  t6178 = t6135*t5562;
  t6181 = t6173 + t6175 + t6178;
  t6197 = t3183*t6196;
  t6222 = 0.340999127418*t107*t6215;
  t6237 = t6236*t5035;
  t6238 = t6197 + t6222 + t6237;
  t6244 = t5213*t6236;
  t6245 = t6215*t5299;
  t6247 = t6196*t5396;
  t6250 = t6244 + t6245 + t6247;
  t6262 = 0.707107*t6250;
  t6264 = 0.340999127418*t107*t6196;
  t6265 = t5432*t6215;
  t6267 = t6236*t5562;
  t6269 = t6264 + t6265 + t6267;
  t6299 = -0.930418*t5*t6298;
  t6319 = 0.366501*t5*t6303;
  t6331 = -1.000000637725*t6329*t5016;
  t6333 = t6299 + t6319 + t6331;
  t6334 = 0.707107*t6333;
  t6335 = -0.366501*t5*t6329;
  t6336 = 0.340999127418*t6298*t5016;
  t6337 = -0.134322983001*t6303*t5016;
  t6339 = t6335 + t6336 + t6337;
  t6342 = 0.930418*t5*t6329;
  t6346 = -0.8656776547239999*t6298*t5016;
  t6351 = 0.340999127418*t6303*t5016;
  t6352 = t6342 + t6346 + t6351;
  t6404 = 0.340999127418*t107*t6401;
  t6409 = t3183*t6408;
  t6437 = t6433*t5035;
  t6438 = t6404 + t6409 + t6437;
  t6444 = t5213*t6433;
  t6447 = t6401*t5299;
  t6448 = t6408*t5396;
  t6458 = t6444 + t6447 + t6448;
  t6459 = 0.707107*t6458;
  t6460 = t5432*t6401;
  t6461 = 0.340999127418*t107*t6408;
  t6467 = t6433*t5562;
  t6468 = t6460 + t6461 + t6467;
  t6514 = t3183*t6498;
  t6522 = 0.340999127418*t107*t6520;
  t6536 = t6529*t5035;
  t6537 = t6514 + t6522 + t6536;
  t6546 = t5213*t6529;
  t6547 = t6520*t5299;
  t6548 = t6498*t5396;
  t6554 = t6546 + t6547 + t6548;
  t6555 = 0.707107*t6554;
  t6557 = 0.340999127418*t107*t6498;
  t6558 = t5432*t6520;
  t6559 = t6529*t5562;
  t6560 = t6557 + t6558 + t6559;
  t6590 = t3183*t6588;
  t6602 = 0.340999127418*t107*t6600;
  t6615 = t6610*t5035;
  t6616 = t6590 + t6602 + t6615;
  t6618 = t5213*t6610;
  t6621 = t6600*t5299;
  t6623 = t6588*t5396;
  t6624 = t6618 + t6621 + t6623;
  t6625 = 0.707107*t6624;
  t6626 = 0.340999127418*t107*t6588;
  t6628 = t5432*t6600;
  t6629 = t6610*t5562;
  t6630 = t6626 + t6628 + t6629;
  t6640 = 0.340999127418*t107*t6298;
  t6644 = t3183*t6303;
  t6647 = t6329*t5035;
  t6648 = t6640 + t6644 + t6647;
  t6658 = t5213*t6329;
  t6659 = t6298*t5299;
  t6661 = t6303*t5396;
  t6662 = t6658 + t6659 + t6661;
  t6663 = 0.707107*t6662;
  t6664 = t5432*t6298;
  t6669 = 0.340999127418*t107*t6303;
  t6671 = t6329*t5562;
  t6672 = t6664 + t6669 + t6671;
  t6698 = t3183*t6697;
  t6711 = 0.340999127418*t107*t6706;
  t6722 = t6721*t5035;
  t6723 = t6698 + t6711 + t6722;
  t6725 = t5213*t6721;
  t6731 = t6706*t5299;
  t6732 = t6697*t5396;
  t6733 = t6725 + t6731 + t6732;
  t6734 = 0.707107*t6733;
  t6735 = 0.340999127418*t107*t6697;
  t6739 = t5432*t6706;
  t6740 = t6721*t5562;
  t6741 = t6735 + t6739 + t6740;
  t6755 = -0.930418*t5*t6752;
  t6770 = 0.366501*t5*t6769;
  t6781 = -1.000000637725*t6780*t5016;
  t6782 = t6755 + t6770 + t6781;
  t6783 = 0.707107*t6782;
  t6787 = -0.366501*t5*t6780;
  t6788 = 0.340999127418*t6752*t5016;
  t6789 = -0.134322983001*t6769*t5016;
  t6791 = t6787 + t6788 + t6789;
  t6795 = 0.930418*t5*t6780;
  t6798 = -0.8656776547239999*t6752*t5016;
  t6800 = 0.340999127418*t6769*t5016;
  t6802 = t6795 + t6798 + t6800;
  t6823 = t3183*t6822;
  t6828 = 0.340999127418*t107*t6827;
  t6838 = t6837*t5035;
  t6839 = t6823 + t6828 + t6838;
  t6842 = t5213*t6837;
  t6848 = t6827*t5299;
  t6851 = t6822*t5396;
  t6852 = t6842 + t6848 + t6851;
  t6853 = 0.707107*t6852;
  t6854 = 0.340999127418*t107*t6822;
  t6858 = t5432*t6827;
  t6859 = t6837*t5562;
  t6860 = t6854 + t6858 + t6859;
  t6880 = t3183*t6876;
  t6894 = 0.340999127418*t107*t6890;
  t6899 = t6898*t5035;
  t6900 = t6880 + t6894 + t6899;
  t6902 = t5213*t6898;
  t6903 = t6890*t5299;
  t6904 = t6876*t5396;
  t6905 = t6902 + t6903 + t6904;
  t6908 = 0.707107*t6905;
  t6911 = 0.340999127418*t107*t6876;
  t6912 = t5432*t6890;
  t6914 = t6898*t5562;
  t6915 = t6911 + t6912 + t6914;
  t6941 = 0.340999127418*t107*t6940;
  t6948 = t3183*t6947;
  t6953 = t6952*t5035;
  t6955 = t6941 + t6948 + t6953;
  t6957 = t5213*t6952;
  t6958 = t6940*t5299;
  t6959 = t6947*t5396;
  t6962 = t6957 + t6958 + t6959;
  t6967 = 0.707107*t6962;
  t6968 = t5432*t6940;
  t6969 = 0.340999127418*t107*t6947;
  t6971 = t6952*t5562;
  t6972 = t6968 + t6969 + t6971;
  t6987 = t3183*t6986;
  t6993 = 0.340999127418*t107*t6992;
  t7012 = t7007*t5035;
  t7014 = t6987 + t6993 + t7012;
  t7016 = t5213*t7007;
  t7017 = t6992*t5299;
  t7018 = t6986*t5396;
  t7019 = t7016 + t7017 + t7018;
  t7020 = 0.707107*t7019;
  t7021 = 0.340999127418*t107*t6986;
  t7022 = t5432*t6992;
  t7023 = t7007*t5562;
  t7024 = t7021 + t7022 + t7023;
  t7032 = -0.930418*t5*t7031;
  t7039 = 0.366501*t5*t7038;
  t7047 = -1.000000637725*t7046*t5016;
  t7048 = t7032 + t7039 + t7047;
  t7049 = 0.707107*t7048;
  t7050 = -0.366501*t5*t7046;
  t7054 = 0.340999127418*t7031*t5016;
  t7055 = -0.134322983001*t7038*t5016;
  t7058 = t7050 + t7054 + t7055;
  t7061 = 0.930418*t5*t7046;
  t7068 = -0.8656776547239999*t7031*t5016;
  t7069 = 0.340999127418*t7038*t5016;
  t7070 = t7061 + t7068 + t7069;
  p_output1[0]=(0.259155*t6139 + t6161 - 0.657905*t6181)*var2[3] + (0.259155*t5193 + t5412 - 0.657905*t5574)*var2[4] + (0.259155*t5973 + t6024 - 0.657905*t6044)*var2[5] + (0.259155*t5841 + t5871 - 0.657905*t5887)*var2[6] + (0.259155*t6238 + t6262 - 0.657905*t6269)*var2[7] + (t6334 + 0.259155*t6339 - 0.657905*t6352)*var2[8];
  p_output1[1]=(0.259155*t6648 + t6663 - 0.657905*t6672)*var2[3] + (0.259155*t6438 + t6459 - 0.657905*t6468)*var2[4] + (0.259155*t6616 + t6625 - 0.657905*t6630)*var2[5] + (0.259155*t6537 + t6555 - 0.657905*t6560)*var2[6] + (0.259155*t6723 + t6734 - 0.657905*t6741)*var2[7] + (t6783 + 0.259155*t6791 - 0.657905*t6802)*var2[8];
  p_output1[2]=(0.259155*t6955 + t6967 - 0.657905*t6972)*var2[4] + (0.259155*t6900 + t6908 - 0.657905*t6915)*var2[5] + (0.259155*t6839 + t6853 - 0.657905*t6860)*var2[6] + (0.259155*t7014 + t7020 - 0.657905*t7024)*var2[7] + (t7049 + 0.259155*t7058 - 0.657905*t7070)*var2[8];
  p_output1[3]=(-0.259155*t6139 + t6161 + 0.657905*t6181)*var2[3] + (-0.259155*t5193 + t5412 + 0.657905*t5574)*var2[4] + (-0.259155*t5973 + t6024 + 0.657905*t6044)*var2[5] + (-0.259155*t5841 + t5871 + 0.657905*t5887)*var2[6] + (-0.259155*t6238 + t6262 + 0.657905*t6269)*var2[7] + (t6334 - 0.259155*t6339 + 0.657905*t6352)*var2[8];
  p_output1[4]=(-0.259155*t6648 + t6663 + 0.657905*t6672)*var2[3] + (-0.259155*t6438 + t6459 + 0.657905*t6468)*var2[4] + (-0.259155*t6616 + t6625 + 0.657905*t6630)*var2[5] + (-0.259155*t6537 + t6555 + 0.657905*t6560)*var2[6] + (-0.259155*t6723 + t6734 + 0.657905*t6741)*var2[7] + (t6783 - 0.259155*t6791 + 0.657905*t6802)*var2[8];
  p_output1[5]=(-0.259155*t6955 + t6967 + 0.657905*t6972)*var2[4] + (-0.259155*t6900 + t6908 + 0.657905*t6915)*var2[5] + (-0.259155*t6839 + t6853 + 0.657905*t6860)*var2[6] + (-0.259155*t7014 + t7020 + 0.657905*t7024)*var2[7] + (t7049 - 0.259155*t7058 + 0.657905*t7070)*var2[8];
  p_output1[6]=(-0.930418*t6139 - 0.366501*t6181)*var2[3] + (-0.930418*t5193 - 0.366501*t5574)*var2[4] + (-0.930418*t5973 - 0.366501*t6044)*var2[5] + (-0.930418*t5841 - 0.366501*t5887)*var2[6] + (-0.930418*t6238 - 0.366501*t6269)*var2[7] + (-0.930418*t6339 - 0.366501*t6352)*var2[8];
  p_output1[7]=(-0.930418*t6648 - 0.366501*t6672)*var2[3] + (-0.930418*t6438 - 0.366501*t6468)*var2[4] + (-0.930418*t6616 - 0.366501*t6630)*var2[5] + (-0.930418*t6537 - 0.366501*t6560)*var2[6] + (-0.930418*t6723 - 0.366501*t6741)*var2[7] + (-0.930418*t6791 - 0.366501*t6802)*var2[8];
  p_output1[8]=(-0.930418*t6955 - 0.366501*t6972)*var2[4] + (-0.930418*t6900 - 0.366501*t6915)*var2[5] + (-0.930418*t6839 - 0.366501*t6860)*var2[6] + (-0.930418*t7014 - 0.366501*t7024)*var2[7] + (-0.930418*t7058 - 0.366501*t7070)*var2[8];
}



void dR_hip_flexion_left_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
