/*
 * Automatically Generated from Mathematica.
 * Thu 10 Nov 2022 14:32:38 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_LeftToeBottomBack_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t360;
  double t269;
  double t372;
  double t309;
  double t390;
  double t1549;
  double t20;
  double t537;
  double t837;
  double t1036;
  double t331;
  double t395;
  double t476;
  double t1063;
  double t1313;
  double t1344;
  double t1358;
  double t2334;
  double t2339;
  double t2342;
  double t1999;
  double t2010;
  double t2023;
  double t1307;
  double t2061;
  double t2062;
  double t2799;
  double t2806;
  double t2807;
  double t2355;
  double t2375;
  double t1587;
  double t1640;
  double t1688;
  double t1698;
  double t3003;
  double t3005;
  double t3006;
  double t3007;
  double t3017;
  double t3025;
  double t2808;
  double t2832;
  double t2834;
  double t2836;
  double t2837;
  double t2857;
  double t3026;
  double t2913;
  double t2914;
  double t2915;
  double t2916;
  double t2917;
  double t2918;
  double t2791;
  double t2792;
  double t2796;
  double t2768;
  double t2896;
  double t2906;
  double t2911;
  double t2920;
  double t3029;
  double t3031;
  double t3040;
  double t3042;
  double t3053;
  double t3066;
  double t3069;
  double t3070;
  double t3108;
  double t3125;
  double t3129;
  double t3137;
  double t3141;
  double t3146;
  double t3150;
  double t3168;
  double t3201;
  double t3202;
  double t3206;
  double t3214;
  double t3217;
  double t3220;
  double t3221;
  double t3321;
  double t3331;
  double t3334;
  double t3048;
  double t3056;
  double t3058;
  double t3151;
  double t3160;
  double t3167;
  double t3237;
  double t3253;
  double t3287;
  double t3288;
  double t3291;
  double t3294;
  double t3297;
  double t3299;
  double t3311;
  double t3312;
  double t3349;
  double t3350;
  double t3352;
  double t3353;
  double t3357;
  double t3359;
  double t3360;
  double t3361;
  double t3365;
  double t3370;
  double t3380;
  double t3382;
  double t3384;
  double t2532;
  double t2572;
  double t2672;
  double t2676;
  double t2713;
  double t2769;
  double t2770;
  double t3260;
  double t3263;
  double t3280;
  double t3317;
  double t3335;
  double t3336;
  double t3371;
  double t3376;
  double t3392;
  double t3396;
  double t3398;
  double t3399;
  double t3406;
  double t3410;
  double t3411;
  double t3416;
  double t3441;
  double t3447;
  double t3452;
  double t3455;
  double t3456;
  double t3457;
  double t3458;
  double t3460;
  double t2735;
  double t2767;
  double t3379;
  double t3426;
  double t3431;
  double t3440;
  double t3462;
  double t3464;
  double t3475;
  double t3478;
  double t3479;
  double t3480;
  double t3481;
  double t3484;
  double t3487;
  double t3492;
  double t2674;
  double t3506;
  double t3509;
  double t3511;
  double t3514;
  double t3515;
  double t3527;
  double t3536;
  double t3541;
  double t3547;
  double t3548;
  double t3570;
  double t3469;
  double t3583;
  double t3576;
  double t3620;
  double t3594;
  double t3604;
  double t3638;
  double t3470;
  double t3616;
  double t2679;
  double t145;
  double t154;
  double t228;
  double t265;
  double t1265;
  double t1289;
  double t1421;
  double t1676;
  double t1734;
  double t1737;
  double t3832;
  double t3833;
  double t3834;
  double t3825;
  double t3827;
  double t3828;
  double t2031;
  double t2055;
  double t2232;
  double t2234;
  double t2344;
  double t2351;
  double t2395;
  double t2459;
  double t2680;
  double t3846;
  double t3848;
  double t3851;
  double t3841;
  double t3842;
  double t3844;
  double t3879;
  double t3881;
  double t3885;
  double t3886;
  double t3853;
  double t3855;
  double t3856;
  double t3859;
  double t3864;
  double t3866;
  double t3868;
  double t3872;
  double t3860;
  double t3874;
  double t3889;
  double t3891;
  double t3896;
  double t3901;
  double t3903;
  double t3906;
  double t3908;
  double t3909;
  double t3911;
  double t3912;
  double t3892;
  double t3907;
  double t3917;
  double t3920;
  double t3939;
  double t3940;
  double t3941;
  double t3942;
  double t3947;
  double t3948;
  double t3949;
  double t3950;
  double t3473;
  double t3926;
  double t3943;
  double t3960;
  double t3966;
  double t3969;
  double t3972;
  double t3975;
  double t3976;
  double t3981;
  double t3984;
  double t3985;
  double t3987;
  double t3497;
  double t3499;
  double t3561;
  double t3564;
  double t3967;
  double t3979;
  double t3988;
  double t3992;
  double t3579;
  double t3995;
  double t3998;
  double t3999;
  double t4002;
  double t3587;
  double t4005;
  double t4006;
  double t4008;
  double t4009;
  double t3595;
  double t3597;
  double t3602;
  double t3605;
  double t3611;
  double t3612;
  double t3617;
  double t3618;
  double t3626;
  double t3627;
  double t3628;
  double t3631;
  double t3632;
  double t3633;
  double t3635;
  double t3640;
  double t3644;
  double t3645;
  double t3647;
  double t3650;
  double t3653;
  double t3657;
  double t3658;
  double t3660;
  double t3661;
  double t3665;
  double t3667;
  double t3668;
  double t3670;
  double t3678;
  double t3680;
  double t3684;
  double t3691;
  double t3695;
  double t3696;
  double t3704;
  double t3707;
  double t3709;
  double t3710;
  double t3711;
  double t3712;
  double t3718;
  double t3719;
  double t3720;
  double t3724;
  double t3726;
  double t3727;
  double t3733;
  double t3736;
  double t3743;
  double t3744;
  double t3748;
  double t3751;
  double t3753;
  double t3758;
  double t3760;
  double t3767;
  double t3770;
  double t3771;
  double t3772;
  double t3773;
  double t3776;
  double t3778;
  double t3779;
  double t3780;
  double t3784;
  double t3790;
  double t3791;
  double t3792;
  double t3799;
  double t3803;
  double t3810;
  double t3814;
  double t4116;
  double t4121;
  double t4124;
  double t4110;
  double t4111;
  double t4113;
  double t4150;
  double t4151;
  double t4152;
  double t4153;
  double t4132;
  double t4133;
  double t4134;
  double t4135;
  double t4145;
  double t4146;
  double t4147;
  double t4148;
  double t4142;
  double t4149;
  double t4154;
  double t4157;
  double t4162;
  double t4164;
  double t4165;
  double t4166;
  double t4169;
  double t4171;
  double t4173;
  double t4175;
  double t4160;
  double t4168;
  double t4177;
  double t4182;
  double t4189;
  double t4190;
  double t4191;
  double t4192;
  double t4199;
  double t4200;
  double t4207;
  double t4218;
  double t4186;
  double t4195;
  double t4219;
  double t4220;
  double t4222;
  double t4223;
  double t4226;
  double t4227;
  double t4229;
  double t4230;
  double t4231;
  double t4238;
  double t4221;
  double t4228;
  double t4240;
  double t4241;
  double t4244;
  double t4245;
  double t4246;
  double t4249;
  double t4251;
  double t4252;
  double t4253;
  double t4255;
  t360 = Cos(var1[3]);
  t269 = Cos(var1[5]);
  t372 = Sin(var1[4]);
  t309 = Sin(var1[3]);
  t390 = Sin(var1[5]);
  t1549 = Sin(var1[7]);
  t20 = Cos(var1[6]);
  t537 = t360*t269*t372;
  t837 = t309*t390;
  t1036 = t537 + t837;
  t331 = -1.*t269*t309;
  t395 = t360*t372*t390;
  t476 = t331 + t395;
  t1063 = Sin(var1[6]);
  t1313 = Cos(var1[7]);
  t1344 = -1.*t1313;
  t1358 = 1. + t1344;
  t2334 = t20*t476;
  t2339 = -1.*t1036*t1063;
  t2342 = t2334 + t2339;
  t1999 = t20*t1036;
  t2010 = t476*t1063;
  t2023 = t1999 + t2010;
  t1307 = Cos(var1[4]);
  t2061 = 0.366501*t1549;
  t2062 = 0. + t2061;
  t2799 = Cos(var1[8]);
  t2806 = -1.*t2799;
  t2807 = 1. + t2806;
  t2355 = 0.930418*t1549;
  t2375 = 0. + t2355;
  t1587 = -0.930418*t1549;
  t1640 = 0. + t1587;
  t1688 = -0.366501*t1549;
  t1698 = 0. + t1688;
  t3003 = -1.000000637725*t1358;
  t3005 = 1. + t3003;
  t3006 = t360*t1307*t3005;
  t3007 = t2342*t1640;
  t3017 = t2023*t1698;
  t3025 = t3006 + t3007 + t3017;
  t2808 = -0.340999127418*t1358*t2342;
  t2832 = -0.134322983001*t1358;
  t2834 = 1. + t2832;
  t2836 = t2834*t2023;
  t2837 = t360*t1307*t2062;
  t2857 = t2808 + t2836 + t2837;
  t3026 = Sin(var1[8]);
  t2913 = -0.8656776547239999*t1358;
  t2914 = 1. + t2913;
  t2915 = t2914*t2342;
  t2916 = -0.340999127418*t1358*t2023;
  t2917 = t360*t1307*t2375;
  t2918 = t2915 + t2916 + t2917;
  t2791 = Cos(var1[9]);
  t2792 = -1.*t2791;
  t2796 = 1. + t2792;
  t2768 = Sin(var1[10]);
  t2896 = 0.340999127418*t2807*t2857;
  t2906 = -0.134322983001*t2807;
  t2911 = 1. + t2906;
  t2920 = t2911*t2918;
  t3029 = -0.366501*t3026;
  t3031 = 0. + t3029;
  t3040 = t3025*t3031;
  t3042 = t2896 + t2920 + t3040;
  t3053 = Sin(var1[9]);
  t3066 = -1.000000637725*t2807;
  t3069 = 1. + t3066;
  t3070 = t3069*t3025;
  t3108 = -0.930418*t3026;
  t3125 = 0. + t3108;
  t3129 = t2857*t3125;
  t3137 = 0.366501*t3026;
  t3141 = 0. + t3137;
  t3146 = t2918*t3141;
  t3150 = t3070 + t3129 + t3146;
  t3168 = -0.8656776547239999*t2807;
  t3201 = 1. + t3168;
  t3202 = t3201*t2857;
  t3206 = 0.340999127418*t2807*t2918;
  t3214 = 0.930418*t3026;
  t3217 = 0. + t3214;
  t3220 = t3025*t3217;
  t3221 = t3202 + t3206 + t3220;
  t3321 = Cos(var1[10]);
  t3331 = -1.*t3321;
  t3334 = 1. + t3331;
  t3048 = 0.340999127418*t2796*t3042;
  t3056 = -0.930418*t3053;
  t3058 = 0. + t3056;
  t3151 = t3058*t3150;
  t3160 = -0.8656776547239999*t2796;
  t3167 = 1. + t3160;
  t3237 = t3167*t3221;
  t3253 = t3048 + t3151 + t3237;
  t3287 = -0.134322983001*t2796;
  t3288 = 1. + t3287;
  t3291 = t3288*t3042;
  t3294 = 0.366501*t3053;
  t3297 = 0. + t3294;
  t3299 = t3297*t3150;
  t3311 = 0.340999127418*t2796*t3221;
  t3312 = t3291 + t3299 + t3311;
  t3349 = -0.366501*t3053;
  t3350 = 0. + t3349;
  t3352 = t3350*t3042;
  t3353 = -1.000000637725*t2796;
  t3357 = 1. + t3353;
  t3359 = t3357*t3150;
  t3360 = 0.930418*t3053;
  t3361 = 0. + t3360;
  t3365 = t3361*t3221;
  t3370 = t3352 + t3359 + t3365;
  t3380 = Cos(var1[11]);
  t3382 = -1.*t3380;
  t3384 = 1. + t3382;
  t2532 = Cos(var1[12]);
  t2572 = -1.*t2532;
  t2672 = 1. + t2572;
  t2676 = Sin(var1[12]);
  t2713 = Sin(var1[11]);
  t2769 = 0.930418*t2768;
  t2770 = 0. + t2769;
  t3260 = t2770*t3253;
  t3263 = -0.366501*t2768;
  t3280 = 0. + t3263;
  t3317 = t3280*t3312;
  t3335 = -1.000000637725*t3334;
  t3336 = 1. + t3335;
  t3371 = t3336*t3370;
  t3376 = t3260 + t3317 + t3371;
  t3392 = -0.8656776547239999*t3334;
  t3396 = 1. + t3392;
  t3398 = t3396*t3253;
  t3399 = 0.340999127418*t3334*t3312;
  t3406 = -0.930418*t2768;
  t3410 = 0. + t3406;
  t3411 = t3410*t3370;
  t3416 = t3398 + t3399 + t3411;
  t3441 = 0.340999127418*t3334*t3253;
  t3447 = -0.134322983001*t3334;
  t3452 = 1. + t3447;
  t3455 = t3452*t3312;
  t3456 = 0.366501*t2768;
  t3457 = 0. + t3456;
  t3458 = t3457*t3370;
  t3460 = t3441 + t3455 + t3458;
  t2735 = 0.366501*t2713;
  t2767 = 0. + t2735;
  t3379 = t2767*t3376;
  t3426 = 0.340999127418*t3384*t3416;
  t3431 = -0.134322983001*t3384;
  t3440 = 1. + t3431;
  t3462 = t3440*t3460;
  t3464 = t3379 + t3426 + t3462;
  t3475 = -0.930418*t2713;
  t3478 = 0. + t3475;
  t3479 = t3478*t3376;
  t3480 = -0.8656776547239999*t3384;
  t3481 = 1. + t3480;
  t3484 = t3481*t3416;
  t3487 = 0.340999127418*t3384*t3460;
  t3492 = t3479 + t3484 + t3487;
  t2674 = -0.175248972904*t2672;
  t3506 = -1.000000637725*t3384;
  t3509 = 1. + t3506;
  t3511 = t3509*t3376;
  t3514 = 0.930418*t2713;
  t3515 = 0. + t3514;
  t3527 = t3515*t3416;
  t3536 = -0.366501*t2713;
  t3541 = 0. + t3536;
  t3547 = t3541*t3460;
  t3548 = t3511 + t3527 + t3547;
  t3570 = -0.120666640478*t2672;
  t3469 = 0.444895486988*t2672;
  t3583 = -0.553471*t2676;
  t3576 = 0.803828*t2676;
  t3620 = 0.120666640478*t2672;
  t3594 = -0.803828*t2676;
  t3604 = -0.218018*t2676;
  t3638 = -0.444895486988*t2672;
  t3470 = 0.218018*t2676;
  t3616 = 0.175248972904*t2672;
  t2679 = 0.553471*t2676;
  t145 = -1.*t20;
  t154 = 1. + t145;
  t228 = 0.091*t154;
  t265 = 0. + t228;
  t1265 = 0.091*t1063;
  t1289 = 0. + t1265;
  t1421 = -0.04500040093286238*t1358;
  t1676 = 0.07877663122399998*t1640;
  t1734 = 0.031030906668*t1698;
  t1737 = 0. + t1421 + t1676 + t1734;
  t3832 = t269*t309*t372;
  t3833 = -1.*t360*t390;
  t3834 = t3832 + t3833;
  t3825 = t360*t269;
  t3827 = t309*t372*t390;
  t3828 = t3825 + t3827;
  t2031 = -3.2909349868922137e-7*var1[7];
  t2055 = 0.03103092645718495*t1358;
  t2232 = -0.045000372235*t2062;
  t2234 = t2031 + t2055 + t2232;
  t2344 = 1.296332362046933e-7*var1[7];
  t2351 = 0.07877668146182712*t1358;
  t2395 = -0.045000372235*t2375;
  t2459 = t2344 + t2351 + t2395;
  t2680 = t2674 + t2679;
  t3846 = t20*t3828;
  t3848 = -1.*t3834*t1063;
  t3851 = t3846 + t3848;
  t3841 = t20*t3834;
  t3842 = t3828*t1063;
  t3844 = t3841 + t3842;
  t3879 = t1307*t3005*t309;
  t3881 = t3851*t1640;
  t3885 = t3844*t1698;
  t3886 = t3879 + t3881 + t3885;
  t3853 = -0.340999127418*t1358*t3851;
  t3855 = t2834*t3844;
  t3856 = t1307*t309*t2062;
  t3859 = t3853 + t3855 + t3856;
  t3864 = t2914*t3851;
  t3866 = -0.340999127418*t1358*t3844;
  t3868 = t1307*t309*t2375;
  t3872 = t3864 + t3866 + t3868;
  t3860 = 0.340999127418*t2807*t3859;
  t3874 = t2911*t3872;
  t3889 = t3886*t3031;
  t3891 = t3860 + t3874 + t3889;
  t3896 = t3069*t3886;
  t3901 = t3859*t3125;
  t3903 = t3872*t3141;
  t3906 = t3896 + t3901 + t3903;
  t3908 = t3201*t3859;
  t3909 = 0.340999127418*t2807*t3872;
  t3911 = t3886*t3217;
  t3912 = t3908 + t3909 + t3911;
  t3892 = 0.340999127418*t2796*t3891;
  t3907 = t3058*t3906;
  t3917 = t3167*t3912;
  t3920 = t3892 + t3907 + t3917;
  t3939 = t3288*t3891;
  t3940 = t3297*t3906;
  t3941 = 0.340999127418*t2796*t3912;
  t3942 = t3939 + t3940 + t3941;
  t3947 = t3350*t3891;
  t3948 = t3357*t3906;
  t3949 = t3361*t3912;
  t3950 = t3947 + t3948 + t3949;
  t3473 = t3469 + t3470;
  t3926 = t2770*t3920;
  t3943 = t3280*t3942;
  t3960 = t3336*t3950;
  t3966 = t3926 + t3943 + t3960;
  t3969 = t3396*t3920;
  t3972 = 0.340999127418*t3334*t3942;
  t3975 = t3410*t3950;
  t3976 = t3969 + t3972 + t3975;
  t3981 = 0.340999127418*t3334*t3920;
  t3984 = t3452*t3942;
  t3985 = t3457*t3950;
  t3987 = t3981 + t3984 + t3985;
  t3497 = -0.353861996165*t2672;
  t3499 = 1. + t3497;
  t3561 = -0.952469601425*t2672;
  t3564 = 1. + t3561;
  t3967 = t2767*t3966;
  t3979 = 0.340999127418*t3384*t3976;
  t3988 = t3440*t3987;
  t3992 = t3967 + t3979 + t3988;
  t3579 = t3570 + t3576;
  t3995 = t3478*t3966;
  t3998 = t3481*t3976;
  t3999 = 0.340999127418*t3384*t3987;
  t4002 = t3995 + t3998 + t3999;
  t3587 = t2674 + t3583;
  t4005 = t3509*t3966;
  t4006 = t3515*t3976;
  t4008 = t3541*t3987;
  t4009 = t4005 + t4006 + t4008;
  t3595 = t3570 + t3594;
  t3597 = -0.693671301908*t2672;
  t3602 = 1. + t3597;
  t3605 = t3469 + t3604;
  t3611 = 2.838136523330542e-8*var1[12];
  t3612 = 0.2845150083511607*t2672;
  t3617 = t3616 + t3583;
  t3618 = 0.44503472296900004*t3617;
  t3626 = t3620 + t3576;
  t3627 = -0.5286755231320001*t3626;
  t3628 = t3611 + t3612 + t3618 + t3627;
  t3631 = -7.20503013377005e-8*var1[12];
  t3632 = -0.3667270384178674*t2672;
  t3633 = t3620 + t3594;
  t3635 = 0.29871295412*t3633;
  t3640 = t3638 + t3604;
  t3644 = 0.44503472296900004*t3640;
  t3645 = t3631 + t3632 + t3635 + t3644;
  t3647 = -1.0464152525368286e-7*var1[12];
  t3650 = 0.15748087543254813*t2672;
  t3653 = t3638 + t3470;
  t3657 = -0.5286755231320001*t3653;
  t3658 = t3616 + t2679;
  t3660 = 0.29871295412*t3658;
  t3661 = t3647 + t3650 + t3657 + t3660;
  t3665 = 0.06199697675299678*t3384;
  t3667 = 0.324290713329*t3541;
  t3668 = -0.823260828522*t3515;
  t3670 = 0. + t3665 + t3667 + t3668;
  t3678 = 2.95447451120871e-8*var1[11];
  t3680 = -0.8232613535360118*t3384;
  t3684 = 0.061996937216*t3478;
  t3691 = t3678 + t3680 + t3684;
  t3695 = 7.500378623168247e-8*var1[11];
  t3696 = 0.32429092013729516*t3384;
  t3704 = 0.061996937216*t2767;
  t3707 = t3695 + t3696 + t3704;
  t3709 = 2.281945176511838e-8*var1[10];
  t3710 = -0.5905366811997648*t3334;
  t3711 = -0.262809976934*t3410;
  t3712 = t3709 + t3710 + t3711;
  t3718 = 5.7930615939377813e-8*var1[10];
  t3719 = 0.23261833304643187*t3334;
  t3720 = -0.262809976934*t3457;
  t3724 = t3718 + t3719 + t3720;
  t3726 = -0.26281014453449253*t3334;
  t3727 = 0.23261818470000004*t3280;
  t3733 = -0.5905363046000001*t2770;
  t3736 = 0. + t3726 + t3727 + t3733;
  t3743 = 3.2909349868922137e-7*var1[8];
  t3744 = 0.055653945343889656*t2807;
  t3748 = -0.045000372235*t3031;
  t3751 = t3743 + t3744 + t3748;
  t3753 = -1.5981976069815686e-7*var1[9];
  t3758 = 0.08675267452931407*t2796;
  t3760 = 0.039853013046*t3297;
  t3767 = t3753 + t3758 + t3760;
  t3770 = -0.04500040093286238*t2807;
  t3771 = -0.141285834136*t3125;
  t3772 = 0.055653909852*t3141;
  t3773 = 0. + t3770 + t3771 + t3772;
  t3776 = 0.039853038461262744*t2796;
  t3778 = 0.086752619205*t3350;
  t3779 = -0.22023459268999998*t3361;
  t3780 = 0. + t3776 + t3778 + t3779;
  t3784 = 1.296332362046933e-7*var1[8];
  t3790 = -0.14128592423750855*t2807;
  t3791 = -0.045000372235*t3217;
  t3792 = t3784 + t3790 + t3791;
  t3799 = -6.295460977284962e-8*var1[9];
  t3803 = -0.22023473313910558*t2796;
  t3810 = 0.039853013046*t3058;
  t3814 = t3799 + t3803 + t3810;
  t4116 = t1307*t20*t390;
  t4121 = -1.*t1307*t269*t1063;
  t4124 = t4116 + t4121;
  t4110 = t1307*t269*t20;
  t4111 = t1307*t390*t1063;
  t4113 = t4110 + t4111;
  t4150 = -1.*t3005*t372;
  t4151 = t4124*t1640;
  t4152 = t4113*t1698;
  t4153 = t4150 + t4151 + t4152;
  t4132 = -0.340999127418*t1358*t4124;
  t4133 = t2834*t4113;
  t4134 = -1.*t372*t2062;
  t4135 = t4132 + t4133 + t4134;
  t4145 = t2914*t4124;
  t4146 = -0.340999127418*t1358*t4113;
  t4147 = -1.*t372*t2375;
  t4148 = t4145 + t4146 + t4147;
  t4142 = 0.340999127418*t2807*t4135;
  t4149 = t2911*t4148;
  t4154 = t4153*t3031;
  t4157 = t4142 + t4149 + t4154;
  t4162 = t3069*t4153;
  t4164 = t4135*t3125;
  t4165 = t4148*t3141;
  t4166 = t4162 + t4164 + t4165;
  t4169 = t3201*t4135;
  t4171 = 0.340999127418*t2807*t4148;
  t4173 = t4153*t3217;
  t4175 = t4169 + t4171 + t4173;
  t4160 = 0.340999127418*t2796*t4157;
  t4168 = t3058*t4166;
  t4177 = t3167*t4175;
  t4182 = t4160 + t4168 + t4177;
  t4189 = t3288*t4157;
  t4190 = t3297*t4166;
  t4191 = 0.340999127418*t2796*t4175;
  t4192 = t4189 + t4190 + t4191;
  t4199 = t3350*t4157;
  t4200 = t3357*t4166;
  t4207 = t3361*t4175;
  t4218 = t4199 + t4200 + t4207;
  t4186 = t2770*t4182;
  t4195 = t3280*t4192;
  t4219 = t3336*t4218;
  t4220 = t4186 + t4195 + t4219;
  t4222 = t3396*t4182;
  t4223 = 0.340999127418*t3334*t4192;
  t4226 = t3410*t4218;
  t4227 = t4222 + t4223 + t4226;
  t4229 = 0.340999127418*t3334*t4182;
  t4230 = t3452*t4192;
  t4231 = t3457*t4218;
  t4238 = t4229 + t4230 + t4231;
  t4221 = t2767*t4220;
  t4228 = 0.340999127418*t3384*t4227;
  t4240 = t3440*t4238;
  t4241 = t4221 + t4228 + t4240;
  t4244 = t3478*t4220;
  t4245 = t3481*t4227;
  t4246 = 0.340999127418*t3384*t4238;
  t4249 = t4244 + t4245 + t4246;
  t4251 = t3509*t4220;
  t4252 = t3515*t4227;
  t4253 = t3541*t4238;
  t4255 = t4251 + t4252 + t4253;
  p_output1[0]=0. + t1036*t1289 + t2023*t2234 + t2342*t2459 - 0.018436*(t2680*t3464 + t3473*t3492 + t3499*t3548) + 0.432489*(t3464*t3564 + t3492*t3579 + t3548*t3587) + t1307*t1737*t360 - 0.854643*(t3464*t3595 + t3492*t3602 + t3548*t3605) + t3464*t3628 + t3492*t3645 + t3548*t3661 + t3376*t3670 + t3416*t3691 + t3460*t3707 + t3253*t3712 + t3312*t3724 + t3370*t3736 + t2918*t3751 + t3042*t3767 + t3025*t3773 + t3150*t3780 + t2857*t3792 + t3221*t3814 + t265*t476 + var1[0];
  p_output1[1]=0. + t1307*t1737*t309 + t265*t3828 + t1289*t3834 + t2234*t3844 + t2459*t3851 + t3792*t3859 + t3751*t3872 + t3773*t3886 + t3767*t3891 + t3780*t3906 + t3814*t3912 + t3712*t3920 + t3724*t3942 + t3736*t3950 + t3670*t3966 + t3691*t3976 + t3707*t3987 + t3628*t3992 + t3645*t4002 + t3661*t4009 - 0.018436*(t2680*t3992 + t3473*t4002 + t3499*t4009) + 0.432489*(t3564*t3992 + t3579*t4002 + t3587*t4009) - 0.854643*(t3595*t3992 + t3602*t4002 + t3605*t4009) + var1[1];
  p_output1[2]=0. + t1289*t1307*t269 - 1.*t1737*t372 + t1307*t265*t390 + t2234*t4113 + t2459*t4124 + t3792*t4135 + t3751*t4148 + t3773*t4153 + t3767*t4157 + t3780*t4166 + t3814*t4175 + t3712*t4182 + t3724*t4192 + t3736*t4218 + t3670*t4220 + t3691*t4227 + t3707*t4238 + t3628*t4241 + t3645*t4249 + t3661*t4255 - 0.018436*(t2680*t4241 + t3473*t4249 + t3499*t4255) + 0.432489*(t3564*t4241 + t3579*t4249 + t3587*t4255) - 0.854643*(t3595*t4241 + t3602*t4249 + t3605*t4255) + var1[2];
}



void p_LeftToeBottomBack_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
