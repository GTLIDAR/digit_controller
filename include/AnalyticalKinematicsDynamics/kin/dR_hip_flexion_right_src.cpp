/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:44:47 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dR_hip_flexion_right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t112;
  double t1201;
  double t815;
  double t860;
  double t905;
  double t2071;
  double t1286;
  double t1570;
  double t2089;
  double t6;
  double t137;
  double t703;
  double t1591;
  double t2127;
  double t2242;
  double t2503;
  double t2555;
  double t2573;
  double t3222;
  double t3246;
  double t3293;
  double t292;
  double t582;
  double t786;
  double t2266;
  double t2374;
  double t2431;
  double t2583;
  double t2706;
  double t2761;
  double t2770;
  double t2803;
  double t2946;
  double t2970;
  double t3036;
  double t3080;
  double t3099;
  double t3323;
  double t3325;
  double t3326;
  double t3329;
  double t3335;
  double t3364;
  double t3376;
  double t3388;
  double t3390;
  double t3395;
  double t2735;
  double t2741;
  double t3647;
  double t3644;
  double t3673;
  double t3676;
  double t3709;
  double t3718;
  double t3735;
  double t10;
  double t18;
  double t3698;
  double t3736;
  double t3737;
  double t3753;
  double t3775;
  double t3779;
  double t3314;
  double t3317;
  double t3752;
  double t3783;
  double t3784;
  double t3451;
  double t3453;
  double t3792;
  double t3798;
  double t3801;
  double t3494;
  double t3496;
  double t3841;
  double t3854;
  double t3857;
  double t3558;
  double t3559;
  double t3587;
  double t3605;
  double t4027;
  double t4029;
  double t4030;
  double t4024;
  double t4032;
  double t4039;
  double t4047;
  double t4048;
  double t4049;
  double t4043;
  double t4064;
  double t4065;
  double t4070;
  double t4076;
  double t4080;
  double t4110;
  double t4120;
  double t4130;
  double t4214;
  double t4215;
  double t4210;
  double t4220;
  double t4232;
  double t4250;
  double t4266;
  double t4267;
  double t4273;
  double t4276;
  double t4277;
  double t4287;
  double t4290;
  double t4362;
  double t4368;
  double t4369;
  double t4378;
  double t4396;
  double t4399;
  double t4420;
  double t4422;
  double t4424;
  double t4429;
  double t4437;
  double t4443;
  double t4592;
  double t4596;
  double t4604;
  double t4608;
  double t4609;
  double t4612;
  double t4605;
  double t4618;
  double t4621;
  double t4632;
  double t4635;
  double t4642;
  double t4584;
  double t4623;
  double t4645;
  double t4661;
  double t4671;
  double t4673;
  double t4682;
  double t4690;
  double t4706;
  double t4714;
  double t4725;
  double t4730;
  double t4805;
  double t4807;
  double t4810;
  double t4816;
  double t4820;
  double t4821;
  double t4798;
  double t4813;
  double t4823;
  double t4829;
  double t4835;
  double t4849;
  double t4851;
  double t4855;
  double t4868;
  double t4884;
  double t4890;
  double t4897;
  double t5045;
  double t5046;
  double t5056;
  double t5058;
  double t5059;
  double t5069;
  double t5071;
  double t5073;
  double t5065;
  double t5080;
  double t5081;
  double t5097;
  double t5101;
  double t5119;
  double t5133;
  double t5138;
  double t5141;
  double t5207;
  double t5211;
  double t5212;
  double t5204;
  double t5217;
  double t5219;
  double t5222;
  double t5223;
  double t5230;
  double t5220;
  double t5232;
  double t5239;
  double t5247;
  double t5262;
  double t5264;
  double t5287;
  double t5293;
  double t5295;
  double t5428;
  double t5443;
  double t5421;
  double t5449;
  double t5450;
  double t5456;
  double t5460;
  double t5471;
  double t5486;
  double t5494;
  double t5496;
  double t5507;
  double t5510;
  double t5629;
  double t5637;
  double t5638;
  double t5662;
  double t5690;
  double t5699;
  double t5702;
  double t5710;
  double t5739;
  double t5742;
  double t5744;
  double t5752;
  double t5920;
  double t5930;
  double t5932;
  double t5942;
  double t5952;
  double t5954;
  double t5936;
  double t5956;
  double t5967;
  double t5981;
  double t5983;
  double t5984;
  double t5997;
  double t6005;
  double t6014;
  double t6062;
  double t6063;
  double t6064;
  double t6073;
  double t6074;
  double t6075;
  double t6072;
  double t6089;
  double t6090;
  double t6099;
  double t6102;
  double t6114;
  double t6116;
  double t6118;
  double t6123;
  double t6198;
  double t6209;
  double t6210;
  double t6223;
  double t6226;
  double t6228;
  double t6237;
  double t6241;
  double t6252;
  double t6253;
  double t6325;
  double t6329;
  double t6336;
  double t6344;
  double t6347;
  double t6349;
  double t6350;
  double t6354;
  double t6369;
  double t6379;
  double t6384;
  double t6385;
  double t6469;
  double t6471;
  double t6475;
  double t6492;
  double t6501;
  double t6503;
  double t6467;
  double t6484;
  double t6509;
  double t6518;
  double t6521;
  double t6535;
  double t6542;
  double t6543;
  double t6550;
  double t6552;
  double t6563;
  double t6572;
  double t2731;
  double t3103;
  double t3422;
  double t3426;
  double t3466;
  double t3487;
  double t3508;
  double t3530;
  double t3535;
  double t3554;
  double t3580;
  double t3609;
  double t3623;
  double t3640;
  double t3789;
  double t3818;
  double t3911;
  double t3915;
  double t3936;
  double t3954;
  double t3962;
  double t3968;
  double t3969;
  double t3974;
  double t3984;
  double t3994;
  double t3998;
  double t4006;
  double t4066;
  double t4081;
  double t4140;
  double t4143;
  double t4160;
  double t4171;
  double t4175;
  double t4176;
  double t4177;
  double t4186;
  double t4192;
  double t4197;
  double t4198;
  double t4203;
  double t4248;
  double t4275;
  double t4291;
  double t4297;
  double t4298;
  double t4304;
  double t4310;
  double t4312;
  double t4315;
  double t4321;
  double t4333;
  double t4334;
  double t4337;
  double t4349;
  double t4380;
  double t4423;
  double t4447;
  double t4449;
  double t4465;
  double t4502;
  double t4506;
  double t4515;
  double t4518;
  double t4521;
  double t4542;
  double t4551;
  double t4558;
  double t4559;
  double t4670;
  double t4701;
  double t4735;
  double t4737;
  double t4757;
  double t4763;
  double t4767;
  double t4768;
  double t4771;
  double t4775;
  double t4778;
  double t4779;
  double t4783;
  double t4785;
  double t4832;
  double t4865;
  double t4900;
  double t4907;
  double t4909;
  double t4910;
  double t4914;
  double t4918;
  double t4923;
  double t4925;
  double t4928;
  double t4931;
  double t4948;
  double t4955;
  double t4966;
  double t4970;
  double t4973;
  double t4979;
  double t4990;
  double t4991;
  double t4997;
  double t4998;
  double t5000;
  double t5002;
  double t5010;
  double t5012;
  double t5017;
  double t5031;
  double t5093;
  double t5132;
  double t5154;
  double t5156;
  double t5163;
  double t5166;
  double t5168;
  double t5169;
  double t5171;
  double t5172;
  double t5178;
  double t5179;
  double t5184;
  double t5186;
  double t5243;
  double t5270;
  double t5301;
  double t5309;
  double t5326;
  double t5330;
  double t5333;
  double t5347;
  double t5363;
  double t5368;
  double t5383;
  double t5384;
  double t5390;
  double t5406;
  double t5451;
  double t5489;
  double t5512;
  double t5514;
  double t5516;
  double t5528;
  double t5552;
  double t5558;
  double t5562;
  double t5574;
  double t5577;
  double t5605;
  double t5614;
  double t5615;
  double t5674;
  double t5715;
  double t5771;
  double t5778;
  double t5790;
  double t5810;
  double t5814;
  double t5834;
  double t5846;
  double t5861;
  double t5866;
  double t5867;
  double t5876;
  double t5881;
  double t5977;
  double t5988;
  double t6017;
  double t6019;
  double t6039;
  double t6040;
  double t6042;
  double t6045;
  double t6049;
  double t6050;
  double t6051;
  double t6055;
  double t6056;
  double t6058;
  double t6098;
  double t6115;
  double t6125;
  double t6131;
  double t6134;
  double t6140;
  double t6142;
  double t6143;
  double t6156;
  double t6159;
  double t6160;
  double t6162;
  double t6177;
  double t6186;
  double t6215;
  double t6233;
  double t6254;
  double t6257;
  double t6265;
  double t6267;
  double t6283;
  double t6286;
  double t6287;
  double t6289;
  double t6291;
  double t6298;
  double t6300;
  double t6313;
  double t6345;
  double t6367;
  double t6398;
  double t6407;
  double t6409;
  double t6412;
  double t6419;
  double t6423;
  double t6429;
  double t6430;
  double t6431;
  double t6436;
  double t6447;
  double t6451;
  double t6519;
  double t6548;
  double t6574;
  double t6575;
  double t6582;
  double t6603;
  double t6606;
  double t6619;
  double t6620;
  double t6621;
  double t6624;
  double t6634;
  double t6635;
  double t6637;
  t112 = Cos(var1[3]);
  t1201 = Cos(var1[4]);
  t815 = Cos(var1[18]);
  t860 = -1.*t815;
  t905 = 1. + t860;
  t2071 = Cos(var1[17]);
  t1286 = Cos(var1[5]);
  t1570 = Sin(var1[17]);
  t2089 = Sin(var1[5]);
  t6 = Sin(var1[19]);
  t137 = Sin(var1[18]);
  t703 = Sin(var1[4]);
  t1591 = -1.*t112*t1201*t1286*t1570;
  t2127 = t2071*t112*t1201*t2089;
  t2242 = t1591 + t2127;
  t2503 = t2071*t112*t1201*t1286;
  t2555 = t112*t1201*t1570*t2089;
  t2573 = t2503 + t2555;
  t3222 = Cos(var1[19]);
  t3246 = -1.*t3222;
  t3293 = 1. + t3246;
  t292 = -0.366501*t137;
  t582 = 0. + t292;
  t786 = -1.*t112*t582*t703;
  t2266 = 0.340999127418*t905*t2242;
  t2374 = -0.134322983001*t905;
  t2431 = 1. + t2374;
  t2583 = t2431*t2573;
  t2706 = t786 + t2266 + t2583;
  t2761 = 0.930418*t137;
  t2770 = 0. + t2761;
  t2803 = -1.*t112*t2770*t703;
  t2946 = -0.8656776547239999*t905;
  t2970 = 1. + t2946;
  t3036 = t2970*t2242;
  t3080 = 0.340999127418*t905*t2573;
  t3099 = t2803 + t3036 + t3080;
  t3323 = -1.000000637725*t905;
  t3325 = 1. + t3323;
  t3326 = -1.*t3325*t112*t703;
  t3329 = -0.930418*t137;
  t3335 = 0. + t3329;
  t3364 = t3335*t2242;
  t3376 = 0.366501*t137;
  t3388 = 0. + t3376;
  t3390 = t3388*t2573;
  t3395 = t3326 + t3364 + t3390;
  t2735 = 0.366501*t6;
  t2741 = 0. + t2735;
  t3647 = Sin(var1[3]);
  t3644 = t112*t1286*t703;
  t3673 = t3647*t2089;
  t3676 = t3644 + t3673;
  t3709 = t1286*t3647;
  t3718 = -1.*t112*t703*t2089;
  t3735 = t3709 + t3718;
  t10 = 0.930418*t6;
  t18 = 0. + t10;
  t3698 = t1570*t3676;
  t3736 = t2071*t3735;
  t3737 = t3698 + t3736;
  t3753 = t2071*t3676;
  t3775 = -1.*t1570*t3735;
  t3779 = t3753 + t3775;
  t3314 = -1.000000637725*t3293;
  t3317 = 1. + t3314;
  t3752 = 0.340999127418*t905*t3737;
  t3783 = t2970*t3779;
  t3784 = t3752 + t3783;
  t3451 = -0.8656776547239999*t3293;
  t3453 = 1. + t3451;
  t3792 = t2431*t3737;
  t3798 = 0.340999127418*t905*t3779;
  t3801 = t3792 + t3798;
  t3494 = -0.930418*t6;
  t3496 = 0. + t3494;
  t3841 = t3388*t3737;
  t3854 = t3335*t3779;
  t3857 = t3841 + t3854;
  t3558 = -0.134322983001*t3293;
  t3559 = 1. + t3558;
  t3587 = -0.366501*t6;
  t3605 = 0. + t3587;
  t4027 = -1.*t1286*t3647;
  t4029 = t112*t703*t2089;
  t4030 = t4027 + t4029;
  t4024 = -1.*t1570*t3676;
  t4032 = t2071*t4030;
  t4039 = t4024 + t4032;
  t4047 = -1.*t2071*t3676;
  t4048 = -1.*t1570*t4030;
  t4049 = t4047 + t4048;
  t4043 = 0.340999127418*t905*t4039;
  t4064 = t2970*t4049;
  t4065 = t4043 + t4064;
  t4070 = t2431*t4039;
  t4076 = 0.340999127418*t905*t4049;
  t4080 = t4070 + t4076;
  t4110 = t3388*t4039;
  t4120 = t3335*t4049;
  t4130 = t4110 + t4120;
  t4214 = t1570*t4030;
  t4215 = t3753 + t4214;
  t4210 = t112*t1201*t582;
  t4220 = t2431*t4215;
  t4232 = t4210 + t4043 + t4220;
  t4250 = t112*t1201*t2770;
  t4266 = t2970*t4039;
  t4267 = 0.340999127418*t905*t4215;
  t4273 = t4250 + t4266 + t4267;
  t4276 = t3325*t112*t1201;
  t4277 = t3335*t4039;
  t4287 = t3388*t4215;
  t4290 = t4276 + t4277 + t4287;
  t4362 = -1.000000637725*t112*t1201*t137;
  t4368 = -0.930418*t815*t4039;
  t4369 = 0.366501*t815*t4215;
  t4378 = t4362 + t4368 + t4369;
  t4396 = -0.366501*t815*t112*t1201;
  t4399 = 0.340999127418*t137*t4039;
  t4420 = -0.134322983001*t137*t4215;
  t4422 = t4396 + t4399 + t4420;
  t4424 = 0.930418*t815*t112*t1201;
  t4429 = -0.8656776547239999*t137*t4039;
  t4437 = 0.340999127418*t137*t4215;
  t4443 = t4424 + t4429 + t4437;
  t4592 = -1.*t1286*t3647*t703;
  t4596 = t112*t2089;
  t4604 = t4592 + t4596;
  t4608 = -1.*t112*t1286;
  t4609 = -1.*t3647*t703*t2089;
  t4612 = t4608 + t4609;
  t4605 = -1.*t1570*t4604;
  t4618 = t2071*t4612;
  t4621 = t4605 + t4618;
  t4632 = t2071*t4604;
  t4635 = t1570*t4612;
  t4642 = t4632 + t4635;
  t4584 = -1.*t1201*t582*t3647;
  t4623 = 0.340999127418*t905*t4621;
  t4645 = t2431*t4642;
  t4661 = t4584 + t4623 + t4645;
  t4671 = -1.*t1201*t2770*t3647;
  t4673 = t2970*t4621;
  t4682 = 0.340999127418*t905*t4642;
  t4690 = t4671 + t4673 + t4682;
  t4706 = -1.*t3325*t1201*t3647;
  t4714 = t3335*t4621;
  t4725 = t3388*t4642;
  t4730 = t4706 + t4714 + t4725;
  t4805 = -1.*t1201*t1286*t1570*t3647;
  t4807 = t2071*t1201*t3647*t2089;
  t4810 = t4805 + t4807;
  t4816 = t2071*t1201*t1286*t3647;
  t4820 = t1201*t1570*t3647*t2089;
  t4821 = t4816 + t4820;
  t4798 = -1.*t582*t3647*t703;
  t4813 = 0.340999127418*t905*t4810;
  t4823 = t2431*t4821;
  t4829 = t4798 + t4813 + t4823;
  t4835 = -1.*t2770*t3647*t703;
  t4849 = t2970*t4810;
  t4851 = 0.340999127418*t905*t4821;
  t4855 = t4835 + t4849 + t4851;
  t4868 = -1.*t3325*t3647*t703;
  t4884 = t3335*t4810;
  t4890 = t3388*t4821;
  t4897 = t4868 + t4884 + t4890;
  t5045 = t1286*t3647*t703;
  t5046 = -1.*t112*t2089;
  t5056 = t5045 + t5046;
  t5058 = t1570*t5056;
  t5059 = t5058 + t4618;
  t5069 = t2071*t5056;
  t5071 = -1.*t1570*t4612;
  t5073 = t5069 + t5071;
  t5065 = 0.340999127418*t905*t5059;
  t5080 = t2970*t5073;
  t5081 = t5065 + t5080;
  t5097 = t2431*t5059;
  t5101 = 0.340999127418*t905*t5073;
  t5119 = t5097 + t5101;
  t5133 = t3388*t5059;
  t5138 = t3335*t5073;
  t5141 = t5133 + t5138;
  t5207 = t112*t1286;
  t5211 = t3647*t703*t2089;
  t5212 = t5207 + t5211;
  t5204 = -1.*t1570*t5056;
  t5217 = t2071*t5212;
  t5219 = t5204 + t5217;
  t5222 = -1.*t2071*t5056;
  t5223 = -1.*t1570*t5212;
  t5230 = t5222 + t5223;
  t5220 = 0.340999127418*t905*t5219;
  t5232 = t2970*t5230;
  t5239 = t5220 + t5232;
  t5247 = t2431*t5219;
  t5262 = 0.340999127418*t905*t5230;
  t5264 = t5247 + t5262;
  t5287 = t3388*t5219;
  t5293 = t3335*t5230;
  t5295 = t5287 + t5293;
  t5428 = t1570*t5212;
  t5443 = t5069 + t5428;
  t5421 = t1201*t582*t3647;
  t5449 = t2431*t5443;
  t5450 = t5421 + t5220 + t5449;
  t5456 = t1201*t2770*t3647;
  t5460 = t2970*t5219;
  t5471 = 0.340999127418*t905*t5443;
  t5486 = t5456 + t5460 + t5471;
  t5494 = t3325*t1201*t3647;
  t5496 = t3335*t5219;
  t5507 = t3388*t5443;
  t5510 = t5494 + t5496 + t5507;
  t5629 = -1.000000637725*t1201*t137*t3647;
  t5637 = -0.930418*t815*t5219;
  t5638 = 0.366501*t815*t5443;
  t5662 = t5629 + t5637 + t5638;
  t5690 = -0.366501*t815*t1201*t3647;
  t5699 = 0.340999127418*t137*t5219;
  t5702 = -0.134322983001*t137*t5443;
  t5710 = t5690 + t5699 + t5702;
  t5739 = 0.930418*t815*t1201*t3647;
  t5742 = -0.8656776547239999*t137*t5219;
  t5744 = 0.340999127418*t137*t5443;
  t5752 = t5739 + t5742 + t5744;
  t5920 = -1.*t1201*t1286*t1570;
  t5930 = t2071*t1201*t2089;
  t5932 = t5920 + t5930;
  t5942 = -1.*t2071*t1201*t1286;
  t5952 = -1.*t1201*t1570*t2089;
  t5954 = t5942 + t5952;
  t5936 = 0.340999127418*t905*t5932;
  t5956 = t2970*t5954;
  t5967 = t5936 + t5956;
  t5981 = t2431*t5932;
  t5983 = 0.340999127418*t905*t5954;
  t5984 = t5981 + t5983;
  t5997 = t3388*t5932;
  t6005 = t3335*t5954;
  t6014 = t5997 + t6005;
  t6062 = t1201*t1286*t1570;
  t6063 = -1.*t2071*t1201*t2089;
  t6064 = t6062 + t6063;
  t6073 = t2071*t1201*t1286;
  t6074 = t1201*t1570*t2089;
  t6075 = t6073 + t6074;
  t6072 = 0.340999127418*t905*t6064;
  t6089 = t2970*t6075;
  t6090 = t6072 + t6089;
  t6099 = t2431*t6064;
  t6102 = 0.340999127418*t905*t6075;
  t6114 = t6099 + t6102;
  t6116 = t3388*t6064;
  t6118 = t3335*t6075;
  t6123 = t6116 + t6118;
  t6198 = -1.*t582*t703;
  t6209 = t2431*t6075;
  t6210 = t6198 + t5936 + t6209;
  t6223 = -1.*t2770*t703;
  t6226 = t2970*t5932;
  t6228 = t6223 + t6226 + t6102;
  t6237 = -1.*t3325*t703;
  t6241 = t3335*t5932;
  t6252 = t3388*t6075;
  t6253 = t6237 + t6241 + t6252;
  t6325 = 1.000000637725*t137*t703;
  t6329 = -0.930418*t815*t5932;
  t6336 = 0.366501*t815*t6075;
  t6344 = t6325 + t6329 + t6336;
  t6347 = 0.366501*t815*t703;
  t6349 = 0.340999127418*t137*t5932;
  t6350 = -0.134322983001*t137*t6075;
  t6354 = t6347 + t6349 + t6350;
  t6369 = -0.930418*t815*t703;
  t6379 = -0.8656776547239999*t137*t5932;
  t6384 = 0.340999127418*t137*t6075;
  t6385 = t6369 + t6379 + t6384;
  t6469 = t1286*t1570*t703;
  t6471 = -1.*t2071*t703*t2089;
  t6475 = t6469 + t6471;
  t6492 = -1.*t2071*t1286*t703;
  t6501 = -1.*t1570*t703*t2089;
  t6503 = t6492 + t6501;
  t6467 = -1.*t1201*t582;
  t6484 = 0.340999127418*t905*t6475;
  t6509 = t2431*t6503;
  t6518 = t6467 + t6484 + t6509;
  t6521 = -1.*t1201*t2770;
  t6535 = t2970*t6475;
  t6542 = 0.340999127418*t905*t6503;
  t6543 = t6521 + t6535 + t6542;
  t6550 = -1.*t3325*t1201;
  t6552 = t3335*t6475;
  t6563 = t3388*t6503;
  t6572 = t6550 + t6552 + t6563;
  t2731 = t18*t2706;
  t3103 = t2741*t3099;
  t3422 = t3317*t3395;
  t3426 = t2731 + t3103 + t3422;
  t3466 = t3453*t2706;
  t3487 = -0.340999127418*t3293*t3099;
  t3508 = t3496*t3395;
  t3530 = t3466 + t3487 + t3508;
  t3535 = -0.657905*t3530;
  t3554 = -0.340999127418*t3293*t2706;
  t3580 = t3559*t3099;
  t3609 = t3605*t3395;
  t3623 = t3554 + t3580 + t3609;
  t3640 = -0.259155*t3623;
  t3789 = t2741*t3784;
  t3818 = t18*t3801;
  t3911 = t3317*t3857;
  t3915 = t3789 + t3818 + t3911;
  t3936 = -0.340999127418*t3293*t3784;
  t3954 = t3453*t3801;
  t3962 = t3496*t3857;
  t3968 = t3936 + t3954 + t3962;
  t3969 = -0.657905*t3968;
  t3974 = t3559*t3784;
  t3984 = -0.340999127418*t3293*t3801;
  t3994 = t3605*t3857;
  t3998 = t3974 + t3984 + t3994;
  t4006 = -0.259155*t3998;
  t4066 = t2741*t4065;
  t4081 = t18*t4080;
  t4140 = t3317*t4130;
  t4143 = t4066 + t4081 + t4140;
  t4160 = -0.340999127418*t3293*t4065;
  t4171 = t3453*t4080;
  t4175 = t3496*t4130;
  t4176 = t4160 + t4171 + t4175;
  t4177 = -0.657905*t4176;
  t4186 = t3559*t4065;
  t4192 = -0.340999127418*t3293*t4080;
  t4197 = t3605*t4130;
  t4198 = t4186 + t4192 + t4197;
  t4203 = -0.259155*t4198;
  t4248 = -0.8656776547239999*t6*t4232;
  t4275 = -0.340999127418*t6*t4273;
  t4291 = -0.930418*t3222*t4290;
  t4297 = t4248 + t4275 + t4291;
  t4298 = -0.657905*t4297;
  t4304 = -0.340999127418*t6*t4232;
  t4310 = -0.134322983001*t6*t4273;
  t4312 = -0.366501*t3222*t4290;
  t4315 = t4304 + t4310 + t4312;
  t4321 = -0.259155*t4315;
  t4333 = 0.930418*t3222*t4232;
  t4334 = 0.366501*t3222*t4273;
  t4337 = -1.000000637725*t6*t4290;
  t4349 = t4333 + t4334 + t4337;
  t4380 = t3605*t4378;
  t4423 = -0.340999127418*t3293*t4422;
  t4447 = t3559*t4443;
  t4449 = t4380 + t4423 + t4447;
  t4465 = -0.259155*t4449;
  t4502 = t3496*t4378;
  t4506 = t3453*t4422;
  t4515 = -0.340999127418*t3293*t4443;
  t4518 = t4502 + t4506 + t4515;
  t4521 = -0.657905*t4518;
  t4542 = t3317*t4378;
  t4551 = t18*t4422;
  t4558 = t2741*t4443;
  t4559 = t4542 + t4551 + t4558;
  t4670 = t18*t4661;
  t4701 = t2741*t4690;
  t4735 = t3317*t4730;
  t4737 = t4670 + t4701 + t4735;
  t4757 = t3453*t4661;
  t4763 = -0.340999127418*t3293*t4690;
  t4767 = t3496*t4730;
  t4768 = t4757 + t4763 + t4767;
  t4771 = -0.657905*t4768;
  t4775 = -0.340999127418*t3293*t4661;
  t4778 = t3559*t4690;
  t4779 = t3605*t4730;
  t4783 = t4775 + t4778 + t4779;
  t4785 = -0.259155*t4783;
  t4832 = t18*t4829;
  t4865 = t2741*t4855;
  t4900 = t3317*t4897;
  t4907 = t4832 + t4865 + t4900;
  t4909 = t3453*t4829;
  t4910 = -0.340999127418*t3293*t4855;
  t4914 = t3496*t4897;
  t4918 = t4909 + t4910 + t4914;
  t4923 = -0.657905*t4918;
  t4925 = -0.340999127418*t3293*t4829;
  t4928 = t3559*t4855;
  t4931 = t3605*t4897;
  t4948 = t4925 + t4928 + t4931;
  t4955 = -0.259155*t4948;
  t4966 = t18*t4232;
  t4970 = t2741*t4273;
  t4973 = t3317*t4290;
  t4979 = t4966 + t4970 + t4973;
  t4990 = t3453*t4232;
  t4991 = -0.340999127418*t3293*t4273;
  t4997 = t3496*t4290;
  t4998 = t4990 + t4991 + t4997;
  t5000 = -0.657905*t4998;
  t5002 = -0.340999127418*t3293*t4232;
  t5010 = t3559*t4273;
  t5012 = t3605*t4290;
  t5017 = t5002 + t5010 + t5012;
  t5031 = -0.259155*t5017;
  t5093 = t2741*t5081;
  t5132 = t18*t5119;
  t5154 = t3317*t5141;
  t5156 = t5093 + t5132 + t5154;
  t5163 = -0.340999127418*t3293*t5081;
  t5166 = t3453*t5119;
  t5168 = t3496*t5141;
  t5169 = t5163 + t5166 + t5168;
  t5171 = -0.657905*t5169;
  t5172 = t3559*t5081;
  t5178 = -0.340999127418*t3293*t5119;
  t5179 = t3605*t5141;
  t5184 = t5172 + t5178 + t5179;
  t5186 = -0.259155*t5184;
  t5243 = t2741*t5239;
  t5270 = t18*t5264;
  t5301 = t3317*t5295;
  t5309 = t5243 + t5270 + t5301;
  t5326 = -0.340999127418*t3293*t5239;
  t5330 = t3453*t5264;
  t5333 = t3496*t5295;
  t5347 = t5326 + t5330 + t5333;
  t5363 = -0.657905*t5347;
  t5368 = t3559*t5239;
  t5383 = -0.340999127418*t3293*t5264;
  t5384 = t3605*t5295;
  t5390 = t5368 + t5383 + t5384;
  t5406 = -0.259155*t5390;
  t5451 = -0.8656776547239999*t6*t5450;
  t5489 = -0.340999127418*t6*t5486;
  t5512 = -0.930418*t3222*t5510;
  t5514 = t5451 + t5489 + t5512;
  t5516 = -0.657905*t5514;
  t5528 = -0.340999127418*t6*t5450;
  t5552 = -0.134322983001*t6*t5486;
  t5558 = -0.366501*t3222*t5510;
  t5562 = t5528 + t5552 + t5558;
  t5574 = -0.259155*t5562;
  t5577 = 0.930418*t3222*t5450;
  t5605 = 0.366501*t3222*t5486;
  t5614 = -1.000000637725*t6*t5510;
  t5615 = t5577 + t5605 + t5614;
  t5674 = t3605*t5662;
  t5715 = -0.340999127418*t3293*t5710;
  t5771 = t3559*t5752;
  t5778 = t5674 + t5715 + t5771;
  t5790 = -0.259155*t5778;
  t5810 = t3496*t5662;
  t5814 = t3453*t5710;
  t5834 = -0.340999127418*t3293*t5752;
  t5846 = t5810 + t5814 + t5834;
  t5861 = -0.657905*t5846;
  t5866 = t3317*t5662;
  t5867 = t18*t5710;
  t5876 = t2741*t5752;
  t5881 = t5866 + t5867 + t5876;
  t5977 = t2741*t5967;
  t5988 = t18*t5984;
  t6017 = t3317*t6014;
  t6019 = t5977 + t5988 + t6017;
  t6039 = -0.340999127418*t3293*t5967;
  t6040 = t3453*t5984;
  t6042 = t3496*t6014;
  t6045 = t6039 + t6040 + t6042;
  t6049 = -0.657905*t6045;
  t6050 = t3559*t5967;
  t6051 = -0.340999127418*t3293*t5984;
  t6055 = t3605*t6014;
  t6056 = t6050 + t6051 + t6055;
  t6058 = -0.259155*t6056;
  t6098 = t2741*t6090;
  t6115 = t18*t6114;
  t6125 = t3317*t6123;
  t6131 = t6098 + t6115 + t6125;
  t6134 = -0.340999127418*t3293*t6090;
  t6140 = t3453*t6114;
  t6142 = t3496*t6123;
  t6143 = t6134 + t6140 + t6142;
  t6156 = -0.657905*t6143;
  t6159 = t3559*t6090;
  t6160 = -0.340999127418*t3293*t6114;
  t6162 = t3605*t6123;
  t6177 = t6159 + t6160 + t6162;
  t6186 = -0.259155*t6177;
  t6215 = -0.8656776547239999*t6*t6210;
  t6233 = -0.340999127418*t6*t6228;
  t6254 = -0.930418*t3222*t6253;
  t6257 = t6215 + t6233 + t6254;
  t6265 = -0.657905*t6257;
  t6267 = -0.340999127418*t6*t6210;
  t6283 = -0.134322983001*t6*t6228;
  t6286 = -0.366501*t3222*t6253;
  t6287 = t6267 + t6283 + t6286;
  t6289 = -0.259155*t6287;
  t6291 = 0.930418*t3222*t6210;
  t6298 = 0.366501*t3222*t6228;
  t6300 = -1.000000637725*t6*t6253;
  t6313 = t6291 + t6298 + t6300;
  t6345 = t3605*t6344;
  t6367 = -0.340999127418*t3293*t6354;
  t6398 = t3559*t6385;
  t6407 = t6345 + t6367 + t6398;
  t6409 = -0.259155*t6407;
  t6412 = t3496*t6344;
  t6419 = t3453*t6354;
  t6423 = -0.340999127418*t3293*t6385;
  t6429 = t6412 + t6419 + t6423;
  t6430 = -0.657905*t6429;
  t6431 = t3317*t6344;
  t6436 = t18*t6354;
  t6447 = t2741*t6385;
  t6451 = t6431 + t6436 + t6447;
  t6519 = t18*t6518;
  t6548 = t2741*t6543;
  t6574 = t3317*t6572;
  t6575 = t6519 + t6548 + t6574;
  t6582 = t3453*t6518;
  t6603 = -0.340999127418*t3293*t6543;
  t6606 = t3496*t6572;
  t6619 = t6582 + t6603 + t6606;
  t6620 = -0.657905*t6619;
  t6621 = -0.340999127418*t3293*t6518;
  t6624 = t3559*t6543;
  t6634 = t3605*t6572;
  t6635 = t6621 + t6624 + t6634;
  t6637 = -0.259155*t6635;
  p_output1[0]=(0.707107*t4737 + t4771 + t4785)*var2[3] + (0.707107*t3426 + t3535 + t3640)*var2[4] + (0.707107*t3915 + t3969 + t4006)*var2[5] + (0.707107*t4143 + t4177 + t4203)*var2[17] + (t4465 + t4521 + 0.707107*t4559)*var2[18] + (t4298 + t4321 + 0.707107*t4349)*var2[19];
  p_output1[1]=(0.707107*t4979 + t5000 + t5031)*var2[3] + (0.707107*t4907 + t4923 + t4955)*var2[4] + (0.707107*t5156 + t5171 + t5186)*var2[5] + (0.707107*t5309 + t5363 + t5406)*var2[17] + (t5790 + t5861 + 0.707107*t5881)*var2[18] + (t5516 + t5574 + 0.707107*t5615)*var2[19];
  p_output1[2]=(0.707107*t6575 + t6620 + t6637)*var2[4] + (0.707107*t6131 + t6156 + t6186)*var2[5] + (0.707107*t6019 + t6049 + t6058)*var2[17] + (t6409 + t6430 + 0.707107*t6451)*var2[18] + (t6265 + t6289 + 0.707107*t6313)*var2[19];
  p_output1[3]=(-0.707107*t4737 + t4771 + t4785)*var2[3] + (-0.707107*t3426 + t3535 + t3640)*var2[4] + (-0.707107*t3915 + t3969 + t4006)*var2[5] + (-0.707107*t4143 + t4177 + t4203)*var2[17] + (t4465 + t4521 - 0.707107*t4559)*var2[18] + (t4298 + t4321 - 0.707107*t4349)*var2[19];
  p_output1[4]=(-0.707107*t4979 + t5000 + t5031)*var2[3] + (-0.707107*t4907 + t4923 + t4955)*var2[4] + (-0.707107*t5156 + t5171 + t5186)*var2[5] + (-0.707107*t5309 + t5363 + t5406)*var2[17] + (t5790 + t5861 - 0.707107*t5881)*var2[18] + (t5516 + t5574 - 0.707107*t5615)*var2[19];
  p_output1[5]=(-0.707107*t6575 + t6620 + t6637)*var2[4] + (-0.707107*t6131 + t6156 + t6186)*var2[5] + (-0.707107*t6019 + t6049 + t6058)*var2[17] + (t6409 + t6430 - 0.707107*t6451)*var2[18] + (t6265 + t6289 - 0.707107*t6313)*var2[19];
  p_output1[6]=(-0.366501*t4768 + 0.930418*t4783)*var2[3] + (-0.366501*t3530 + 0.930418*t3623)*var2[4] + (-0.366501*t3968 + 0.930418*t3998)*var2[5] + (-0.366501*t4176 + 0.930418*t4198)*var2[17] + (0.930418*t4449 - 0.366501*t4518)*var2[18] + (-0.366501*t4297 + 0.930418*t4315)*var2[19];
  p_output1[7]=(-0.366501*t4998 + 0.930418*t5017)*var2[3] + (-0.366501*t4918 + 0.930418*t4948)*var2[4] + (-0.366501*t5169 + 0.930418*t5184)*var2[5] + (-0.366501*t5347 + 0.930418*t5390)*var2[17] + (0.930418*t5778 - 0.366501*t5846)*var2[18] + (-0.366501*t5514 + 0.930418*t5562)*var2[19];
  p_output1[8]=(-0.366501*t6619 + 0.930418*t6635)*var2[4] + (-0.366501*t6143 + 0.930418*t6177)*var2[5] + (-0.366501*t6045 + 0.930418*t6056)*var2[17] + (0.930418*t6407 - 0.366501*t6429)*var2[18] + (-0.366501*t6257 + 0.930418*t6287)*var2[19];
}



void dR_hip_flexion_right_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
