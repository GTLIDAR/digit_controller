/*
 * Automatically Generated from Mathematica.
 * Tue 5 Jul 2022 00:28:03 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "LL_Right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1765;
  double t1674;
  double t1685;
  double t1738;
  double t1871;
  double t1772;
  double t1806;
  double t1872;
  double t219;
  double t290;
  double t986;
  double t1385;
  double t1666;
  double t1814;
  double t1876;
  double t1937;
  double t1985;
  double t1988;
  double t2039;
  double t2120;
  double t2115;
  double t1455;
  double t1487;
  double t1672;
  double t1950;
  double t1955;
  double t1975;
  double t2095;
  double t2105;
  double t2136;
  double t2182;
  double t2195;
  double t2218;
  double t2221;
  double t2237;
  double t2239;
  double t2270;
  double t2302;
  double t2306;
  double t2311;
  double t2330;
  double t2361;
  double t2363;
  double t2371;
  double t2398;
  double t2410;
  double t2419;
  double t2887;
  double t2678;
  double t2720;
  double t2813;
  double t2824;
  double t2863;
  double t2768;
  double t2992;
  double t2122;
  double t2296;
  double t2633;
  double t3302;
  double t2465;
  double t3346;
  double t3322;
  double t3209;
  double t3210;
  double t3125;
  double t3148;
  double t3156;
  double t3224;
  double t3252;
  double t3255;
  double t3409;
  double t3431;
  double t3435;
  double t3439;
  double t3109;
  double t3112;
  double t2922;
  double t2923;
  double t2933;
  double t2946;
  double t2285;
  double t3379;
  double t2631;
  double t3369;
  double t1062;
  double t1310;
  double t2106;
  double t2124;
  double t2279;
  double t2301;
  double t2450;
  double t2458;
  double t2467;
  double t2550;
  double t2551;
  double t2555;
  double t2605;
  double t2637;
  double t2638;
  double t2650;
  double t3629;
  double t3631;
  double t3494;
  double t3496;
  double t3497;
  double t3503;
  double t3507;
  double t3511;
  double t3617;
  double t3624;
  double t3545;
  double t3550;
  double t3555;
  double t3556;
  double t3568;
  double t3584;
  double t3661;
  double t3664;
  double t3678;
  double t3680;
  double t3688;
  double t3689;
  double t3443;
  double t3444;
  double t3541;
  double t3542;
  double t3871;
  double t3881;
  double t3880;
  double t3882;
  double t3883;
  double t3887;
  double t3891;
  double t3893;
  double t3884;
  double t3897;
  double t3911;
  double t3913;
  double t3916;
  double t3917;
  double t3872;
  double t3912;
  double t3922;
  double t3932;
  double t3936;
  double t3940;
  double t3950;
  double t3954;
  double t3978;
  double t3986;
  double t3991;
  double t4005;
  double t2797;
  double t2799;
  double t2803;
  double t2806;
  double t2875;
  double t2927;
  double t2953;
  double t2966;
  double t2722;
  double t2724;
  double t2740;
  double t2772;
  double t2784;
  double t3005;
  double t3016;
  double t3017;
  double t3022;
  double t3027;
  double t3039;
  double t3050;
  double t3054;
  double t3061;
  double t3079;
  double t3080;
  double t3088;
  double t3090;
  double t3119;
  double t3124;
  double t3169;
  double t3172;
  double t3173;
  double t3175;
  double t3188;
  double t3207;
  double t3217;
  double t3221;
  double t3289;
  double t3300;
  double t3313;
  double t3318;
  double t3323;
  double t3324;
  double t3326;
  double t3337;
  double t3338;
  double t3348;
  double t3352;
  double t3353;
  double t3358;
  double t3359;
  double t3362;
  double t3366;
  double t3370;
  double t3376;
  double t3392;
  double t3394;
  double t3396;
  double t3404;
  double t3438;
  double t3447;
  double t3492;
  double t4098;
  double t4100;
  double t4106;
  double t4125;
  double t4126;
  double t4135;
  double t3513;
  double t3515;
  double t3543;
  double t3544;
  double t3609;
  double t3626;
  double t3638;
  double t3640;
  double t3701;
  double t3705;
  double t3725;
  double t3727;
  double t3933;
  double t3976;
  double t4009;
  double t4011;
  double t4026;
  double t4027;
  double t4028;
  double t4031;
  double t4169;
  double t4171;
  double t4180;
  double t4181;
  double t4184;
  double t4186;
  double t4187;
  double t4188;
  double t3787;
  double t3789;
  double t4190;
  double t4191;
  double t4192;
  double t4193;
  double t3833;
  double t3834;
  double t3854;
  double t3855;
  double t4261;
  double t4264;
  double t4276;
  double t4281;
  double t4283;
  double t4288;
  double t4279;
  double t4289;
  double t4290;
  double t4303;
  double t4306;
  double t4307;
  double t4257;
  double t4292;
  double t4310;
  double t4313;
  double t4319;
  double t4321;
  double t4322;
  double t4324;
  double t4329;
  double t4331;
  double t4334;
  double t4335;
  double t4401;
  double t4404;
  double t4407;
  double t4428;
  double t4429;
  double t4430;
  double t4315;
  double t4325;
  double t4337;
  double t4340;
  double t4348;
  double t4355;
  double t4360;
  double t4364;
  double t4445;
  double t4448;
  double t4449;
  double t4451;
  double t4453;
  double t4456;
  double t4457;
  double t4458;
  double t4461;
  double t4462;
  double t4463;
  double t4465;
  double t3704;
  double t3721;
  double t3736;
  double t3744;
  double t2766;
  double t2789;
  double t2811;
  double t2991;
  double t3025;
  double t3053;
  double t3083;
  double t3159;
  double t3185;
  double t3279;
  double t3332;
  double t3361;
  double t3397;
  double t3512;
  double t3600;
  double t3696;
  double t3745;
  double t3761;
  double t3765;
  double t3771;
  double t3786;
  double t3795;
  double t3822;
  double t3823;
  double t3835;
  double t3837;
  double t3839;
  double t3848;
  double t3849;
  double t3851;
  double t3856;
  double t3857;
  double t3861;
  double t3866;
  double t3868;
  double t4197;
  double t4198;
  double t4200;
  double t4201;
  double t4059;
  double t4070;
  double t4082;
  double t4087;
  double t4089;
  double t4091;
  double t4093;
  double t4108;
  double t4112;
  double t4144;
  double t4146;
  double t4163;
  double t4164;
  double t4183;
  double t4189;
  double t4196;
  double t4203;
  double t4205;
  double t4207;
  double t4210;
  double t4211;
  double t4212;
  double t4213;
  double t4222;
  double t4229;
  double t4230;
  double t4232;
  double t4233;
  double t4235;
  double t4236;
  double t4240;
  double t4245;
  double t4247;
  double t4249;
  double t4251;
  double t4480;
  double t4486;
  double t4492;
  double t4494;
  double t4374;
  double t4376;
  double t4378;
  double t4379;
  double t4390;
  double t4393;
  double t4399;
  double t4410;
  double t4414;
  double t4434;
  double t4438;
  double t4441;
  double t4443;
  double t4452;
  double t4460;
  double t4473;
  double t4497;
  double t4500;
  double t4501;
  double t4506;
  double t4510;
  double t4513;
  double t4516;
  double t4521;
  double t4528;
  double t4532;
  double t4534;
  double t4538;
  double t4540;
  double t4542;
  double t4547;
  double t4552;
  double t4560;
  double t4561;
  double t4567;
  t1765 = Cos(var1[4]);
  t1674 = Cos(var1[14]);
  t1685 = -1.*t1674;
  t1738 = 1. + t1685;
  t1871 = Cos(var1[13]);
  t1772 = Cos(var1[5]);
  t1806 = Sin(var1[13]);
  t1872 = Sin(var1[5]);
  t219 = Cos(var1[15]);
  t290 = -1.*t219;
  t986 = 1. + t290;
  t1385 = Sin(var1[14]);
  t1666 = Sin(var1[4]);
  t1814 = -1.*t1765*t1772*t1806;
  t1876 = t1871*t1765*t1872;
  t1937 = t1814 + t1876;
  t1985 = t1871*t1765*t1772;
  t1988 = t1765*t1806*t1872;
  t2039 = t1985 + t1988;
  t2120 = Sin(var1[15]);
  t2115 = -0.051978134642000004*t986;
  t1455 = 0.994522*t1385;
  t1487 = 0. + t1455;
  t1672 = -1.*t1487*t1666;
  t1950 = 0.103955395616*t1738*t1937;
  t1955 = -0.9890740084840001*t1738;
  t1975 = 1. + t1955;
  t2095 = t1975*t2039;
  t2105 = t1672 + t1950 + t2095;
  t2136 = -0.104528*t1385;
  t2182 = 0. + t2136;
  t2195 = -1.*t2182*t1666;
  t2218 = -0.010926102783999999*t1738;
  t2221 = 1. + t2218;
  t2237 = t2221*t1937;
  t2239 = 0.103955395616*t1738*t2039;
  t2270 = t2195 + t2237 + t2239;
  t2302 = -1.0000001112680001*t1738;
  t2306 = 1. + t2302;
  t2311 = -1.*t2306*t1666;
  t2330 = 0.104528*t1385;
  t2361 = 0. + t2330;
  t2363 = t2361*t1937;
  t2371 = -0.994522*t1385;
  t2398 = 0. + t2371;
  t2410 = t2398*t2039;
  t2419 = t2311 + t2363 + t2410;
  t2887 = Sin(var1[18]);
  t2678 = -1.*t1871;
  t2720 = 1. + t2678;
  t2813 = Cos(var1[18]);
  t2824 = -1.*t2813;
  t2863 = 1. + t2824;
  t2768 = Sin(var1[17]);
  t2992 = Cos(var1[17]);
  t2122 = -0.707107*t2120;
  t2296 = 0.073913*t2120;
  t2633 = 0.703234*t2120;
  t3302 = 0.051978134642000004*t986;
  t2465 = 0.707107*t2120;
  t3346 = -0.05226439969100001*t986;
  t3322 = 0.49726168403800003*t986;
  t3209 = -0.366501*t2887;
  t3210 = 0. + t3209;
  t3125 = -1.*t1765*t1772*t2768;
  t3148 = t2992*t1765*t1872;
  t3156 = t3125 + t3148;
  t3224 = t2992*t1765*t1772;
  t3252 = t1765*t2768*t1872;
  t3255 = t3224 + t3252;
  t3409 = Cos(var1[19]);
  t3431 = -1.*t3409;
  t3435 = 1. + t3431;
  t3439 = Sin(var1[19]);
  t3109 = 0.930418*t2887;
  t3112 = 0. + t3109;
  t2922 = -0.930418*t2887;
  t2923 = 0. + t2922;
  t2933 = 0.366501*t2887;
  t2946 = 0. + t2933;
  t2285 = -0.49726168403800003*t986;
  t3379 = -0.073913*t2120;
  t2631 = 0.05226439969100001*t986;
  t3369 = -0.703234*t2120;
  t1062 = -0.5054634410180001*t986;
  t1310 = 1. + t1062;
  t2106 = t1310*t2105;
  t2124 = t2115 + t2122;
  t2279 = t2124*t2270;
  t2301 = t2285 + t2296;
  t2450 = t2301*t2419;
  t2458 = t2106 + t2279 + t2450;
  t2467 = t2115 + t2465;
  t2550 = t2467*t2105;
  t2551 = -0.9945383682050002*t986;
  t2555 = 1. + t2551;
  t2605 = t2555*t2270;
  t2637 = t2631 + t2633;
  t2638 = t2637*t2419;
  t2650 = t2550 + t2605 + t2638;
  t3629 = 0.930418*t3439;
  t3631 = 0. + t3629;
  t3494 = -1.*t3210*t1666;
  t3496 = 0.340999127418*t2863*t3156;
  t3497 = -0.134322983001*t2863;
  t3503 = 1. + t3497;
  t3507 = t3503*t3255;
  t3511 = t3494 + t3496 + t3507;
  t3617 = 0.366501*t3439;
  t3624 = 0. + t3617;
  t3545 = -1.*t3112*t1666;
  t3550 = -0.8656776547239999*t2863;
  t3555 = 1. + t3550;
  t3556 = t3555*t3156;
  t3568 = 0.340999127418*t2863*t3255;
  t3584 = t3545 + t3556 + t3568;
  t3661 = -1.000000637725*t2863;
  t3664 = 1. + t3661;
  t3678 = -1.*t3664*t1666;
  t3680 = t2923*t3156;
  t3688 = t2946*t3255;
  t3689 = t3678 + t3680 + t3688;
  t3443 = -0.930418*t3439;
  t3444 = 0. + t3443;
  t3541 = -0.366501*t3439;
  t3542 = 0. + t3541;
  t3871 = Cos(var1[3]);
  t3881 = Sin(var1[3]);
  t3880 = t3871*t1772*t1666;
  t3882 = t3881*t1872;
  t3883 = t3880 + t3882;
  t3887 = -1.*t1772*t3881;
  t3891 = t3871*t1666*t1872;
  t3893 = t3887 + t3891;
  t3884 = -1.*t1806*t3883;
  t3897 = t1871*t3893;
  t3911 = t3884 + t3897;
  t3913 = t1871*t3883;
  t3916 = t1806*t3893;
  t3917 = t3913 + t3916;
  t3872 = t3871*t1765*t1487;
  t3912 = 0.103955395616*t1738*t3911;
  t3922 = t1975*t3917;
  t3932 = t3872 + t3912 + t3922;
  t3936 = t3871*t1765*t2182;
  t3940 = t2221*t3911;
  t3950 = 0.103955395616*t1738*t3917;
  t3954 = t3936 + t3940 + t3950;
  t3978 = t2306*t3871*t1765;
  t3986 = t2361*t3911;
  t3991 = t2398*t3917;
  t4005 = t3978 + t3986 + t3991;
  t2797 = -0.056500534356700764*t1738;
  t2799 = 0.38315650737400003*t2398;
  t2803 = -0.040271188976*t2361;
  t2806 = 0. + t2797 + t2799 + t2803;
  t2875 = -0.04500040093286238*t2863;
  t2927 = -0.07877663122399998*t2923;
  t2953 = 0.031030906668*t2946;
  t2966 = 0. + t2875 + t2927 + t2953;
  t2722 = 0.4*t2720;
  t2724 = 0.12*t1806;
  t2740 = 0. + t2722 + t2724;
  t2772 = -0.091*t2768;
  t2784 = 0. + t2772;
  t3005 = -1.*t2992;
  t3016 = 1. + t3005;
  t3017 = -0.091*t3016;
  t3022 = 0. + t3017;
  t3027 = 0.12*t2720;
  t3039 = -0.4*t1806;
  t3050 = 0. + t3027 + t3039;
  t3054 = 1.1345904784751044e-7*var1[14];
  t3061 = -0.04027119345689465*t1738;
  t3079 = -0.05650052807*t2182;
  t3080 = t3054 + t3061 + t3079;
  t3088 = 1.296332362046933e-7*var1[18];
  t3090 = -0.07877668146182712*t2863;
  t3119 = -0.045000372235*t3112;
  t3124 = t3088 + t3090 + t3119;
  t3169 = 1.1924972351948546e-8*var1[14];
  t3172 = 0.38315655000705834*t1738;
  t3173 = -0.05650052807*t1487;
  t3175 = t3169 + t3172 + t3173;
  t3188 = 3.2909349868922137e-7*var1[18];
  t3207 = 0.03103092645718495*t2863;
  t3217 = -0.045000372235*t3210;
  t3221 = t3188 + t3207 + t3217;
  t3289 = -1.5601527583902087e-7*var1[15];
  t3300 = 0.09582494577057615*t986;
  t3313 = t3302 + t2122;
  t3318 = 0.231098203479*t3313;
  t3323 = t3322 + t2296;
  t3324 = 0.164383620275*t3323;
  t3326 = t3289 + t3300 + t3318 + t3324;
  t3337 = 1.639789470231751e-8*var1[15];
  t3338 = 0.22983603018311177*t986;
  t3348 = t3346 + t2633;
  t3352 = 0.164383620275*t3348;
  t3353 = t3302 + t2465;
  t3358 = 0.18957839082800002*t3353;
  t3359 = t3337 + t3338 + t3352 + t3358;
  t3362 = 1.568745163810375e-7*var1[15];
  t3366 = 0.08219200580743281*t986;
  t3370 = t3346 + t3369;
  t3376 = 0.231098203479*t3370;
  t3392 = t3322 + t3379;
  t3394 = 0.18957839082800002*t3392;
  t3396 = t3362 + t3366 + t3376 + t3394;
  t3404 = -1.296332362046933e-7*var1[19];
  t3438 = -0.14128592423750855*t3435;
  t3447 = -0.045000372235*t3444;
  t3492 = t3404 + t3438 + t3447;
  t4098 = -1.*t2768*t3883;
  t4100 = t2992*t3893;
  t4106 = t4098 + t4100;
  t4125 = t2992*t3883;
  t4126 = t2768*t3893;
  t4135 = t4125 + t4126;
  t3513 = 3.2909349868922137e-7*var1[19];
  t3515 = -0.055653945343889656*t3435;
  t3543 = -0.045000372235*t3542;
  t3544 = t3513 + t3515 + t3543;
  t3609 = -0.04500040093286238*t3435;
  t3626 = -0.055653909852*t3624;
  t3638 = -0.141285834136*t3631;
  t3640 = 0. + t3609 + t3626 + t3638;
  t3701 = t2285 + t3379;
  t3705 = t2631 + t3369;
  t3725 = -0.500001190325*t986;
  t3727 = 1. + t3725;
  t3933 = t1310*t3932;
  t3976 = t2124*t3954;
  t4009 = t2301*t4005;
  t4011 = t3933 + t3976 + t4009;
  t4026 = t2467*t3932;
  t4027 = t2555*t3954;
  t4028 = t2637*t4005;
  t4031 = t4026 + t4027 + t4028;
  t4169 = t3871*t1765*t3210;
  t4171 = 0.340999127418*t2863*t4106;
  t4180 = t3503*t4135;
  t4181 = t4169 + t4171 + t4180;
  t4184 = t3871*t1765*t3112;
  t4186 = t3555*t4106;
  t4187 = 0.340999127418*t2863*t4135;
  t4188 = t4184 + t4186 + t4187;
  t3787 = -1.000000637725*t3435;
  t3789 = 1. + t3787;
  t4190 = t3664*t3871*t1765;
  t4191 = t2923*t4106;
  t4192 = t2946*t4135;
  t4193 = t4190 + t4191 + t4192;
  t3833 = -0.8656776547239999*t3435;
  t3834 = 1. + t3833;
  t3854 = -0.134322983001*t3435;
  t3855 = 1. + t3854;
  t4261 = t1772*t3881*t1666;
  t4264 = -1.*t3871*t1872;
  t4276 = t4261 + t4264;
  t4281 = t3871*t1772;
  t4283 = t3881*t1666*t1872;
  t4288 = t4281 + t4283;
  t4279 = -1.*t1806*t4276;
  t4289 = t1871*t4288;
  t4290 = t4279 + t4289;
  t4303 = t1871*t4276;
  t4306 = t1806*t4288;
  t4307 = t4303 + t4306;
  t4257 = t1765*t1487*t3881;
  t4292 = 0.103955395616*t1738*t4290;
  t4310 = t1975*t4307;
  t4313 = t4257 + t4292 + t4310;
  t4319 = t1765*t2182*t3881;
  t4321 = t2221*t4290;
  t4322 = 0.103955395616*t1738*t4307;
  t4324 = t4319 + t4321 + t4322;
  t4329 = t2306*t1765*t3881;
  t4331 = t2361*t4290;
  t4334 = t2398*t4307;
  t4335 = t4329 + t4331 + t4334;
  t4401 = -1.*t2768*t4276;
  t4404 = t2992*t4288;
  t4407 = t4401 + t4404;
  t4428 = t2992*t4276;
  t4429 = t2768*t4288;
  t4430 = t4428 + t4429;
  t4315 = t1310*t4313;
  t4325 = t2124*t4324;
  t4337 = t2301*t4335;
  t4340 = t4315 + t4325 + t4337;
  t4348 = t2467*t4313;
  t4355 = t2555*t4324;
  t4360 = t2637*t4335;
  t4364 = t4348 + t4355 + t4360;
  t4445 = t1765*t3210*t3881;
  t4448 = 0.340999127418*t2863*t4407;
  t4449 = t3503*t4430;
  t4451 = t4445 + t4448 + t4449;
  t4453 = t1765*t3112*t3881;
  t4456 = t3555*t4407;
  t4457 = 0.340999127418*t2863*t4430;
  t4458 = t4453 + t4456 + t4457;
  t4461 = t3664*t1765*t3881;
  t4462 = t2923*t4407;
  t4463 = t2946*t4430;
  t4465 = t4461 + t4462 + t4463;
  t3704 = t3701*t2105;
  t3721 = t3705*t2270;
  t3736 = t3727*t2419;
  t3744 = t3704 + t3721 + t3736;
  t2766 = -1.*t1765*t1772*t2740;
  t2789 = t1765*t1772*t2784;
  t2811 = t2806*t1666;
  t2991 = -1.*t2966*t1666;
  t3025 = t3022*t1765*t1872;
  t3053 = -1.*t1765*t3050*t1872;
  t3083 = -1.*t3080*t1937;
  t3159 = t3124*t3156;
  t3185 = -1.*t3175*t2039;
  t3279 = t3221*t3255;
  t3332 = -1.*t3326*t2105;
  t3361 = -1.*t3359*t2270;
  t3397 = -1.*t3396*t2419;
  t3512 = t3492*t3511;
  t3600 = t3544*t3584;
  t3696 = t3640*t3689;
  t3745 = -0.060173*t3744;
  t3761 = -0.293218*t2458;
  t3765 = -0.220205*t2650;
  t3771 = t3631*t3511;
  t3786 = t3624*t3584;
  t3795 = t3789*t3689;
  t3822 = t3771 + t3786 + t3795;
  t3823 = -0.045*t3822;
  t3835 = t3834*t3511;
  t3837 = -0.340999127418*t3435*t3584;
  t3839 = t3444*t3689;
  t3848 = t3835 + t3837 + t3839;
  t3849 = -0.108789*t3848;
  t3851 = -0.340999127418*t3435*t3511;
  t3856 = t3855*t3584;
  t3857 = t3542*t3689;
  t3861 = t3851 + t3856 + t3857;
  t3866 = -0.138152*t3861;
  t3868 = 0. + t2766 + t2789 + t2811 + t2991 + t3025 + t3053 + t3083 + t3159 + t3185 + t3279 + t3332 + t3361 + t3397 + t3512 + t3600 + t3696 + t3745 + t3761 + t3765 + t3823 + t3849 + t3866;
  t4197 = t3701*t3932;
  t4198 = t3705*t3954;
  t4200 = t3727*t4005;
  t4201 = t4197 + t4198 + t4200;
  t4059 = -1.*t3871*t1765*t2806;
  t4070 = t3871*t1765*t2966;
  t4082 = -1.*t2740*t3883;
  t4087 = t2784*t3883;
  t4089 = t3022*t3893;
  t4091 = -1.*t3050*t3893;
  t4093 = -1.*t3080*t3911;
  t4108 = t3124*t4106;
  t4112 = -1.*t3175*t3917;
  t4144 = t3221*t4135;
  t4146 = -1.*t3326*t3932;
  t4163 = -1.*t3359*t3954;
  t4164 = -1.*t3396*t4005;
  t4183 = t3492*t4181;
  t4189 = t3544*t4188;
  t4196 = t3640*t4193;
  t4203 = -0.060173*t4201;
  t4205 = -0.293218*t4011;
  t4207 = -0.220205*t4031;
  t4210 = t3631*t4181;
  t4211 = t3624*t4188;
  t4212 = t3789*t4193;
  t4213 = t4210 + t4211 + t4212;
  t4222 = -0.045*t4213;
  t4229 = t3834*t4181;
  t4230 = -0.340999127418*t3435*t4188;
  t4232 = t3444*t4193;
  t4233 = t4229 + t4230 + t4232;
  t4235 = -0.108789*t4233;
  t4236 = -0.340999127418*t3435*t4181;
  t4240 = t3855*t4188;
  t4245 = t3542*t4193;
  t4247 = t4236 + t4240 + t4245;
  t4249 = -0.138152*t4247;
  t4251 = 0. + t4059 + t4070 + t4082 + t4087 + t4089 + t4091 + t4093 + t4108 + t4112 + t4144 + t4146 + t4163 + t4164 + t4183 + t4189 + t4196 + t4203 + t4205 + t4207 + t4222 + t4235 + t4249;
  t4480 = t3701*t4313;
  t4486 = t3705*t4324;
  t4492 = t3727*t4335;
  t4494 = t4480 + t4486 + t4492;
  t4374 = -1.*t1765*t2806*t3881;
  t4376 = t1765*t2966*t3881;
  t4378 = -1.*t2740*t4276;
  t4379 = t2784*t4276;
  t4390 = t3022*t4288;
  t4393 = -1.*t3050*t4288;
  t4399 = -1.*t3080*t4290;
  t4410 = t3124*t4407;
  t4414 = -1.*t3175*t4307;
  t4434 = t3221*t4430;
  t4438 = -1.*t3326*t4313;
  t4441 = -1.*t3359*t4324;
  t4443 = -1.*t3396*t4335;
  t4452 = t3492*t4451;
  t4460 = t3544*t4458;
  t4473 = t3640*t4465;
  t4497 = -0.060173*t4494;
  t4500 = -0.293218*t4340;
  t4501 = -0.220205*t4364;
  t4506 = t3631*t4451;
  t4510 = t3624*t4458;
  t4513 = t3789*t4465;
  t4516 = t4506 + t4510 + t4513;
  t4521 = -0.045*t4516;
  t4528 = t3834*t4451;
  t4532 = -0.340999127418*t3435*t4458;
  t4534 = t3444*t4465;
  t4538 = t4528 + t4532 + t4534;
  t4540 = -0.108789*t4538;
  t4542 = -0.340999127418*t3435*t4451;
  t4547 = t3855*t4458;
  t4552 = t3542*t4465;
  t4560 = t4542 + t4547 + t4552;
  t4561 = -0.138152*t4560;
  t4567 = 0. + t4374 + t4376 + t4378 + t4379 + t4390 + t4393 + t4399 + t4410 + t4414 + t4434 + t4438 + t4441 + t4443 + t4452 + t4460 + t4473 + t4497 + t4500 + t4501 + t4521 + t4540 + t4561;
  p_output1[0]=Sqrt(Power((-0.104528*t2458 - 0.994522*t2650)*t3868 + (-0.104528*t4011 - 0.994522*t4031)*t4251 + (-0.104528*t4340 - 0.994522*t4364)*t4567,2) + Power((0.703234*t2458 - 0.073913*t2650 + 0.707107*t3744)*t3868 + (0.703234*t4011 - 0.073913*t4031 + 0.707107*t4201)*t4251 + (0.703234*t4340 - 0.073913*t4364 + 0.707107*t4494)*t4567,2));
}



void LL_Right_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
