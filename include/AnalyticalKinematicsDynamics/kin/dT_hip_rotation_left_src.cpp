/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:33:16 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "dT_hip_rotation_left_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t490;
  double t2970;
  double t3030;
  double t3008;
  double t3015;
  double t3032;
  double t3090;
  double t2956;
  double t3147;
  double t3099;
  double t3102;
  double t3173;
  double t3174;
  double t3183;
  double t3146;
  double t3152;
  double t3162;
  double t3128;
  double t3137;
  double t3217;
  double t3219;
  double t3224;
  double t1219;
  double t2288;
  double t2839;
  double t2873;
  double t2953;
  double t3274;
  double t3275;
  double t3279;
  double t3260;
  double t3267;
  double t3268;
  double t3200;
  double t3201;
  double t3207;
  double t3215;
  double t3355;
  double t3356;
  double t3358;
  double t3342;
  double t3344;
  double t3350;
  double t3271;
  double t3298;
  double t3299;
  double t3364;
  double t3366;
  double t3369;
  double t3378;
  double t3416;
  double t3417;
  double t3418;
  double t3425;
  double t3427;
  double t3428;
  double t3231;
  double t3234;
  double t3235;
  double t3225;
  double t3227;
  double t3459;
  double t3460;
  double t3169;
  double t3193;
  double t3196;
  double t3464;
  double t3465;
  double t3280;
  double t3281;
  double t3285;
  double t3286;
  double t3288;
  double t3021;
  double t3039;
  double t3051;
  double t3124;
  double t3125;
  double t3127;
  double t3485;
  double t3486;
  double t3495;
  double t3496;
  double t3388;
  double t3389;
  double t3379;
  double t3382;
  double t3354;
  double t3361;
  double t3362;
  double t3472;
  double t3318;
  double t3319;
  double t3320;
  double t3325;
  double t3327;
  double t3332;
  double t3399;
  double t3400;
  double t3408;
  double t3411;
  double t3412;
  double t3430;
  double t3431;
  double t3432;
  double t3437;
  double t3438;
  double t3439;
  double t3441;
  double t3445;
  double t3446;
  double t3458;
  double t3461;
  double t3462;
  double t3466;
  double t3467;
  double t3468;
  double t3473;
  double t3474;
  double t3476;
  double t3477;
  double t3478;
  double t3483;
  double t3484;
  double t3488;
  double t3489;
  double t3493;
  double t3494;
  double t3497;
  double t3498;
  double t3502;
  double t3503;
  double t3504;
  double t3505;
  double t3507;
  double t3508;
  double t3509;
  double t3510;
  double t3515;
  double t3516;
  double t3517;
  double t3519;
  double t3521;
  double t3522;
  double t3523;
  double t3524;
  double t3529;
  double t3530;
  double t3532;
  double t3534;
  double t3535;
  double t3537;
  double t3542;
  double t3543;
  double t3544;
  double t3546;
  double t3547;
  double t3548;
  double t3552;
  double t3553;
  double t3554;
  double t3556;
  double t3557;
  double t3558;
  double t3559;
  double t3563;
  double t3564;
  double t3565;
  double t3566;
  double t3568;
  double t3569;
  double t3570;
  double t3571;
  double t3575;
  double t3576;
  double t3577;
  double t3578;
  double t3580;
  double t3581;
  double t3582;
  double t3583;
  double t3588;
  double t3589;
  double t3590;
  double t3592;
  double t3593;
  double t3594;
  double t3598;
  double t3599;
  double t3600;
  double t3602;
  double t3603;
  double t3604;
  double t3608;
  double t3609;
  double t3610;
  double t3611;
  double t3613;
  double t3616;
  double t3618;
  double t3619;
  double t3624;
  double t3625;
  double t3626;
  double t3627;
  double t3629;
  double t3630;
  double t3631;
  double t3632;
  double t3712;
  double t3713;
  double t3714;
  double t3715;
  double t3717;
  double t3718;
  double t3719;
  double t3720;
  double t3698;
  double t3699;
  double t3700;
  double t3701;
  double t3703;
  double t3704;
  double t3738;
  double t3739;
  double t3740;
  double t3741;
  double t3768;
  double t3769;
  double t3770;
  double t3772;
  double t3773;
  double t3774;
  double t3776;
  double t3777;
  double t3778;
  t490 = Cos(var1[3]);
  t2970 = Cos(var1[4]);
  t3030 = Cos(var1[5]);
  t3008 = Cos(var1[6]);
  t3015 = Sin(var1[5]);
  t3032 = Sin(var1[6]);
  t3090 = Sin(var1[7]);
  t2956 = Sin(var1[4]);
  t3147 = Sin(var1[3]);
  t3099 = -0.930418*t3090;
  t3102 = 0. + t3099;
  t3173 = -1.*t3030*t3147;
  t3174 = t490*t2956*t3015;
  t3183 = t3173 + t3174;
  t3146 = t490*t3030*t2956;
  t3152 = t3147*t3015;
  t3162 = t3146 + t3152;
  t3128 = -0.366501*t3090;
  t3137 = 0. + t3128;
  t3217 = t3030*t3147;
  t3219 = -1.*t490*t2956*t3015;
  t3224 = t3217 + t3219;
  t1219 = Cos(var1[7]);
  t2288 = -1.*t1219;
  t2839 = 1. + t2288;
  t2873 = -1.000000637725*t2839;
  t2953 = 1. + t2873;
  t3274 = -1.*t3030*t3147*t2956;
  t3275 = t490*t3015;
  t3279 = t3274 + t3275;
  t3260 = -1.*t490*t3030;
  t3267 = -1.*t3147*t2956*t3015;
  t3268 = t3260 + t3267;
  t3200 = t3008*t3183;
  t3201 = -1.*t3162*t3032;
  t3207 = t3200 + t3201;
  t3215 = t3008*t3162;
  t3355 = t490*t3030;
  t3356 = t3147*t2956*t3015;
  t3358 = t3355 + t3356;
  t3342 = t3030*t3147*t2956;
  t3344 = -1.*t490*t3015;
  t3350 = t3342 + t3344;
  t3271 = t3008*t3268;
  t3298 = t3183*t3032;
  t3299 = t3215 + t3298;
  t3364 = t3008*t3358;
  t3366 = -1.*t3350*t3032;
  t3369 = t3364 + t3366;
  t3378 = t3008*t3350;
  t3416 = t2970*t3008*t3015;
  t3417 = -1.*t2970*t3030*t3032;
  t3418 = t3416 + t3417;
  t3425 = t2970*t3030*t3008;
  t3427 = t2970*t3015*t3032;
  t3428 = t3425 + t3427;
  t3231 = t3008*t3224;
  t3234 = t3162*t3032;
  t3235 = t3231 + t3234;
  t3225 = -1.*t3224*t3032;
  t3227 = t3215 + t3225;
  t3459 = -0.8656776547239999*t2839;
  t3460 = 1. + t3459;
  t3169 = -1.*t3008*t3162;
  t3193 = -1.*t3183*t3032;
  t3196 = t3169 + t3193;
  t3464 = -0.134322983001*t2839;
  t3465 = 1. + t3464;
  t3280 = -1.*t3279*t3032;
  t3281 = t3271 + t3280;
  t3285 = t3008*t3279;
  t3286 = t3268*t3032;
  t3288 = t3285 + t3286;
  t3021 = t490*t2970*t3008*t3015;
  t3039 = -1.*t490*t2970*t3030*t3032;
  t3051 = t3021 + t3039;
  t3124 = t490*t2970*t3030*t3008;
  t3125 = t490*t2970*t3015*t3032;
  t3127 = t3124 + t3125;
  t3485 = 0.366501*t3090;
  t3486 = 0. + t3485;
  t3495 = 0.930418*t3090;
  t3496 = 0. + t3495;
  t3388 = t3350*t3032;
  t3389 = t3271 + t3388;
  t3379 = -1.*t3268*t3032;
  t3382 = t3378 + t3379;
  t3354 = -1.*t3008*t3350;
  t3361 = -1.*t3358*t3032;
  t3362 = t3354 + t3361;
  t3472 = -0.340999127418*t2839*t3207;
  t3318 = t2970*t3008*t3147*t3015;
  t3319 = -1.*t2970*t3030*t3147*t3032;
  t3320 = t3318 + t3319;
  t3325 = t2970*t3030*t3008*t3147;
  t3327 = t2970*t3147*t3015*t3032;
  t3332 = t3325 + t3327;
  t3399 = t3358*t3032;
  t3400 = t3378 + t3399;
  t3408 = -1.*t2970*t3030*t3008;
  t3411 = -1.*t2970*t3015*t3032;
  t3412 = t3408 + t3411;
  t3430 = -1.*t2970*t3008*t3015;
  t3431 = t2970*t3030*t3032;
  t3432 = t3430 + t3431;
  t3437 = -1.*t3008*t2956*t3015;
  t3438 = t3030*t2956*t3032;
  t3439 = t3437 + t3438;
  t3441 = -1.*t3030*t3008*t2956;
  t3445 = -1.*t2956*t3015*t3032;
  t3446 = t3441 + t3445;
  t3458 = -0.340999127418*t2839*t3235;
  t3461 = t3460*t3227;
  t3462 = t3458 + t3461;
  t3466 = t3465*t3235;
  t3467 = -0.340999127418*t2839*t3227;
  t3468 = t3466 + t3467;
  t3473 = t3460*t3196;
  t3474 = t3472 + t3473;
  t3476 = t3465*t3207;
  t3477 = -0.340999127418*t2839*t3196;
  t3478 = t3476 + t3477;
  t3483 = -0.340999127418*t2839*t3281;
  t3484 = t3465*t3288;
  t3488 = -1.*t2970*t3147*t3486;
  t3489 = t3483 + t3484 + t3488;
  t3493 = t3460*t3281;
  t3494 = -0.340999127418*t2839*t3288;
  t3497 = -1.*t2970*t3147*t3496;
  t3498 = t3493 + t3494 + t3497;
  t3502 = -0.340999127418*t2839*t3051;
  t3503 = t3465*t3127;
  t3504 = -1.*t490*t2956*t3486;
  t3505 = t3502 + t3503 + t3504;
  t3507 = t3460*t3051;
  t3508 = -0.340999127418*t2839*t3127;
  t3509 = -1.*t490*t2956*t3496;
  t3510 = t3507 + t3508 + t3509;
  t3515 = 0.930418*t490*t2970*t1219;
  t3516 = -0.8656776547239999*t3207*t3090;
  t3517 = -0.340999127418*t3299*t3090;
  t3519 = t3515 + t3516 + t3517;
  t3521 = 0.366501*t490*t2970*t1219;
  t3522 = -0.340999127418*t3207*t3090;
  t3523 = -0.134322983001*t3299*t3090;
  t3524 = t3521 + t3522 + t3523;
  t3529 = -0.340999127418*t2839*t3389;
  t3530 = t3460*t3382;
  t3532 = t3529 + t3530;
  t3534 = t3465*t3389;
  t3535 = -0.340999127418*t2839*t3382;
  t3537 = t3534 + t3535;
  t3542 = -0.340999127418*t2839*t3369;
  t3543 = t3460*t3362;
  t3544 = t3542 + t3543;
  t3546 = t3465*t3369;
  t3547 = -0.340999127418*t2839*t3362;
  t3548 = t3546 + t3547;
  t3552 = t3465*t3299;
  t3553 = t490*t2970*t3486;
  t3554 = t3472 + t3552 + t3553;
  t3556 = t3460*t3207;
  t3557 = -0.340999127418*t2839*t3299;
  t3558 = t490*t2970*t3496;
  t3559 = t3556 + t3557 + t3558;
  t3563 = -0.340999127418*t2839*t3320;
  t3564 = t3465*t3332;
  t3565 = -1.*t3147*t2956*t3486;
  t3566 = t3563 + t3564 + t3565;
  t3568 = t3460*t3320;
  t3569 = -0.340999127418*t2839*t3332;
  t3570 = -1.*t3147*t2956*t3496;
  t3571 = t3568 + t3569 + t3570;
  t3575 = 0.930418*t2970*t1219*t3147;
  t3576 = -0.8656776547239999*t3369*t3090;
  t3577 = -0.340999127418*t3400*t3090;
  t3578 = t3575 + t3576 + t3577;
  t3580 = 0.366501*t2970*t1219*t3147;
  t3581 = -0.340999127418*t3369*t3090;
  t3582 = -0.134322983001*t3400*t3090;
  t3583 = t3580 + t3581 + t3582;
  t3588 = -0.340999127418*t2839*t3418;
  t3589 = t3460*t3412;
  t3590 = t3588 + t3589;
  t3592 = t3465*t3418;
  t3593 = -0.340999127418*t2839*t3412;
  t3594 = t3592 + t3593;
  t3598 = -0.340999127418*t2839*t3432;
  t3599 = t3460*t3428;
  t3600 = t3598 + t3599;
  t3602 = t3465*t3432;
  t3603 = -0.340999127418*t2839*t3428;
  t3604 = t3602 + t3603;
  t3608 = -0.340999127418*t2839*t3439;
  t3609 = t3465*t3446;
  t3610 = -1.*t2970*t3486;
  t3611 = t3608 + t3609 + t3610;
  t3613 = t3460*t3439;
  t3616 = -0.340999127418*t2839*t3446;
  t3618 = -1.*t2970*t3496;
  t3619 = t3613 + t3616 + t3618;
  t3624 = -0.930418*t1219*t2956;
  t3625 = -0.8656776547239999*t3418*t3090;
  t3626 = -0.340999127418*t3428*t3090;
  t3627 = t3624 + t3625 + t3626;
  t3629 = -0.366501*t1219*t2956;
  t3630 = -0.340999127418*t3418*t3090;
  t3631 = -0.134322983001*t3428*t3090;
  t3632 = t3629 + t3630 + t3631;
  t3712 = -3.2909349868922137e-7*var1[7];
  t3713 = 0.03103092645718495*t2839;
  t3714 = -0.045000372235*t3486;
  t3715 = t3712 + t3713 + t3714;
  t3717 = 1.296332362046933e-7*var1[7];
  t3718 = 0.07877668146182712*t2839;
  t3719 = -0.045000372235*t3496;
  t3720 = t3717 + t3718 + t3719;
  t3698 = -1.*t3008;
  t3699 = 1. + t3698;
  t3700 = 0.091*t3699;
  t3701 = 0. + t3700;
  t3703 = 0.091*t3032;
  t3704 = 0. + t3703;
  t3738 = -0.04500040093286238*t2839;
  t3739 = 0.07877663122399998*t3102;
  t3740 = 0.031030906668*t3137;
  t3741 = 0. + t3738 + t3739 + t3740;
  t3768 = -0.0846680539949003*t1219;
  t3769 = -0.04500040093286238*t3090;
  t3770 = t3768 + t3769;
  t3772 = -0.016492681424499736*t1219;
  t3773 = 0.03103092645718495*t3090;
  t3774 = -3.2909349868922137e-7 + t3772 + t3773;
  t3776 = -0.04186915633414423*t1219;
  t3777 = 0.07877668146182712*t3090;
  t3778 = 1.296332362046933e-7 + t3776 + t3777;
  p_output1[0]=(t2953*t2970*t3147 - 1.*t3102*t3281 - 1.*t3137*t3288)*var2[3] + (-1.*t3051*t3102 - 1.*t3127*t3137 + t2953*t2956*t490)*var2[4] + (-1.*t3102*t3227 - 1.*t3137*t3235)*var2[5] + (-1.*t3102*t3196 - 1.*t3137*t3207)*var2[6] + (0.930418*t1219*t3207 + 0.366501*t1219*t3299 + 1.000000637725*t2970*t3090*t490)*var2[7];
  p_output1[1]=(-1.*t3102*t3207 - 1.*t3137*t3299 - 1.*t2953*t2970*t490)*var2[3] + (t2953*t2956*t3147 - 1.*t3102*t3320 - 1.*t3137*t3332)*var2[4] + (-1.*t3102*t3382 - 1.*t3137*t3389)*var2[5] + (-1.*t3102*t3362 - 1.*t3137*t3369)*var2[6] + (1.000000637725*t2970*t3090*t3147 + 0.930418*t1219*t3369 + 0.366501*t1219*t3400)*var2[7];
  p_output1[2]=(t2953*t2970 - 1.*t3102*t3439 - 1.*t3137*t3446)*var2[4] + (-1.*t3102*t3428 - 1.*t3137*t3432)*var2[5] + (-1.*t3102*t3412 - 1.*t3137*t3418)*var2[6] + (-1.000000637725*t2956*t3090 + 0.930418*t1219*t3418 + 0.366501*t1219*t3428)*var2[7];
  p_output1[3]=0;
  p_output1[4]=(0.366501*t3489 + 0.930418*t3498)*var2[3] + (0.366501*t3505 + 0.930418*t3510)*var2[4] + (0.930418*t3462 + 0.366501*t3468)*var2[5] + (0.930418*t3474 + 0.366501*t3478)*var2[6] + (0.930418*t3519 + 0.366501*t3524)*var2[7];
  p_output1[5]=(0.366501*t3554 + 0.930418*t3559)*var2[3] + (0.366501*t3566 + 0.930418*t3571)*var2[4] + (0.930418*t3532 + 0.366501*t3537)*var2[5] + (0.930418*t3544 + 0.366501*t3548)*var2[6] + (0.930418*t3578 + 0.366501*t3583)*var2[7];
  p_output1[6]=(0.366501*t3611 + 0.930418*t3619)*var2[4] + (0.930418*t3600 + 0.366501*t3604)*var2[5] + (0.930418*t3590 + 0.366501*t3594)*var2[6] + (0.930418*t3627 + 0.366501*t3632)*var2[7];
  p_output1[7]=0;
  p_output1[8]=(-0.930418*t3489 + 0.366501*t3498)*var2[3] + (-0.930418*t3505 + 0.366501*t3510)*var2[4] + (0.366501*t3462 - 0.930418*t3468)*var2[5] + (0.366501*t3474 - 0.930418*t3478)*var2[6] + (0.366501*t3519 - 0.930418*t3524)*var2[7];
  p_output1[9]=(-0.930418*t3554 + 0.366501*t3559)*var2[3] + (-0.930418*t3566 + 0.366501*t3571)*var2[4] + (0.366501*t3532 - 0.930418*t3537)*var2[5] + (0.366501*t3544 - 0.930418*t3548)*var2[6] + (0.366501*t3578 - 0.930418*t3583)*var2[7];
  p_output1[10]=(-0.930418*t3611 + 0.366501*t3619)*var2[4] + (0.366501*t3600 - 0.930418*t3604)*var2[5] + (0.366501*t3590 - 0.930418*t3594)*var2[6] + (0.366501*t3627 - 0.930418*t3632)*var2[7];
  p_output1[11]=0;
  p_output1[12]=var2[0] + (-0.045*(-1.*t2953*t2970*t3147 + t3102*t3281 + t3137*t3288) - 0.046986*t3489 + 0.109508*t3498 + t3268*t3701 + t3279*t3704 + t3288*t3715 + t3281*t3720 - 1.*t2970*t3147*t3741)*var2[3] + (-0.046986*t3505 + 0.109508*t3510 + t3127*t3715 + t3051*t3720 + t2970*t3015*t3701*t490 + t2970*t3030*t3704*t490 - 1.*t2956*t3741*t490 - 0.045*(t3051*t3102 + t3127*t3137 - 1.*t2953*t2956*t490))*var2[4] + (-0.045*(t3102*t3227 + t3137*t3235) + 0.109508*t3462 - 0.046986*t3468 + t3162*t3701 + t3224*t3704 + t3235*t3715 + t3227*t3720)*var2[5] + (0.091*t3008*t3162 + 0.091*t3032*t3183 - 0.045*(t3102*t3196 + t3137*t3207) + 0.109508*t3474 - 0.046986*t3478 + t3207*t3715 + t3196*t3720)*var2[6] + (0.109508*t3519 - 0.046986*t3524 + t3299*t3774 + t3207*t3778 + t2970*t3770*t490 - 0.045*(-0.930418*t1219*t3207 - 0.366501*t1219*t3299 - 1.000000637725*t2970*t3090*t490))*var2[7];
  p_output1[13]=var2[1] + (-0.046986*t3554 + 0.109508*t3559 + t3183*t3701 + t3162*t3704 + t3299*t3715 + t3207*t3720 + t2970*t3741*t490 - 0.045*(t3102*t3207 + t3137*t3299 + t2953*t2970*t490))*var2[3] + (-0.045*(-1.*t2953*t2956*t3147 + t3102*t3320 + t3137*t3332) - 0.046986*t3566 + 0.109508*t3571 + t2970*t3015*t3147*t3701 + t2970*t3030*t3147*t3704 + t3332*t3715 + t3320*t3720 - 1.*t2956*t3147*t3741)*var2[4] + (-0.045*(t3102*t3382 + t3137*t3389) + 0.109508*t3532 - 0.046986*t3537 + t3350*t3701 + t3268*t3704 + t3389*t3715 + t3382*t3720)*var2[5] + (0.091*t3008*t3350 + 0.091*t3032*t3358 - 0.045*(t3102*t3362 + t3137*t3369) + 0.109508*t3544 - 0.046986*t3548 + t3369*t3715 + t3362*t3720)*var2[6] + (-0.045*(-1.000000637725*t2970*t3090*t3147 - 0.930418*t1219*t3369 - 0.366501*t1219*t3400) + 0.109508*t3578 - 0.046986*t3583 + t2970*t3147*t3770 + t3400*t3774 + t3369*t3778)*var2[7];
  p_output1[14]=var2[2] + (-0.045*(-1.*t2953*t2970 + t3102*t3439 + t3137*t3446) - 0.046986*t3611 + 0.109508*t3619 - 1.*t2956*t3015*t3701 - 1.*t2956*t3030*t3704 + t3446*t3715 + t3439*t3720 - 1.*t2970*t3741)*var2[4] + (-0.045*(t3102*t3428 + t3137*t3432) + 0.109508*t3600 - 0.046986*t3604 + t2970*t3030*t3701 - 1.*t2970*t3015*t3704 + t3432*t3715 + t3428*t3720)*var2[5] + (0.091*t2970*t3008*t3030 + 0.091*t2970*t3015*t3032 - 0.045*(t3102*t3412 + t3137*t3418) + 0.109508*t3590 - 0.046986*t3594 + t3418*t3715 + t3412*t3720)*var2[6] + (-0.045*(1.000000637725*t2956*t3090 - 0.930418*t1219*t3418 - 0.366501*t1219*t3428) + 0.109508*t3627 - 0.046986*t3632 - 1.*t2956*t3770 + t3428*t3774 + t3418*t3778)*var2[7];
  p_output1[15]=0;
}



void dT_hip_rotation_left_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
