/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:47:14 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_toe_pitch_joint_right_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t117;
  double t1070;
  double t1113;
  double t1075;
  double t1127;
  double t587;
  double t744;
  double t866;
  double t1310;
  double t1081;
  double t1188;
  double t1270;
  double t1010;
  double t1314;
  double t1325;
  double t1346;
  double t25;
  double t123;
  double t216;
  double t1284;
  double t1353;
  double t1366;
  double t1521;
  double t1543;
  double t1555;
  double t1768;
  double t1824;
  double t1830;
  double t224;
  double t391;
  double t394;
  double t1368;
  double t1399;
  double t1508;
  double t1626;
  double t1654;
  double t1674;
  double t1681;
  double t1682;
  double t1685;
  double t1701;
  double t1713;
  double t1714;
  double t1751;
  double t1841;
  double t1843;
  double t1851;
  double t1863;
  double t1944;
  double t1952;
  double t1957;
  double t1961;
  double t1966;
  double t1977;
  double t1996;
  double t2031;
  double t2032;
  double t17;
  double t20;
  double t37;
  double t49;
  double t1655;
  double t1664;
  double t1672;
  double t1760;
  double t1831;
  double t1834;
  double t1978;
  double t1982;
  double t2034;
  double t2038;
  double t2045;
  double t2047;
  double t2050;
  double t2053;
  double t2098;
  double t2100;
  double t2129;
  double t2135;
  double t2137;
  double t2142;
  double t2145;
  double t2153;
  double t2159;
  double t2161;
  double t2257;
  double t2269;
  double t2271;
  double t21;
  double t22;
  double t1984;
  double t2107;
  double t2109;
  double t2125;
  double t2189;
  double t2200;
  double t2215;
  double t2216;
  double t2217;
  double t2225;
  double t2236;
  double t2240;
  double t2244;
  double t2246;
  double t2281;
  double t2286;
  double t2288;
  double t2289;
  double t2290;
  double t2305;
  double t2310;
  double t2311;
  double t2315;
  double t2318;
  double t2325;
  double t2332;
  double t2334;
  double t5;
  double t18;
  double t19;
  double t2201;
  double t2202;
  double t2205;
  double t2250;
  double t2273;
  double t2276;
  double t2321;
  double t2322;
  double t2338;
  double t2357;
  double t2365;
  double t2366;
  double t2367;
  double t2368;
  double t2369;
  double t2375;
  double t2383;
  double t2392;
  double t2393;
  double t2396;
  double t2397;
  double t2398;
  double t2400;
  double t2401;
  double t9;
  double t14;
  double t2478;
  double t2482;
  double t2484;
  double t2487;
  double t2488;
  double t2493;
  double t2486;
  double t2498;
  double t2499;
  double t2510;
  double t2517;
  double t2519;
  double t2475;
  double t2503;
  double t2520;
  double t2523;
  double t2534;
  double t2535;
  double t2537;
  double t2539;
  double t2542;
  double t2544;
  double t2545;
  double t2550;
  double t2528;
  double t2541;
  double t2551;
  double t2555;
  double t2562;
  double t2563;
  double t2564;
  double t2566;
  double t2573;
  double t2574;
  double t2575;
  double t2576;
  double t2556;
  double t2568;
  double t2585;
  double t2588;
  double t2593;
  double t2604;
  double t2609;
  double t2612;
  double t2624;
  double t2632;
  double t2633;
  double t2635;
  double t2377;
  double t2378;
  double t2406;
  double t2407;
  double t2592;
  double t2621;
  double t2636;
  double t2641;
  double t2417;
  double t2427;
  double t2646;
  double t2647;
  double t2650;
  double t2653;
  double t2657;
  double t2660;
  double t2662;
  double t2663;
  double t2445;
  double t2447;
  double t2452;
  double t2454;
  double t2458;
  double t2462;
  double t2763;
  double t2764;
  double t2766;
  double t2777;
  double t2779;
  double t2780;
  double t2758;
  double t2776;
  double t2782;
  double t2785;
  double t2793;
  double t2794;
  double t2796;
  double t2806;
  double t2811;
  double t2813;
  double t2816;
  double t2819;
  double t2789;
  double t2809;
  double t2820;
  double t2821;
  double t2828;
  double t2831;
  double t2834;
  double t2837;
  double t2843;
  double t2844;
  double t2847;
  double t2850;
  double t2827;
  double t2839;
  double t2853;
  double t2854;
  double t2859;
  double t2861;
  double t2866;
  double t2867;
  double t2872;
  double t2873;
  double t2874;
  double t2878;
  double t2858;
  double t2870;
  double t2880;
  double t2882;
  double t2886;
  double t2889;
  double t2891;
  double t2893;
  double t2900;
  double t2903;
  double t2907;
  double t2912;
  double t2324;
  double t2376;
  double t2402;
  double t2403;
  double t2411;
  double t2438;
  double t2439;
  double t2441;
  double t2449;
  double t2457;
  double t2466;
  double t2468;
  double t2645;
  double t2656;
  double t2673;
  double t2679;
  double t2684;
  double t2685;
  double t2688;
  double t2706;
  double t2716;
  double t2719;
  double t2723;
  double t2747;
  double t2885;
  double t2895;
  double t2923;
  double t2928;
  double t2935;
  double t2936;
  double t2937;
  double t2940;
  double t2945;
  double t2947;
  double t2954;
  double t2958;
  t117 = Cos(var1[3]);
  t1070 = Cos(var1[5]);
  t1113 = Sin(var1[3]);
  t1075 = Sin(var1[4]);
  t1127 = Sin(var1[5]);
  t587 = Cos(var1[18]);
  t744 = -1.*t587;
  t866 = 1. + t744;
  t1310 = Cos(var1[17]);
  t1081 = t117*t1070*t1075;
  t1188 = t1113*t1127;
  t1270 = t1081 + t1188;
  t1010 = Sin(var1[17]);
  t1314 = -1.*t1070*t1113;
  t1325 = t117*t1075*t1127;
  t1346 = t1314 + t1325;
  t25 = Sin(var1[19]);
  t123 = Cos(var1[4]);
  t216 = Sin(var1[18]);
  t1284 = -1.*t1010*t1270;
  t1353 = t1310*t1346;
  t1366 = t1284 + t1353;
  t1521 = t1310*t1270;
  t1543 = t1010*t1346;
  t1555 = t1521 + t1543;
  t1768 = Cos(var1[19]);
  t1824 = -1.*t1768;
  t1830 = 1. + t1824;
  t224 = -0.366501*t216;
  t391 = 0. + t224;
  t394 = t117*t123*t391;
  t1368 = 0.340999127418*t866*t1366;
  t1399 = -0.134322983001*t866;
  t1508 = 1. + t1399;
  t1626 = t1508*t1555;
  t1654 = t394 + t1368 + t1626;
  t1674 = 0.930418*t216;
  t1681 = 0. + t1674;
  t1682 = t117*t123*t1681;
  t1685 = -0.8656776547239999*t866;
  t1701 = 1. + t1685;
  t1713 = t1701*t1366;
  t1714 = 0.340999127418*t866*t1555;
  t1751 = t1682 + t1713 + t1714;
  t1841 = -1.000000637725*t866;
  t1843 = 1. + t1841;
  t1851 = t1843*t117*t123;
  t1863 = -0.930418*t216;
  t1944 = 0. + t1863;
  t1952 = t1944*t1366;
  t1957 = 0.366501*t216;
  t1961 = 0. + t1957;
  t1966 = t1961*t1555;
  t1977 = t1851 + t1952 + t1966;
  t1996 = Cos(var1[20]);
  t2031 = -1.*t1996;
  t2032 = 1. + t2031;
  t17 = Sin(var1[21]);
  t20 = Sin(var1[20]);
  t37 = 0.930418*t25;
  t49 = 0. + t37;
  t1655 = t49*t1654;
  t1664 = 0.366501*t25;
  t1672 = 0. + t1664;
  t1760 = t1672*t1751;
  t1831 = -1.000000637725*t1830;
  t1834 = 1. + t1831;
  t1978 = t1834*t1977;
  t1982 = t1655 + t1760 + t1978;
  t2034 = -0.8656776547239999*t1830;
  t2038 = 1. + t2034;
  t2045 = t2038*t1654;
  t2047 = -0.340999127418*t1830*t1751;
  t2050 = -0.930418*t25;
  t2053 = 0. + t2050;
  t2098 = t2053*t1977;
  t2100 = t2045 + t2047 + t2098;
  t2129 = -0.340999127418*t1830*t1654;
  t2135 = -0.134322983001*t1830;
  t2137 = 1. + t2135;
  t2142 = t2137*t1751;
  t2145 = -0.366501*t25;
  t2153 = 0. + t2145;
  t2159 = t2153*t1977;
  t2161 = t2129 + t2142 + t2159;
  t2257 = Cos(var1[21]);
  t2269 = -1.*t2257;
  t2271 = 1. + t2269;
  t21 = 0.366501*t20;
  t22 = 0. + t21;
  t1984 = t22*t1982;
  t2107 = -0.340999127418*t2032*t2100;
  t2109 = -0.134322983001*t2032;
  t2125 = 1. + t2109;
  t2189 = t2125*t2161;
  t2200 = t1984 + t2107 + t2189;
  t2215 = 0.930418*t20;
  t2216 = 0. + t2215;
  t2217 = t2216*t1982;
  t2225 = -0.8656776547239999*t2032;
  t2236 = 1. + t2225;
  t2240 = t2236*t2100;
  t2244 = -0.340999127418*t2032*t2161;
  t2246 = t2217 + t2240 + t2244;
  t2281 = -1.000000637725*t2032;
  t2286 = 1. + t2281;
  t2288 = t2286*t1982;
  t2289 = -0.930418*t20;
  t2290 = 0. + t2289;
  t2305 = t2290*t2100;
  t2310 = -0.366501*t20;
  t2311 = 0. + t2310;
  t2315 = t2311*t2161;
  t2318 = t2288 + t2305 + t2315;
  t2325 = Cos(var1[22]);
  t2332 = -1.*t2325;
  t2334 = 1. + t2332;
  t5 = Sin(var1[22]);
  t18 = -0.366501*t17;
  t19 = 0. + t18;
  t2201 = t19*t2200;
  t2202 = -0.930418*t17;
  t2205 = 0. + t2202;
  t2250 = t2205*t2246;
  t2273 = -1.000000637725*t2271;
  t2276 = 1. + t2273;
  t2321 = t2276*t2318;
  t2322 = t2201 + t2250 + t2321;
  t2338 = -0.134322983001*t2271;
  t2357 = 1. + t2338;
  t2365 = t2357*t2200;
  t2366 = -0.340999127418*t2271*t2246;
  t2367 = 0.366501*t17;
  t2368 = 0. + t2367;
  t2369 = t2368*t2318;
  t2375 = t2365 + t2366 + t2369;
  t2383 = -0.340999127418*t2271*t2200;
  t2392 = -0.8656776547239999*t2271;
  t2393 = 1. + t2392;
  t2396 = t2393*t2246;
  t2397 = 0.930418*t17;
  t2398 = 0. + t2397;
  t2400 = t2398*t2318;
  t2401 = t2383 + t2396 + t2400;
  t9 = 0.930418*t5;
  t14 = 0. + t9;
  t2478 = t1070*t1113*t1075;
  t2482 = -1.*t117*t1127;
  t2484 = t2478 + t2482;
  t2487 = t117*t1070;
  t2488 = t1113*t1075*t1127;
  t2493 = t2487 + t2488;
  t2486 = -1.*t1010*t2484;
  t2498 = t1310*t2493;
  t2499 = t2486 + t2498;
  t2510 = t1310*t2484;
  t2517 = t1010*t2493;
  t2519 = t2510 + t2517;
  t2475 = t123*t391*t1113;
  t2503 = 0.340999127418*t866*t2499;
  t2520 = t1508*t2519;
  t2523 = t2475 + t2503 + t2520;
  t2534 = t123*t1681*t1113;
  t2535 = t1701*t2499;
  t2537 = 0.340999127418*t866*t2519;
  t2539 = t2534 + t2535 + t2537;
  t2542 = t1843*t123*t1113;
  t2544 = t1944*t2499;
  t2545 = t1961*t2519;
  t2550 = t2542 + t2544 + t2545;
  t2528 = t49*t2523;
  t2541 = t1672*t2539;
  t2551 = t1834*t2550;
  t2555 = t2528 + t2541 + t2551;
  t2562 = t2038*t2523;
  t2563 = -0.340999127418*t1830*t2539;
  t2564 = t2053*t2550;
  t2566 = t2562 + t2563 + t2564;
  t2573 = -0.340999127418*t1830*t2523;
  t2574 = t2137*t2539;
  t2575 = t2153*t2550;
  t2576 = t2573 + t2574 + t2575;
  t2556 = t22*t2555;
  t2568 = -0.340999127418*t2032*t2566;
  t2585 = t2125*t2576;
  t2588 = t2556 + t2568 + t2585;
  t2593 = t2216*t2555;
  t2604 = t2236*t2566;
  t2609 = -0.340999127418*t2032*t2576;
  t2612 = t2593 + t2604 + t2609;
  t2624 = t2286*t2555;
  t2632 = t2290*t2566;
  t2633 = t2311*t2576;
  t2635 = t2624 + t2632 + t2633;
  t2377 = -0.8656776547239999*t2334;
  t2378 = 1. + t2377;
  t2406 = 0.366501*t5;
  t2407 = 0. + t2406;
  t2592 = t19*t2588;
  t2621 = t2205*t2612;
  t2636 = t2276*t2635;
  t2641 = t2592 + t2621 + t2636;
  t2417 = -0.134322983001*t2334;
  t2427 = 1. + t2417;
  t2646 = t2357*t2588;
  t2647 = -0.340999127418*t2271*t2612;
  t2650 = t2368*t2635;
  t2653 = t2646 + t2647 + t2650;
  t2657 = -0.340999127418*t2271*t2588;
  t2660 = t2393*t2612;
  t2662 = t2398*t2635;
  t2663 = t2657 + t2660 + t2662;
  t2445 = -1.000000637725*t2334;
  t2447 = 1. + t2445;
  t2452 = -0.366501*t5;
  t2454 = 0. + t2452;
  t2458 = -0.930418*t5;
  t2462 = 0. + t2458;
  t2763 = -1.*t123*t1070*t1010;
  t2764 = t1310*t123*t1127;
  t2766 = t2763 + t2764;
  t2777 = t1310*t123*t1070;
  t2779 = t123*t1010*t1127;
  t2780 = t2777 + t2779;
  t2758 = -1.*t391*t1075;
  t2776 = 0.340999127418*t866*t2766;
  t2782 = t1508*t2780;
  t2785 = t2758 + t2776 + t2782;
  t2793 = -1.*t1681*t1075;
  t2794 = t1701*t2766;
  t2796 = 0.340999127418*t866*t2780;
  t2806 = t2793 + t2794 + t2796;
  t2811 = -1.*t1843*t1075;
  t2813 = t1944*t2766;
  t2816 = t1961*t2780;
  t2819 = t2811 + t2813 + t2816;
  t2789 = t49*t2785;
  t2809 = t1672*t2806;
  t2820 = t1834*t2819;
  t2821 = t2789 + t2809 + t2820;
  t2828 = t2038*t2785;
  t2831 = -0.340999127418*t1830*t2806;
  t2834 = t2053*t2819;
  t2837 = t2828 + t2831 + t2834;
  t2843 = -0.340999127418*t1830*t2785;
  t2844 = t2137*t2806;
  t2847 = t2153*t2819;
  t2850 = t2843 + t2844 + t2847;
  t2827 = t22*t2821;
  t2839 = -0.340999127418*t2032*t2837;
  t2853 = t2125*t2850;
  t2854 = t2827 + t2839 + t2853;
  t2859 = t2216*t2821;
  t2861 = t2236*t2837;
  t2866 = -0.340999127418*t2032*t2850;
  t2867 = t2859 + t2861 + t2866;
  t2872 = t2286*t2821;
  t2873 = t2290*t2837;
  t2874 = t2311*t2850;
  t2878 = t2872 + t2873 + t2874;
  t2858 = t19*t2854;
  t2870 = t2205*t2867;
  t2880 = t2276*t2878;
  t2882 = t2858 + t2870 + t2880;
  t2886 = t2357*t2854;
  t2889 = -0.340999127418*t2271*t2867;
  t2891 = t2368*t2878;
  t2893 = t2886 + t2889 + t2891;
  t2900 = -0.340999127418*t2271*t2854;
  t2903 = t2393*t2867;
  t2907 = t2398*t2878;
  t2912 = t2900 + t2903 + t2907;
  t2324 = t14*t2322;
  t2376 = -0.340999127418*t2334*t2375;
  t2402 = t2378*t2401;
  t2403 = t2324 + t2376 + t2402;
  t2411 = t2407*t2322;
  t2438 = t2427*t2375;
  t2439 = -0.340999127418*t2334*t2401;
  t2441 = t2411 + t2438 + t2439;
  t2449 = t2447*t2322;
  t2457 = t2454*t2375;
  t2466 = t2462*t2401;
  t2468 = t2449 + t2457 + t2466;
  t2645 = t14*t2641;
  t2656 = -0.340999127418*t2334*t2653;
  t2673 = t2378*t2663;
  t2679 = t2645 + t2656 + t2673;
  t2684 = t2407*t2641;
  t2685 = t2427*t2653;
  t2688 = -0.340999127418*t2334*t2663;
  t2706 = t2684 + t2685 + t2688;
  t2716 = t2447*t2641;
  t2719 = t2454*t2653;
  t2723 = t2462*t2663;
  t2747 = t2716 + t2719 + t2723;
  t2885 = t14*t2882;
  t2895 = -0.340999127418*t2334*t2893;
  t2923 = t2378*t2912;
  t2928 = t2885 + t2895 + t2923;
  t2935 = t2407*t2882;
  t2936 = t2427*t2893;
  t2937 = -0.340999127418*t2334*t2912;
  t2940 = t2935 + t2936 + t2937;
  t2945 = t2447*t2882;
  t2947 = t2454*t2893;
  t2954 = t2462*t2912;
  t2958 = t2945 + t2947 + t2954;
  p_output1[0]=0.553471*t2403 + 0.218018*t2441 + 0.803828*t2468;
  p_output1[1]=0.553471*t2679 + 0.218018*t2706 + 0.803828*t2747;
  p_output1[2]=0.553471*t2928 + 0.218018*t2940 + 0.803828*t2958;
  p_output1[3]=-0.747896*t2403 - 0.294604*t2441 + 0.594863*t2468;
  p_output1[4]=-0.747896*t2679 - 0.294604*t2706 + 0.594863*t2747;
  p_output1[5]=-0.747896*t2928 - 0.294604*t2940 + 0.594863*t2958;
  p_output1[6]=-0.366501*t2403 + 0.930418*t2441;
  p_output1[7]=-0.366501*t2679 + 0.930418*t2706;
  p_output1[8]=-0.366501*t2928 + 0.930418*t2940;
}



void R_toe_pitch_joint_right_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
