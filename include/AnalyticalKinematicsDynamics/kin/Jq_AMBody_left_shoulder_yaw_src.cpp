/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 21:08:45 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Jq_AMBody_left_shoulder_yaw_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t215;
  double t241;
  double t246;
  double t732;
  double t873;
  double t33;
  double t1352;
  double t723;
  double t1172;
  double t1186;
  double t1232;
  double t268;
  double t279;
  double t312;
  double t734;
  double t738;
  double t859;
  double t900;
  double t1014;
  double t1036;
  double t1147;
  double t1277;
  double t1302;
  double t1327;
  double t1389;
  double t1399;
  double t1501;
  double t1737;
  double t1807;
  double t1904;
  double t1945;
  double t2295;
  double t2298;
  double t2359;
  double t2380;
  double t2388;
  double t2419;
  double t2436;
  double t2496;
  double t2524;
  double t2542;
  double t3261;
  double t2656;
  double t2685;
  double t2692;
  double t2723;
  double t2756;
  double t2761;
  double t3108;
  double t3149;
  double t2645;
  double t3264;
  double t3405;
  double t3407;
  double t3416;
  double t3426;
  double t3429;
  double t3432;
  double t3436;
  double t28;
  double t52;
  double t204;
  double t1250;
  double t1275;
  double t2187;
  double t2260;
  double t2589;
  double t2610;
  double t3783;
  double t3807;
  double t3808;
  double t3852;
  double t3868;
  double t3881;
  double t3917;
  double t3936;
  double t3942;
  double t4057;
  double t4077;
  double t4134;
  double t4141;
  double t4173;
  double t4199;
  double t4211;
  double t4213;
  double t3626;
  double t4327;
  double t4331;
  double t4392;
  double t4447;
  double t4455;
  double t4463;
  double t4498;
  double t4511;
  double t4525;
  double t4573;
  double t4581;
  double t4595;
  double t4610;
  double t4620;
  double t4633;
  double t4670;
  double t4672;
  double t3814;
  double t3899;
  double t3976;
  double t3987;
  double t4049;
  double t4155;
  double t4217;
  double t4221;
  double t4226;
  double t4257;
  double t4267;
  double t4268;
  double t4271;
  double t4284;
  double t4285;
  double t4289;
  double t4402;
  double t4482;
  double t4530;
  double t4533;
  double t4546;
  double t4619;
  double t4686;
  double t4687;
  double t4688;
  double t4691;
  double t4693;
  double t4759;
  double t4762;
  double t4768;
  double t4783;
  double t4784;
  double t3232;
  double t3437;
  double t3455;
  double t3496;
  double t3595;
  double t3612;
  double t4993;
  double t4994;
  double t4996;
  double t4997;
  double t5011;
  double t5013;
  double t5021;
  double t5023;
  double t5028;
  double t5032;
  double t5034;
  double t5035;
  double t5036;
  double t5054;
  double t5057;
  double t5062;
  double t5065;
  double t5080;
  double t5102;
  double t5107;
  double t5109;
  double t5095;
  double t5164;
  double t5170;
  double t5174;
  double t5153;
  double t5257;
  double t5266;
  double t5280;
  double t5248;
  double t5161;
  double t5177;
  double t5193;
  double t5205;
  double t5206;
  double t5215;
  double t5218;
  double t5220;
  double t5224;
  double t5249;
  double t5284;
  double t5288;
  double t5290;
  double t5292;
  double t5294;
  double t5321;
  double t5332;
  double t5345;
  double t5470;
  double t5477;
  double t5484;
  double t5496;
  double t5511;
  double t5517;
  double t5530;
  double t5539;
  double t5452;
  double t5458;
  double t5459;
  double t5464;
  double t5578;
  double t5581;
  double t5593;
  double t5499;
  double t5543;
  double t5572;
  double t5731;
  double t5744;
  double t5759;
  double t5760;
  double t5771;
  double t5772;
  double t5773;
  double t5791;
  double t5698;
  double t5703;
  double t5715;
  double t5720;
  double t5810;
  double t5811;
  double t5812;
  double t5761;
  double t5797;
  double t5808;
  double t5944;
  double t5955;
  double t5964;
  double t5980;
  double t5991;
  double t6006;
  double t6013;
  double t6016;
  double t5901;
  double t5903;
  double t5907;
  double t5911;
  double t6030;
  double t6032;
  double t6033;
  double t5986;
  double t6022;
  double t6023;
  double t5663;
  double t5670;
  double t5680;
  double t5694;
  double t5696;
  double t5730;
  double t5809;
  double t5817;
  double t5818;
  double t5823;
  double t5827;
  double t5830;
  double t5844;
  double t5851;
  double t5858;
  double t5864;
  double t5865;
  double t5867;
  double t5880;
  double t5888;
  double t5889;
  double t5892;
  double t5895;
  double t5919;
  double t6026;
  double t6037;
  double t6041;
  double t6042;
  double t6051;
  double t6062;
  double t6063;
  double t6064;
  double t6068;
  double t6072;
  double t6075;
  double t6076;
  double t6159;
  double t6139;
  double t6140;
  double t6142;
  double t6151;
  double t6155;
  double t6171;
  double t6174;
  double t6175;
  double t6182;
  double t6206;
  double t6189;
  double t6193;
  double t6194;
  double t6195;
  double t6214;
  double t6227;
  double t6230;
  double t6233;
  double t6266;
  double t6268;
  double t6274;
  double t6275;
  double t6289;
  double t6292;
  double t6295;
  double t6297;
  double t6399;
  double t6400;
  double t6404;
  double t6409;
  double t6415;
  double t6416;
  double t6423;
  double t6428;
  double t6348;
  double t6360;
  double t6362;
  double t6369;
  double t6452;
  double t6456;
  double t6458;
  double t6411;
  double t6437;
  double t6443;
  double t6557;
  double t6570;
  double t6574;
  double t6578;
  double t6627;
  double t6629;
  double t6659;
  double t6663;
  double t6665;
  double t6727;
  double t6731;
  double t6736;
  double t6737;
  double t6750;
  double t6753;
  double t6777;
  double t6788;
  double t6697;
  double t6704;
  double t6717;
  double t6721;
  double t6816;
  double t6825;
  double t6827;
  double t6749;
  double t6791;
  double t6794;
  double t6951;
  double t6962;
  double t6973;
  double t6980;
  double t6994;
  double t6999;
  double t7037;
  double t7043;
  double t7044;
  double t7093;
  double t7100;
  double t7102;
  double t7108;
  double t7124;
  double t7134;
  double t7140;
  double t7145;
  double t7077;
  double t7080;
  double t7081;
  double t7083;
  double t7173;
  double t7195;
  double t7217;
  double t7122;
  double t7153;
  double t7160;
  double t6576;
  double t6634;
  double t6638;
  double t6658;
  double t6666;
  double t6670;
  double t6678;
  double t6680;
  double t6682;
  double t6725;
  double t6796;
  double t6832;
  double t6841;
  double t6852;
  double t6855;
  double t6858;
  double t6879;
  double t6882;
  double t6901;
  double t6902;
  double t6904;
  double t6905;
  double t6979;
  double t7002;
  double t7005;
  double t7006;
  double t7045;
  double t7059;
  double t7060;
  double t7061;
  double t7075;
  double t7084;
  double t7166;
  double t7220;
  double t7221;
  double t7224;
  double t7225;
  double t7226;
  double t7236;
  double t7256;
  double t7263;
  double t7283;
  double t7286;
  double t7288;
  t215 = Cos(var1[15]);
  t241 = -1.*t215;
  t246 = 1. + t241;
  t732 = Sin(var1[15]);
  t873 = 0.05226439969100001*t246;
  t33 = Sin(var1[14]);
  t1352 = -0.49726168403800003*t246;
  t723 = -0.051978134642000004*t246;
  t1172 = Cos(var1[14]);
  t1186 = -1.*t1172;
  t1232 = 1. + t1186;
  t268 = -0.9945383682050002*t246;
  t279 = 1. + t268;
  t312 = -0.073913*t279;
  t734 = -0.707107*t732;
  t738 = t723 + t734;
  t859 = 0.703234*t738;
  t900 = -0.703234*t732;
  t1014 = t873 + t900;
  t1036 = 0.707107*t1014;
  t1147 = t312 + t859 + t1036;
  t1277 = -0.500001190325*t246;
  t1302 = 1. + t1277;
  t1327 = 0.707107*t1302;
  t1389 = 0.073913*t732;
  t1399 = t1352 + t1389;
  t1501 = 0.703234*t1399;
  t1737 = 0.703234*t732;
  t1807 = t873 + t1737;
  t1904 = -0.073913*t1807;
  t1945 = t1327 + t1501 + t1904;
  t2295 = -0.5054634410180001*t246;
  t2298 = 1. + t2295;
  t2359 = 0.703234*t2298;
  t2380 = -0.073913*t732;
  t2388 = t1352 + t2380;
  t2419 = 0.707107*t2388;
  t2436 = 0.707107*t732;
  t2496 = t723 + t2436;
  t2524 = -0.073913*t2496;
  t2542 = t2359 + t2419 + t2524;
  t3261 = Sin(var1[13]);
  t2656 = 0.103955395616*t1232*t1147;
  t2685 = -0.994522*t33;
  t2692 = 0. + t2685;
  t2723 = t2692*t1945;
  t2756 = -0.9890740084840001*t1232;
  t2761 = 1. + t2756;
  t3108 = t2761*t2542;
  t3149 = 0. + t2656 + t2723 + t3108;
  t2645 = Cos(var1[13]);
  t3264 = -0.010926102783999999*t1232;
  t3405 = 1. + t3264;
  t3407 = t3405*t1147;
  t3416 = 0.104528*t33;
  t3426 = 0. + t3416;
  t3429 = t3426*t1945;
  t3432 = 0.103955395616*t1232*t2542;
  t3436 = 0. + t3407 + t3429 + t3432;
  t28 = Cos(var1[4]);
  t52 = -0.104528*t33;
  t204 = 0. + t52;
  t1250 = -1.0000001112680001*t1232;
  t1275 = 1. + t1250;
  t2187 = 0.994522*t33;
  t2260 = 0. + t2187;
  t2589 = Sin(var1[4]);
  t2610 = Cos(var1[5]);
  t3783 = -0.994522*t279;
  t3807 = -0.104528*t738;
  t3808 = t3783 + t3807;
  t3852 = -0.104528*t1399;
  t3868 = -0.994522*t1807;
  t3881 = t3852 + t3868;
  t3917 = -0.104528*t2298;
  t3936 = -0.994522*t2496;
  t3942 = t3917 + t3936;
  t4057 = 0.103955395616*t1232*t3808;
  t4077 = t2692*t3881;
  t4134 = t2761*t3942;
  t4141 = 0. + t4057 + t4077 + t4134;
  t4173 = t3405*t3808;
  t4199 = t3426*t3881;
  t4211 = 0.103955395616*t1232*t3942;
  t4213 = 0. + t4173 + t4199 + t4211;
  t3626 = Sin(var1[5]);
  t4327 = 0.073913*t279;
  t4331 = -0.703234*t738;
  t4392 = t4327 + t4331 + t1036;
  t4447 = -0.703234*t1399;
  t4455 = 0.073913*t1807;
  t4463 = t1327 + t4447 + t4455;
  t4498 = -0.703234*t2298;
  t4511 = 0.073913*t2496;
  t4525 = t4498 + t2419 + t4511;
  t4573 = 0.103955395616*t1232*t4392;
  t4581 = t2692*t4463;
  t4595 = t2761*t4525;
  t4610 = 0. + t4573 + t4581 + t4595;
  t4620 = t3405*t4392;
  t4633 = t3426*t4463;
  t4670 = 0.103955395616*t1232*t4525;
  t4672 = 0. + t4620 + t4633 + t4670;
  t3814 = t204*t3808;
  t3899 = t1275*t3881;
  t3976 = t2260*t3942;
  t3987 = 0. + t3814 + t3899 + t3976;
  t4049 = -1.*t28*t3987;
  t4155 = t2645*t4141;
  t4217 = -1.*t3261*t4213;
  t4221 = 0. + t4155 + t4217;
  t4226 = t2610*t4221;
  t4257 = t3261*t4141;
  t4267 = t2645*t4213;
  t4268 = 0. + t4257 + t4267;
  t4271 = t4268*t3626;
  t4284 = 0. + t4226 + t4271;
  t4285 = -1.*t2589*t4284;
  t4289 = t4049 + t4285;
  t4402 = t204*t4392;
  t4482 = t1275*t4463;
  t4530 = t2260*t4525;
  t4533 = 0. + t4402 + t4482 + t4530;
  t4546 = -1.*t28*t4533;
  t4619 = t2645*t4610;
  t4686 = -1.*t3261*t4672;
  t4687 = 0. + t4619 + t4686;
  t4688 = t2610*t4687;
  t4691 = t3261*t4610;
  t4693 = t2645*t4672;
  t4759 = 0. + t4691 + t4693;
  t4762 = t4759*t3626;
  t4768 = 0. + t4688 + t4762;
  t4783 = -1.*t2589*t4768;
  t4784 = t4546 + t4783;
  t3232 = t2645*t3149;
  t3437 = -1.*t3261*t3436;
  t3455 = 0. + t3232 + t3437;
  t3496 = t3261*t3149;
  t3595 = t2645*t3436;
  t3612 = 0. + t3496 + t3595;
  t4993 = -1.*t2610*t4221;
  t4994 = -1.*t4268*t3626;
  t4996 = t4993 + t4994;
  t4997 = var2[4]*t4996;
  t5011 = t2610*t4268;
  t5013 = -1.*t4221*t3626;
  t5021 = t5011 + t5013;
  t5023 = var2[3]*t28*t5021;
  t5028 = t4997 + t5023;
  t5032 = -1.*t2610*t4687;
  t5034 = -1.*t4759*t3626;
  t5035 = t5032 + t5034;
  t5036 = var2[4]*t5035;
  t5054 = t2610*t4759;
  t5057 = -1.*t4687*t3626;
  t5062 = t5054 + t5057;
  t5065 = var2[3]*t28*t5062;
  t5080 = t5036 + t5065;
  t5102 = -1.*t3261*t3149;
  t5107 = -1.*t2645*t3436;
  t5109 = t5102 + t5107;
  t5095 = t3232 + t3437;
  t5164 = -1.*t3261*t4141;
  t5170 = -1.*t2645*t4213;
  t5174 = t5164 + t5170;
  t5153 = t4155 + t4217;
  t5257 = -1.*t3261*t4610;
  t5266 = -1.*t2645*t4672;
  t5280 = t5257 + t5266;
  t5248 = t4619 + t4686;
  t5161 = t2610*t5153;
  t5177 = -1.*t5174*t3626;
  t5193 = t5161 + t5177;
  t5205 = var2[4]*t5193;
  t5206 = t2610*t5174;
  t5215 = t5153*t3626;
  t5218 = t5206 + t5215;
  t5220 = var2[3]*t28*t5218;
  t5224 = t5205 + t5220;
  t5249 = t2610*t5248;
  t5284 = -1.*t5280*t3626;
  t5288 = t5249 + t5284;
  t5290 = var2[4]*t5288;
  t5292 = t2610*t5280;
  t5294 = t5248*t3626;
  t5321 = t5292 + t5294;
  t5332 = var2[3]*t28*t5321;
  t5345 = t5290 + t5332;
  t5470 = 0.103955395616*t33*t1147;
  t5477 = -0.994522*t1172*t1945;
  t5484 = -0.9890740084840001*t33*t2542;
  t5496 = t5470 + t5477 + t5484;
  t5511 = -0.010926102783999999*t33*t1147;
  t5517 = 0.104528*t1172*t1945;
  t5530 = 0.103955395616*t33*t2542;
  t5539 = t5511 + t5517 + t5530;
  t5452 = -0.104528*t1172*t1147;
  t5458 = -1.0000001112680001*t33*t1945;
  t5459 = 0.994522*t1172*t2542;
  t5464 = t5452 + t5458 + t5459;
  t5578 = t2645*t5496;
  t5581 = -1.*t3261*t5539;
  t5593 = t5578 + t5581;
  t5499 = t3261*t5496;
  t5543 = t2645*t5539;
  t5572 = t5499 + t5543;
  t5731 = 0.103955395616*t33*t3808;
  t5744 = -0.994522*t1172*t3881;
  t5759 = -0.9890740084840001*t33*t3942;
  t5760 = t5731 + t5744 + t5759;
  t5771 = -0.010926102783999999*t33*t3808;
  t5772 = 0.104528*t1172*t3881;
  t5773 = 0.103955395616*t33*t3942;
  t5791 = t5771 + t5772 + t5773;
  t5698 = -0.104528*t1172*t3808;
  t5703 = -1.0000001112680001*t33*t3881;
  t5715 = 0.994522*t1172*t3942;
  t5720 = t5698 + t5703 + t5715;
  t5810 = t2645*t5760;
  t5811 = -1.*t3261*t5791;
  t5812 = t5810 + t5811;
  t5761 = t3261*t5760;
  t5797 = t2645*t5791;
  t5808 = t5761 + t5797;
  t5944 = 0.103955395616*t33*t4392;
  t5955 = -0.994522*t1172*t4463;
  t5964 = -0.9890740084840001*t33*t4525;
  t5980 = t5944 + t5955 + t5964;
  t5991 = -0.010926102783999999*t33*t4392;
  t6006 = 0.104528*t1172*t4463;
  t6013 = 0.103955395616*t33*t4525;
  t6016 = t5991 + t6006 + t6013;
  t5901 = -0.104528*t1172*t4392;
  t5903 = -1.0000001112680001*t33*t4463;
  t5907 = 0.994522*t1172*t4525;
  t5911 = t5901 + t5903 + t5907;
  t6030 = t2645*t5980;
  t6032 = -1.*t3261*t6016;
  t6033 = t6030 + t6032;
  t5986 = t3261*t5980;
  t6022 = t2645*t6016;
  t6023 = t5986 + t6022;
  t5663 = 0.104528*t1172*t3808;
  t5670 = 1.0000001112680001*t33*t3881;
  t5680 = -0.994522*t1172*t3942;
  t5694 = t5663 + t5670 + t5680;
  t5696 = var2[13]*t5694;
  t5730 = var2[5]*t5720;
  t5809 = t2610*t5808;
  t5817 = -1.*t5812*t3626;
  t5818 = t5809 + t5817;
  t5823 = var2[4]*t5818;
  t5827 = -1.*t5720*t2589;
  t5830 = t2610*t5812;
  t5844 = t5808*t3626;
  t5851 = t5830 + t5844;
  t5858 = t28*t5851;
  t5864 = t5827 + t5858;
  t5865 = var2[3]*t5864;
  t5867 = t5696 + t5730 + t5823 + t5865;
  t5880 = 0.104528*t1172*t4392;
  t5888 = 1.0000001112680001*t33*t4463;
  t5889 = -0.994522*t1172*t4525;
  t5892 = t5880 + t5888 + t5889;
  t5895 = var2[13]*t5892;
  t5919 = var2[5]*t5911;
  t6026 = t2610*t6023;
  t6037 = -1.*t6033*t3626;
  t6041 = t6026 + t6037;
  t6042 = var2[4]*t6041;
  t6051 = -1.*t5911*t2589;
  t6062 = t2610*t6033;
  t6063 = t6023*t3626;
  t6064 = t6062 + t6063;
  t6068 = t28*t6064;
  t6072 = t6051 + t6068;
  t6075 = var2[3]*t6072;
  t6076 = t5895 + t5919 + t6042 + t6075;
  t6159 = -0.051978134642000004*t732;
  t6139 = -0.073913*t215;
  t6140 = -0.49726168403800003*t732;
  t6142 = t6139 + t6140;
  t6151 = 0.707107*t6142;
  t6155 = 0.707107*t215;
  t6171 = t6155 + t6159;
  t6174 = -0.073913*t6171;
  t6175 = -0.3554590774808523*t732;
  t6182 = t6151 + t6174 + t6175;
  t6206 = 0.05226439969100001*t732;
  t6189 = -0.707107*t215;
  t6193 = t6189 + t6159;
  t6194 = 0.703234*t6193;
  t6195 = -0.703234*t215;
  t6214 = t6195 + t6206;
  t6227 = 0.707107*t6214;
  t6230 = 0.07350931440913619*t732;
  t6233 = t6194 + t6227 + t6230;
  t6266 = 0.073913*t215;
  t6268 = t6266 + t6140;
  t6274 = 0.703234*t6268;
  t6275 = 0.703234*t215;
  t6289 = t6275 + t6206;
  t6292 = -0.073913*t6289;
  t6295 = -0.3535543416871398*t732;
  t6297 = t6274 + t6292 + t6295;
  t6399 = 0.103955395616*t1232*t6182;
  t6400 = t3426*t6297;
  t6404 = t3405*t6233;
  t6409 = t6399 + t6400 + t6404;
  t6415 = t2761*t6182;
  t6416 = t2692*t6297;
  t6423 = 0.103955395616*t1232*t6233;
  t6428 = t6415 + t6416 + t6423;
  t6348 = t2260*t6182;
  t6360 = t1275*t6297;
  t6362 = t204*t6233;
  t6369 = t6348 + t6360 + t6362;
  t6452 = -1.*t3261*t6409;
  t6456 = t2645*t6428;
  t6458 = t6452 + t6456;
  t6411 = t2645*t6409;
  t6437 = t3261*t6428;
  t6443 = t6411 + t6437;
  t6557 = -0.703234*t6193;
  t6570 = -0.07350931440913619*t732;
  t6574 = t6557 + t6227 + t6570;
  t6578 = 0.073913*t6171;
  t6627 = 0.3554590774808523*t732;
  t6629 = t6151 + t6578 + t6627;
  t6659 = -0.703234*t6268;
  t6663 = 0.073913*t6289;
  t6665 = t6659 + t6663 + t6295;
  t6727 = t2692*t6665;
  t6731 = 0.103955395616*t1232*t6574;
  t6736 = t2761*t6629;
  t6737 = t6727 + t6731 + t6736;
  t6750 = t3426*t6665;
  t6753 = t3405*t6574;
  t6777 = 0.103955395616*t1232*t6629;
  t6788 = t6750 + t6753 + t6777;
  t6697 = t1275*t6665;
  t6704 = t204*t6574;
  t6717 = t2260*t6629;
  t6721 = t6697 + t6704 + t6717;
  t6816 = t2645*t6737;
  t6825 = -1.*t3261*t6788;
  t6827 = t6816 + t6825;
  t6749 = t3261*t6737;
  t6791 = t2645*t6788;
  t6794 = t6749 + t6791;
  t6951 = -0.994522*t6171;
  t6962 = 0.052835082562729514*t732;
  t6973 = t6951 + t6962;
  t6980 = -0.104528*t6193;
  t6994 = 0.9890902870239732*t732;
  t6999 = t6980 + t6994;
  t7037 = -0.104528*t6268;
  t7043 = -0.994522*t6289;
  t7044 = t7037 + t7043;
  t7093 = t3426*t7044;
  t7100 = 0.103955395616*t1232*t6973;
  t7102 = t3405*t6999;
  t7108 = t7093 + t7100 + t7102;
  t7124 = t2692*t7044;
  t7134 = t2761*t6973;
  t7140 = 0.103955395616*t1232*t6999;
  t7145 = t7124 + t7134 + t7140;
  t7077 = t1275*t7044;
  t7080 = t2260*t6973;
  t7081 = t204*t6999;
  t7083 = t7077 + t7080 + t7081;
  t7173 = -1.*t3261*t7108;
  t7195 = t2645*t7145;
  t7217 = t7173 + t7195;
  t7122 = t2645*t7108;
  t7153 = t3261*t7145;
  t7160 = t7122 + t7153;
  t6576 = 0.994522*t6574;
  t6634 = 0.104528*t6629;
  t6638 = t6576 + t6634;
  t6658 = var2[14]*t6638;
  t6666 = -1.*t1275*t6665;
  t6670 = -1.*t204*t6574;
  t6678 = -1.*t2260*t6629;
  t6680 = t6666 + t6670 + t6678;
  t6682 = var2[13]*t6680;
  t6725 = var2[5]*t6721;
  t6796 = t2610*t6794;
  t6832 = -1.*t6827*t3626;
  t6841 = t6796 + t6832;
  t6852 = var2[4]*t6841;
  t6855 = -1.*t6721*t2589;
  t6858 = t2610*t6827;
  t6879 = t6794*t3626;
  t6882 = t6858 + t6879;
  t6901 = t28*t6882;
  t6902 = t6855 + t6901;
  t6904 = var2[3]*t6902;
  t6905 = t6658 + t6682 + t6725 + t6852 + t6904;
  t6979 = 0.104528*t6973;
  t7002 = 0.994522*t6999;
  t7005 = t6979 + t7002;
  t7006 = var2[14]*t7005;
  t7045 = -1.*t1275*t7044;
  t7059 = -1.*t2260*t6973;
  t7060 = -1.*t204*t6999;
  t7061 = t7045 + t7059 + t7060;
  t7075 = var2[13]*t7061;
  t7084 = var2[5]*t7083;
  t7166 = t2610*t7160;
  t7220 = -1.*t7217*t3626;
  t7221 = t7166 + t7220;
  t7224 = var2[4]*t7221;
  t7225 = -1.*t7083*t2589;
  t7226 = t2610*t7217;
  t7236 = t7160*t3626;
  t7256 = t7226 + t7236;
  t7263 = t28*t7256;
  t7283 = t7225 + t7263;
  t7286 = var2[3]*t7283;
  t7288 = t7006 + t7075 + t7084 + t7224 + t7286;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0.00697*(-1.*(0. + t1275*t1945 + t1147*t204 + t2260*t2542)*t28 - 1.*t2589*(0. + t2610*t3455 + t3612*t3626))*var2[3];
  p_output1[13]=0.007*t4289*var2[3] + 0.00002*t4784*var2[3];
  p_output1[14]=0.00002*t4289*var2[3] + 0.00067*t4784*var2[3];
  p_output1[15]=0.00697*(t28*(t2610*t3612 - 1.*t3455*t3626)*var2[3] + (-1.*t2610*t3455 - 1.*t3612*t3626)*var2[4]);
  p_output1[16]=0.007*t5028 + 0.00002*t5080;
  p_output1[17]=0.00002*t5028 + 0.00067*t5080;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.00697*(t28*(t3626*t5095 + t2610*t5109)*var2[3] + (t2610*t5095 - 1.*t3626*t5109)*var2[4]);
  p_output1[40]=0.007*t5224 + 0.00002*t5345;
  p_output1[41]=0.00002*t5224 + 0.00067*t5345;
  p_output1[42]=0.00697*((-1.*t2589*t5464 + t28*(t3626*t5572 + t2610*t5593))*var2[3] + (t2610*t5572 - 1.*t3626*t5593)*var2[4] + t5464*var2[5] + (0.104528*t1147*t1172 - 0.994522*t1172*t2542 + 1.0000001112680001*t1945*t33)*var2[13]);
  p_output1[43]=0.007*t5867 + 0.00002*t6076;
  p_output1[44]=0.00002*t5867 + 0.00067*t6076;
  p_output1[45]=0.00697*((-1.*t2589*t6369 + t28*(t3626*t6443 + t2610*t6458))*var2[3] + (t2610*t6443 - 1.*t3626*t6458)*var2[4] + t6369*var2[5] + (-1.*t2260*t6182 - 1.*t204*t6233 - 1.*t1275*t6297)*var2[13] + (0.104528*t6182 + 0.994522*t6233)*var2[14]);
  p_output1[46]=0.00002*t6905 + 0.007*t7288;
  p_output1[47]=0.00067*t6905 + 0.00002*t7288;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
}



void Jq_AMBody_left_shoulder_yaw_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
