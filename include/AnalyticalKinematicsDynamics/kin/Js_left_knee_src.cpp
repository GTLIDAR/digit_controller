/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:57:01 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "Js_left_knee_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t141;
  double t147;
  double t288;
  double t321;
  double t443;
  double t461;
  double t448;
  double t466;
  double t473;
  double t612;
  double t624;
  double t632;
  double t646;
  double t667;
  double t488;
  double t496;
  double t512;
  double t746;
  double t752;
  double t761;
  double t774;
  double t823;
  double t826;
  double t776;
  double t784;
  double t788;
  double t811;
  double t847;
  double t861;
  double t907;
  double t913;
  double t917;
  double t927;
  double t930;
  double t932;
  double t936;
  double t970;
  double t979;
  double t986;
  double t105;
  double t867;
  double t872;
  double t874;
  double t664;
  double t674;
  double t695;
  double t1057;
  double t1058;
  double t1076;
  double t962;
  double t963;
  double t965;
  double t1092;
  double t1101;
  double t1102;
  double t721;
  double t733;
  double t734;
  double t1237;
  double t1241;
  double t1243;
  double t1246;
  double t1203;
  double t1210;
  double t1222;
  double t1537;
  double t1508;
  double t1515;
  double t1523;
  double t1666;
  double t1681;
  double t1531;
  double t1542;
  double t1549;
  double t1552;
  double t1555;
  double t1603;
  double t1610;
  double t1611;
  double t1651;
  double t1655;
  double t1695;
  double t1706;
  double t1719;
  double t1726;
  double t1727;
  double t1752;
  double t1756;
  double t1763;
  double t1798;
  double t1802;
  double t1643;
  double t1715;
  double t1765;
  double t1771;
  double t1827;
  double t1832;
  double t1838;
  double t1841;
  double t1888;
  double t1889;
  double t2006;
  double t2011;
  double t2013;
  double t2014;
  double t1842;
  double t1845;
  double t1850;
  double t1851;
  double t2063;
  double t2072;
  double t2078;
  double t2088;
  double t2024;
  double t2030;
  double t2035;
  double t2037;
  double t2130;
  double t2138;
  double t2140;
  double t2141;
  double t1924;
  double t1936;
  double t1938;
  double t1944;
  double t1973;
  double t1981;
  double t1777;
  double t1804;
  double t1805;
  double t1818;
  double t1892;
  double t1895;
  double t1901;
  double t1921;
  double t2281;
  double t2284;
  double t2308;
  double t2309;
  double t2316;
  double t2322;
  double t2324;
  double t2325;
  double t2180;
  double t2191;
  double t2200;
  double t2210;
  double t2498;
  double t2499;
  double t2503;
  double t2509;
  double t2377;
  double t2392;
  double t2395;
  double t2399;
  double t2511;
  double t2525;
  double t2493;
  double t2505;
  double t2530;
  double t2534;
  double t2570;
  double t2572;
  double t2581;
  double t2592;
  double t2603;
  double t2616;
  double t2618;
  double t2621;
  double t2629;
  double t2631;
  double t2636;
  double t2645;
  double t2653;
  double t2656;
  double t2672;
  double t2678;
  double t2543;
  double t2628;
  double t2658;
  double t2659;
  double t2707;
  double t2709;
  double t2723;
  double t2733;
  double t2761;
  double t2762;
  double t1982;
  double t1983;
  double t1991;
  double t1994;
  double t2664;
  double t2681;
  double t2696;
  double t2698;
  double t2825;
  double t2829;
  double t2833;
  double t2840;
  double t2944;
  double t2954;
  double t2957;
  double t2959;
  double t2770;
  double t2782;
  double t2791;
  double t2793;
  double t2965;
  double t2976;
  double t2977;
  double t2978;
  double t2918;
  double t2922;
  double t2926;
  double t2934;
  double t2735;
  double t2739;
  double t2740;
  double t2742;
  double t2860;
  double t2873;
  double t2803;
  double t2808;
  double t2810;
  double t2815;
  double t3056;
  double t3066;
  double t3073;
  double t3077;
  double t3089;
  double t3101;
  double t3103;
  double t3104;
  t141 = Cos(var1[3]);
  t147 = Sin(var1[3]);
  t288 = Cos(var1[4]);
  t321 = Sin(var1[4]);
  t443 = Cos(var1[5]);
  t461 = Sin(var1[5]);
  t448 = t141*t443*t321;
  t466 = t147*t461;
  t473 = t448 + t466;
  t612 = Cos(var1[6]);
  t624 = -1.*t443*t147;
  t632 = t141*t321*t461;
  t646 = t624 + t632;
  t667 = Sin(var1[6]);
  t488 = t443*t147*t321;
  t496 = -1.*t141*t461;
  t512 = t488 + t496;
  t746 = -1.*t612;
  t752 = 1. + t746;
  t761 = 0.091*t752;
  t774 = 0. + t761;
  t823 = 0.091*t667;
  t826 = 0. + t823;
  t776 = t141*t443;
  t784 = t147*t321*t461;
  t788 = t776 + t784;
  t811 = t774*t788;
  t847 = t512*t826;
  t861 = 0. + var1[1] + t811 + t847;
  t907 = -1.*var1[2];
  t913 = -1.*t288*t774*t461;
  t917 = -1.*t288*t443*t826;
  t927 = 0. + t907 + t913 + t917;
  t930 = t612*t788;
  t932 = -1.*t512*t667;
  t936 = t930 + t932;
  t970 = t612*t512;
  t979 = t788*t667;
  t986 = t970 + t979;
  t105 = -1.*var1[0];
  t867 = t288*t612*t461;
  t872 = -1.*t288*t443*t667;
  t874 = t867 + t872;
  t664 = t612*t646;
  t674 = -1.*t473*t667;
  t695 = t664 + t674;
  t1057 = -1.*t774*t646;
  t1058 = -1.*t473*t826;
  t1076 = 0. + t105 + t1057 + t1058;
  t962 = t288*t443*t612;
  t963 = t288*t461*t667;
  t965 = t962 + t963;
  t1092 = t288*t774*t461;
  t1101 = t288*t443*t826;
  t1102 = 0. + var1[2] + t1092 + t1101;
  t721 = t612*t473;
  t733 = t646*t667;
  t734 = t721 + t733;
  t1237 = -1.*var1[1];
  t1241 = -1.*t774*t788;
  t1243 = -1.*t512*t826;
  t1246 = 0. + t1237 + t1241 + t1243;
  t1203 = t774*t646;
  t1210 = t473*t826;
  t1222 = 0. + var1[0] + t1203 + t1210;
  t1537 = Sin(var1[7]);
  t1508 = Cos(var1[7]);
  t1515 = -1.*t1508;
  t1523 = 1. + t1515;
  t1666 = 0.366501*t1537;
  t1681 = 0. + t1666;
  t1531 = -0.04500040093286238*t1523;
  t1542 = -0.930418*t1537;
  t1549 = 0. + t1542;
  t1552 = 0.07877663122399998*t1549;
  t1555 = -0.366501*t1537;
  t1603 = 0. + t1555;
  t1610 = 0.031030906668*t1603;
  t1611 = 0. + t1531 + t1552 + t1610;
  t1651 = -3.2909349868922137e-7*var1[7];
  t1655 = 0.03103092645718495*t1523;
  t1695 = -0.045000372235*t1681;
  t1706 = t1651 + t1655 + t1695;
  t1719 = 1.296332362046933e-7*var1[7];
  t1726 = 0.07877668146182712*t1523;
  t1727 = 0.930418*t1537;
  t1752 = 0. + t1727;
  t1756 = -0.045000372235*t1752;
  t1763 = t1719 + t1726 + t1756;
  t1798 = -0.134322983001*t1523;
  t1802 = 1. + t1798;
  t1643 = t321*t1611;
  t1715 = -1.*t965*t1706;
  t1765 = -1.*t874*t1763;
  t1771 = 0. + t907 + t913 + t917 + t1643 + t1715 + t1765;
  t1827 = t288*t147*t1611;
  t1832 = t986*t1706;
  t1838 = t936*t1763;
  t1841 = 0. + var1[1] + t811 + t847 + t1827 + t1832 + t1838;
  t1888 = -0.8656776547239999*t1523;
  t1889 = 1. + t1888;
  t2006 = -0.340999127418*t1523*t695;
  t2011 = t1802*t734;
  t2013 = t141*t288*t1681;
  t2014 = t2006 + t2011 + t2013;
  t1842 = -0.340999127418*t1523*t874;
  t1845 = t1802*t965;
  t1850 = -1.*t321*t1681;
  t1851 = t1842 + t1845 + t1850;
  t2063 = -1.*t321*t1611;
  t2072 = t965*t1706;
  t2078 = t874*t1763;
  t2088 = 0. + var1[2] + t1092 + t1101 + t2063 + t2072 + t2078;
  t2024 = t1889*t695;
  t2030 = -0.340999127418*t1523*t734;
  t2035 = t141*t288*t1752;
  t2037 = t2024 + t2030 + t2035;
  t2130 = -1.*t141*t288*t1611;
  t2138 = -1.*t734*t1706;
  t2140 = -1.*t695*t1763;
  t2141 = 0. + t105 + t1057 + t1058 + t2130 + t2138 + t2140;
  t1924 = t1889*t874;
  t1936 = -0.340999127418*t1523*t965;
  t1938 = -1.*t321*t1752;
  t1944 = t1924 + t1936 + t1938;
  t1973 = -1.000000637725*t1523;
  t1981 = 1. + t1973;
  t1777 = -0.340999127418*t1523*t936;
  t1804 = t1802*t986;
  t1805 = t288*t147*t1681;
  t1818 = t1777 + t1804 + t1805;
  t1892 = t1889*t936;
  t1895 = -0.340999127418*t1523*t986;
  t1901 = t288*t147*t1752;
  t1921 = t1892 + t1895 + t1901;
  t2281 = -1.*t288*t147*t1611;
  t2284 = -1.*t986*t1706;
  t2308 = -1.*t936*t1763;
  t2309 = 0. + t1237 + t1241 + t1243 + t2281 + t2284 + t2308;
  t2316 = t141*t288*t1611;
  t2322 = t734*t1706;
  t2324 = t695*t1763;
  t2325 = 0. + var1[0] + t1203 + t1210 + t2316 + t2322 + t2324;
  t2180 = t288*t1981*t147;
  t2191 = t936*t1549;
  t2200 = t986*t1603;
  t2210 = t2180 + t2191 + t2200;
  t2498 = Cos(var1[8]);
  t2499 = -1.*t2498;
  t2503 = 1. + t2499;
  t2509 = Sin(var1[8]);
  t2377 = -1.*t1981*t321;
  t2392 = t874*t1549;
  t2395 = t965*t1603;
  t2399 = t2377 + t2392 + t2395;
  t2511 = -0.366501*t2509;
  t2525 = 0. + t2511;
  t2493 = 3.2909349868922137e-7*var1[8];
  t2505 = 0.055653945343889656*t2503;
  t2530 = -0.045000372235*t2525;
  t2534 = t2493 + t2505 + t2530;
  t2570 = -0.04500040093286238*t2503;
  t2572 = -0.930418*t2509;
  t2581 = 0. + t2572;
  t2592 = -0.141285834136*t2581;
  t2603 = 0.366501*t2509;
  t2616 = 0. + t2603;
  t2618 = 0.055653909852*t2616;
  t2621 = 0. + t2570 + t2592 + t2618;
  t2629 = 1.296332362046933e-7*var1[8];
  t2631 = -0.14128592423750855*t2503;
  t2636 = 0.930418*t2509;
  t2645 = 0. + t2636;
  t2653 = -0.045000372235*t2645;
  t2656 = t2629 + t2631 + t2653;
  t2672 = -0.134322983001*t2503;
  t2678 = 1. + t2672;
  t2543 = t1921*t2534;
  t2628 = t2210*t2621;
  t2658 = t1818*t2656;
  t2659 = 0. + var1[1] + t811 + t847 + t1827 + t1832 + t1838 + t2543 + t2628 + t2658;
  t2707 = -1.*t1944*t2534;
  t2709 = -1.*t2399*t2621;
  t2723 = -1.*t1851*t2656;
  t2733 = 0. + t907 + t913 + t917 + t1643 + t1715 + t1765 + t2707 + t2709 + t2723;
  t2761 = -0.8656776547239999*t2503;
  t2762 = 1. + t2761;
  t1982 = t141*t288*t1981;
  t1983 = t695*t1549;
  t1991 = t734*t1603;
  t1994 = t1982 + t1983 + t1991;
  t2664 = 0.340999127418*t2503*t1851;
  t2681 = t2678*t1944;
  t2696 = t2399*t2525;
  t2698 = t2664 + t2681 + t2696;
  t2825 = 0.340999127418*t2503*t2014;
  t2829 = t2678*t2037;
  t2833 = t1994*t2525;
  t2840 = t2825 + t2829 + t2833;
  t2944 = -1.*t2037*t2534;
  t2954 = -1.*t1994*t2621;
  t2957 = -1.*t2014*t2656;
  t2959 = 0. + t105 + t1057 + t1058 + t2130 + t2138 + t2140 + t2944 + t2954 + t2957;
  t2770 = t2762*t1851;
  t2782 = 0.340999127418*t2503*t1944;
  t2791 = t2399*t2645;
  t2793 = t2770 + t2782 + t2791;
  t2965 = t1944*t2534;
  t2976 = t2399*t2621;
  t2977 = t1851*t2656;
  t2978 = 0. + var1[2] + t1092 + t1101 + t2063 + t2072 + t2078 + t2965 + t2976 + t2977;
  t2918 = t2762*t2014;
  t2922 = 0.340999127418*t2503*t2037;
  t2926 = t1994*t2645;
  t2934 = t2918 + t2922 + t2926;
  t2735 = 0.340999127418*t2503*t1818;
  t2739 = t2678*t1921;
  t2740 = t2210*t2525;
  t2742 = t2735 + t2739 + t2740;
  t2860 = -1.000000637725*t2503;
  t2873 = 1. + t2860;
  t2803 = t2762*t1818;
  t2808 = 0.340999127418*t2503*t1921;
  t2810 = t2210*t2645;
  t2815 = t2803 + t2808 + t2810;
  t3056 = -1.*t1921*t2534;
  t3066 = -1.*t2210*t2621;
  t3073 = -1.*t1818*t2656;
  t3077 = 0. + t1237 + t1241 + t1243 + t2281 + t2284 + t2308 + t3056 + t3066 + t3073;
  t3089 = t2037*t2534;
  t3101 = t1994*t2621;
  t3103 = t2014*t2656;
  t3104 = 0. + var1[0] + t1203 + t1210 + t2316 + t2322 + t2324 + t3089 + t3101 + t3103;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=1.;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=1.;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=var1[1];
  p_output1[19]=t105;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=-1.*t141*var1[2];
  p_output1[25]=-1.*t147*var1[2];
  p_output1[26]=t141*var1[0] + t147*var1[1];
  p_output1[27]=-1.*t147;
  p_output1[28]=t141;
  p_output1[29]=0;
  p_output1[30]=-1.*t321*var1[1] - 1.*t147*t288*var1[2];
  p_output1[31]=t321*var1[0] + t141*t288*var1[2];
  p_output1[32]=t147*t288*var1[0] - 1.*t141*t288*var1[1];
  p_output1[33]=t141*t288;
  p_output1[34]=t147*t288;
  p_output1[35]=-1.*t321;
  p_output1[36]=0.091*t473 + t321*var1[1] + t147*t288*var1[2];
  p_output1[37]=0.091*t512 - 1.*t321*var1[0] - 1.*t141*t288*var1[2];
  p_output1[38]=0.091*t288*t443 - 1.*t147*t288*var1[0] + t141*t288*var1[1];
  p_output1[39]=0. - 1.*t141*t288;
  p_output1[40]=0. - 1.*t147*t288;
  p_output1[41]=0. + t321;
  p_output1[42]=-0.084668*t141*t288 - 0.041869*t695 - 0.016493*t734 + 0.366501*(t861*t874 + t927*t936) - 0.930418*(t861*t965 + t927*t986);
  p_output1[43]=-0.084668*t147*t288 + 0.366501*(t1102*t695 + t1076*t874) - 0.041869*t936 - 0.930418*(t1102*t734 + t1076*t965) - 0.016493*t986;
  p_output1[44]=0.084668*t321 - 0.041869*t874 + 0.366501*(t1246*t695 + t1222*t936) - 0.016493*t965 - 0.930418*(t1246*t734 + t1222*t986);
  p_output1[45]=0. + 0.366501*t695 - 0.930418*t734;
  p_output1[46]=0. + 0.366501*t936 - 0.930418*t986;
  p_output1[47]=0. + 0.366501*t874 - 0.930418*t965;
  p_output1[48]=0.366501*(t1771*t1818 + t1841*t1851) + 0.930418*(t1771*t1921 + t1841*t1944) + 0.151852*t1994 - 0.041869*t2014 + 0.016493*t2037;
  p_output1[49]=-0.041869*t1818 + 0.016493*t1921 + 0.366501*(t2014*t2088 + t1851*t2141) + 0.930418*(t2037*t2088 + t1944*t2141) + 0.151852*t2210;
  p_output1[50]=-0.041869*t1851 + 0.016493*t1944 + 0.366501*(t2014*t2309 + t1818*t2325) + 0.930418*(t2037*t2309 + t1921*t2325) + 0.151852*t2399;
  p_output1[51]=0. + 0.366501*t2014 + 0.930418*t2037;
  p_output1[52]=0. + 0.366501*t1818 + 0.930418*t1921;
  p_output1[53]=0. + 0.366501*t1851 + 0.930418*t1944;
  p_output1[54]=-0.930418*(t2659*t2698 + t2733*t2742) - 0.366501*(t2659*t2793 + t2733*t2815) + 0.014606*t2840 - 0.236705*(t2014*t2581 + t2037*t2616 + t1994*t2873) - 0.03708*t2934;
  p_output1[55]=0.014606*t2742 - 0.03708*t2815 - 0.236705*(t1818*t2581 + t1921*t2616 + t2210*t2873) - 0.930418*(t2698*t2959 + t2840*t2978) - 0.366501*(t2793*t2959 + t2934*t2978);
  p_output1[56]=0.014606*t2698 - 0.03708*t2793 - 0.236705*(t1851*t2581 + t1944*t2616 + t2399*t2873) - 0.930418*(t2840*t3077 + t2742*t3104) - 0.366501*(t2934*t3077 + t2815*t3104);
  p_output1[57]=0. - 0.930418*t2840 - 0.366501*t2934;
  p_output1[58]=0. - 0.930418*t2742 - 0.366501*t2815;
  p_output1[59]=0. - 0.930418*t2698 - 0.366501*t2793;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
}



void Js_left_knee_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
