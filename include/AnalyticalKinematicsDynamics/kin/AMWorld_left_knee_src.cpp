/*
 * Automatically Generated from Mathematica.
 * Mon 4 Jul 2022 20:57:09 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "AMWorld_left_knee_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t169;
  double t184;
  double t236;
  double t256;
  double t259;
  double t305;
  double t370;
  double t458;
  double t521;
  double t555;
  double t570;
  double t648;
  double t800;
  double t1265;
  double t1338;
  double t1354;
  double t1652;
  double t1189;
  double t1213;
  double t1247;
  double t1742;
  double t1758;
  double t1828;
  double t1902;
  double t1949;
  double t1971;
  double t1984;
  double t1995;
  double t1412;
  double t1470;
  double t1489;
  double t1550;
  double t1999;
  double t2027;
  double t2044;
  double t2054;
  double t2218;
  double t2326;
  double t2340;
  double t2371;
  double t2398;
  double t2414;
  double t2416;
  double t2460;
  double t2523;
  double t2620;
  double t2666;
  double t2702;
  double t2729;
  double t2747;
  double t2748;
  double t2749;
  double t2883;
  double t2924;
  double t2933;
  double t3071;
  double t2109;
  double t2182;
  double t2201;
  double t2468;
  double t2531;
  double t2589;
  double t2952;
  double t3000;
  double t1118;
  double t3110;
  double t3149;
  double t3205;
  double t3271;
  double t3390;
  double t3400;
  double t3420;
  double t3454;
  double t3617;
  double t3047;
  double t3498;
  double t3514;
  double t1116;
  double t3623;
  double t3666;
  double t3779;
  double t3950;
  double t3952;
  double t3993;
  double t4049;
  double t4069;
  double t4094;
  double t3961;
  double t4050;
  double t4132;
  double t4144;
  double t4395;
  double t4406;
  double t4429;
  double t4452;
  double t4455;
  double t4459;
  double t4497;
  double t4499;
  double t4504;
  double t4509;
  double t4522;
  double t4524;
  double t4588;
  double t4607;
  double t4661;
  double t4663;
  double t4698;
  double t4725;
  double t4549;
  double t4584;
  double t4750;
  double t4754;
  double t4802;
  double t4809;
  double t4828;
  double t4839;
  double t4854;
  double t4893;
  double t4913;
  double t4914;
  double t4781;
  double t4842;
  double t4920;
  double t4921;
  double t4949;
  double t4959;
  double t4970;
  double t4972;
  double t3849;
  double t4935;
  double t4974;
  double t4984;
  double t5016;
  double t5028;
  double t5032;
  double t3931;
  double t5160;
  double t5179;
  double t5186;
  double t5187;
  double t4391;
  double t5290;
  double t5291;
  double t5333;
  double t5359;
  double t5407;
  double t5417;
  double t5384;
  double t5400;
  double t5421;
  double t5428;
  double t5436;
  double t5463;
  double t5465;
  double t5467;
  double t5469;
  double t5470;
  double t5474;
  double t5485;
  double t5434;
  double t5468;
  double t5489;
  double t5492;
  double t5501;
  double t5526;
  double t5541;
  double t5545;
  double t5500;
  double t5556;
  double t5558;
  double t5562;
  double t5572;
  double t5576;
  double t5653;
  double t5656;
  double t5670;
  double t5675;
  double t5764;
  double t5759;
  double t5777;
  double t5780;
  double t5784;
  double t5763;
  double t5765;
  double t5772;
  double t5775;
  double t5790;
  double t5795;
  double t5811;
  double t5828;
  double t5830;
  double t5888;
  double t5892;
  double t5896;
  double t5930;
  double t5804;
  double t5841;
  double t5843;
  double t5853;
  double t5861;
  double t5865;
  double t5874;
  double t5878;
  double t5859;
  double t5879;
  double t5932;
  double t5938;
  double t5960;
  double t5962;
  double t5968;
  double t5969;
  double t5983;
  double t5987;
  double t5997;
  double t6000;
  double t10;
  double t495;
  double t821;
  double t898;
  double t952;
  double t3518;
  double t3808;
  double t3815;
  double t3847;
  double t3850;
  double t3851;
  double t3886;
  double t3891;
  double t4153;
  double t4154;
  double t4182;
  double t4194;
  double t4195;
  double t4250;
  double t4255;
  double t4261;
  double t4263;
  double t4270;
  double t4284;
  double t4318;
  double t4336;
  double t4372;
  double t4485;
  double t4526;
  double t4528;
  double t4529;
  double t4989;
  double t5042;
  double t5061;
  double t5118;
  double t5135;
  double t5141;
  double t5144;
  double t5156;
  double t5190;
  double t5200;
  double t5210;
  double t5212;
  double t5218;
  double t5221;
  double t5222;
  double t5224;
  double t5225;
  double t5230;
  double t5240;
  double t5241;
  double t5253;
  double t5257;
  double t5332;
  double t5362;
  double t5374;
  double t5377;
  double t5561;
  double t5581;
  double t5593;
  double t5602;
  double t5607;
  double t5641;
  double t5644;
  double t5647;
  double t5678;
  double t5681;
  double t5699;
  double t5706;
  double t5707;
  double t5715;
  double t5729;
  double t5731;
  double t5732;
  double t5740;
  double t5741;
  double t5745;
  double t5746;
  double t5750;
  double t5943;
  double t5972;
  double t6004;
  double t6007;
  double t6011;
  double t6023;
  double t6027;
  double t6035;
  double t6112;
  double t6116;
  double t6117;
  double t6121;
  double t6122;
  double t6128;
  double t4379;
  double t5261;
  double t5756;
  double t5757;
  double t6214;
  double t6235;
  double t6236;
  double t6188;
  double t6190;
  double t6191;
  double t6192;
  double t6239;
  double t6247;
  double t6253;
  double t6255;
  double t6267;
  double t6341;
  double t6342;
  double t6346;
  double t6355;
  double t6249;
  double t6271;
  double t6272;
  double t6288;
  double t6304;
  double t6306;
  double t6308;
  double t6309;
  double t6302;
  double t6340;
  double t6357;
  double t6358;
  double t6365;
  double t6369;
  double t6370;
  double t6377;
  double t6392;
  double t6394;
  double t6397;
  double t6398;
  double t6081;
  double t6093;
  double t6096;
  double t6098;
  double t6359;
  double t6384;
  double t6402;
  double t6407;
  double t6412;
  double t6425;
  double t6429;
  double t6434;
  double t6156;
  double t6161;
  double t6162;
  double t6164;
  double t6457;
  double t6458;
  double t6459;
  double t6461;
  double t6469;
  double t6476;
  double t6521;
  double t6524;
  double t6529;
  double t6535;
  double t6544;
  double t6549;
  double t6584;
  double t6587;
  double t6594;
  double t6595;
  double t6534;
  double t6550;
  double t6553;
  double t6570;
  double t6572;
  double t6577;
  double t6580;
  double t6581;
  double t6571;
  double t6582;
  double t6603;
  double t6605;
  double t6607;
  double t6609;
  double t6620;
  double t6626;
  double t6630;
  double t6632;
  double t6633;
  double t6639;
  double t6606;
  double t6628;
  double t6650;
  double t6655;
  double t6658;
  double t6663;
  double t6667;
  double t6669;
  double t6680;
  double t6681;
  double t6690;
  double t6691;
  double t6692;
  double t6695;
  t169 = Cos(var1[9]);
  t184 = -1.*t169;
  t236 = 1. + t184;
  t256 = -0.8656776547239999*t236;
  t259 = 1. + t256;
  t305 = -0.366501*t259;
  t370 = -0.3172717261340007*t236;
  t458 = t305 + t370;
  t521 = -0.134322983001*t236;
  t555 = 1. + t521;
  t570 = -0.930418*t555;
  t648 = -0.12497652119782442*t236;
  t800 = t570 + t648;
  t1265 = Cos(var1[8]);
  t1338 = -1.*t1265;
  t1354 = 1. + t1338;
  t1652 = Sin(var1[9]);
  t1189 = Cos(var1[7]);
  t1213 = -1.*t1189;
  t1247 = 1. + t1213;
  t1742 = -0.930418*t1652;
  t1758 = 0. + t1742;
  t1828 = -0.366501*t1758;
  t1902 = 0.366501*t1652;
  t1949 = 0. + t1902;
  t1971 = -0.930418*t1949;
  t1984 = t1828 + t1971;
  t1995 = Sin(var1[8]);
  t1412 = -0.8656776547239999*t1354;
  t1470 = 1. + t1412;
  t1489 = t458*t1470;
  t1550 = 0.340999127418*t800*t1354;
  t1999 = -0.930418*t1995;
  t2027 = 0. + t1999;
  t2044 = t1984*t2027;
  t2054 = 0. + t1489 + t1550 + t2044;
  t2218 = -0.134322983001*t1354;
  t2326 = 1. + t2218;
  t2340 = t800*t2326;
  t2371 = 0.340999127418*t458*t1354;
  t2398 = 0.366501*t1995;
  t2414 = 0. + t2398;
  t2416 = t1984*t2414;
  t2460 = 0. + t2340 + t2371 + t2416;
  t2523 = Sin(var1[7]);
  t2620 = -1.000000637725*t1354;
  t2666 = 1. + t2620;
  t2702 = t2666*t1984;
  t2729 = -0.366501*t1995;
  t2747 = 0. + t2729;
  t2748 = t800*t2747;
  t2749 = 0.930418*t1995;
  t2883 = 0. + t2749;
  t2924 = t458*t2883;
  t2933 = 0. + t2702 + t2748 + t2924;
  t3071 = Cos(var1[6]);
  t2109 = -0.340999127418*t1247*t2054;
  t2182 = -0.8656776547239999*t1247;
  t2201 = 1. + t2182;
  t2468 = t2201*t2460;
  t2531 = -0.930418*t2523;
  t2589 = 0. + t2531;
  t2952 = t2589*t2933;
  t3000 = 0. + t2109 + t2468 + t2952;
  t1118 = Sin(var1[6]);
  t3110 = -0.134322983001*t1247;
  t3149 = 1. + t3110;
  t3205 = t3149*t2054;
  t3271 = -0.340999127418*t1247*t2460;
  t3390 = -0.366501*t2523;
  t3400 = 0. + t3390;
  t3420 = t3400*t2933;
  t3454 = 0. + t3205 + t3271 + t3420;
  t3617 = Cos(var1[5]);
  t3047 = -1.*t1118*t3000;
  t3498 = t3071*t3454;
  t3514 = 0. + t3047 + t3498;
  t1116 = Sin(var1[5]);
  t3623 = t3071*t3000;
  t3666 = t1118*t3454;
  t3779 = 0. + t3623 + t3666;
  t3950 = 0.366501*t2523;
  t3952 = 0. + t3950;
  t3993 = 0.930418*t2523;
  t4049 = 0. + t3993;
  t4069 = -1.000000637725*t1247;
  t4094 = 1. + t4069;
  t3961 = t3952*t2054;
  t4050 = t4049*t2460;
  t4132 = t4094*t2933;
  t4144 = 0. + t3961 + t4050 + t4132;
  t4395 = 0.259155*t555;
  t4406 = -0.22434503092393926*t236;
  t4429 = -0.366501*t1652;
  t4452 = 0. + t4429;
  t4455 = -0.707107*t4452;
  t4459 = t4395 + t4406 + t4455;
  t4497 = -0.657905*t259;
  t4499 = 0.0883716288660118*t236;
  t4504 = 0.930418*t1652;
  t4509 = 0. + t4504;
  t4522 = -0.707107*t4509;
  t4524 = t4497 + t4499 + t4522;
  t4588 = -1.000000637725*t236;
  t4607 = 1. + t4588;
  t4661 = -0.707107*t4607;
  t4663 = -0.657905*t1758;
  t4698 = 0.259155*t1949;
  t4725 = t4661 + t4663 + t4698;
  t4549 = 0.340999127418*t1354*t4459;
  t4584 = t1470*t4524;
  t4750 = t4725*t2027;
  t4754 = 0. + t4549 + t4584 + t4750;
  t4802 = t2326*t4459;
  t4809 = 0.340999127418*t1354*t4524;
  t4828 = t4725*t2414;
  t4839 = 0. + t4802 + t4809 + t4828;
  t4854 = t2666*t4725;
  t4893 = t4459*t2747;
  t4913 = t4524*t2883;
  t4914 = 0. + t4854 + t4893 + t4913;
  t4781 = -0.340999127418*t1247*t4754;
  t4842 = t2201*t4839;
  t4920 = t2589*t4914;
  t4921 = 0. + t4781 + t4842 + t4920;
  t4949 = t3149*t4754;
  t4959 = -0.340999127418*t1247*t4839;
  t4970 = t3400*t4914;
  t4972 = 0. + t4949 + t4959 + t4970;
  t3849 = Cos(var1[4]);
  t4935 = -1.*t1118*t4921;
  t4974 = t3071*t4972;
  t4984 = 0. + t4935 + t4974;
  t5016 = t3071*t4921;
  t5028 = t1118*t4972;
  t5032 = 0. + t5016 + t5028;
  t3931 = Sin(var1[4]);
  t5160 = t3952*t4754;
  t5179 = t4049*t4839;
  t5186 = t4094*t4914;
  t5187 = 0. + t5160 + t5179 + t5186;
  t4391 = 3.6361499999859603e-7*var2[9];
  t5290 = 0.707107*t4452;
  t5291 = t4395 + t4406 + t5290;
  t5333 = 0.707107*t4509;
  t5359 = t4497 + t4499 + t5333;
  t5407 = 0.707107*t4607;
  t5417 = t5407 + t4663 + t4698;
  t5384 = 0.340999127418*t1354*t5291;
  t5400 = t1470*t5359;
  t5421 = t5417*t2027;
  t5428 = 0. + t5384 + t5400 + t5421;
  t5436 = t2326*t5291;
  t5463 = 0.340999127418*t1354*t5359;
  t5465 = t5417*t2414;
  t5467 = 0. + t5436 + t5463 + t5465;
  t5469 = t2666*t5417;
  t5470 = t5291*t2747;
  t5474 = t5359*t2883;
  t5485 = 0. + t5469 + t5470 + t5474;
  t5434 = -0.340999127418*t1247*t5428;
  t5468 = t2201*t5467;
  t5489 = t2589*t5485;
  t5492 = 0. + t5434 + t5468 + t5489;
  t5501 = t3149*t5428;
  t5526 = -0.340999127418*t1247*t5467;
  t5541 = t3400*t5485;
  t5545 = 0. + t5501 + t5526 + t5541;
  t5500 = -1.*t1118*t5492;
  t5556 = t3071*t5545;
  t5558 = 0. + t5500 + t5556;
  t5562 = t3071*t5492;
  t5572 = t1118*t5545;
  t5576 = 0. + t5562 + t5572;
  t5653 = t3952*t5428;
  t5656 = t4049*t5467;
  t5670 = t4094*t5485;
  t5675 = 0. + t5653 + t5656 + t5670;
  t5764 = Cos(var1[3]);
  t5759 = Sin(var1[3]);
  t5777 = t5764*t3617*t3931;
  t5780 = t5759*t1116;
  t5784 = t5777 + t5780;
  t5763 = -1.*t3617*t5759;
  t5765 = t5764*t3931*t1116;
  t5772 = t5763 + t5765;
  t5775 = t3071*t5772;
  t5790 = -1.*t5784*t1118;
  t5795 = t5775 + t5790;
  t5811 = t3071*t5784;
  t5828 = t5772*t1118;
  t5830 = t5811 + t5828;
  t5888 = t5764*t3849*t4094;
  t5892 = t5795*t2589;
  t5896 = t5830*t3400;
  t5930 = t5888 + t5892 + t5896;
  t5804 = -0.340999127418*t1247*t5795;
  t5841 = t3149*t5830;
  t5843 = t5764*t3849*t3952;
  t5853 = t5804 + t5841 + t5843;
  t5861 = t2201*t5795;
  t5865 = -0.340999127418*t1247*t5830;
  t5874 = t5764*t3849*t4049;
  t5878 = t5861 + t5865 + t5874;
  t5859 = 0.340999127418*t1354*t5853;
  t5879 = t2326*t5878;
  t5932 = t5930*t2747;
  t5938 = t5859 + t5879 + t5932;
  t5960 = t2666*t5930;
  t5962 = t5853*t2027;
  t5968 = t5878*t2414;
  t5969 = t5960 + t5962 + t5968;
  t5983 = t1470*t5853;
  t5987 = 0.340999127418*t1354*t5878;
  t5997 = t5930*t2883;
  t6000 = t5983 + t5987 + t5997;
  t10 = 1.000000637725*var2[9];
  t495 = 0.366501*t458;
  t821 = 0.930418*t800;
  t898 = 0. + t495 + t821;
  t952 = var2[8]*t898;
  t3518 = -1.*t1116*t3514;
  t3808 = t3617*t3779;
  t3815 = 0. + t3518 + t3808;
  t3847 = var2[4]*t3815;
  t3850 = t3617*t3514;
  t3851 = t1116*t3779;
  t3886 = 0. + t3850 + t3851;
  t3891 = t3849*t3886;
  t4153 = -1.*t3931*t4144;
  t4154 = 0. + t3891 + t4153;
  t4182 = var2[3]*t4154;
  t4194 = -0.930418*t2054;
  t4195 = 0.366501*t2460;
  t4250 = 0. + t4194 + t4195;
  t4255 = var2[7]*t4250;
  t4261 = -1.*t3952*t2054;
  t4263 = -1.*t4049*t2460;
  t4270 = -1.*t4094*t2933;
  t4284 = 0. + t4261 + t4263 + t4270;
  t4318 = var2[6]*t4284;
  t4336 = var2[5]*t4144;
  t4372 = t10 + t952 + t3847 + t4182 + t4255 + t4318 + t4336;
  t4485 = 0.930418*t4459;
  t4526 = 0.366501*t4524;
  t4528 = 0. + t4485 + t4526;
  t4529 = var2[8]*t4528;
  t4989 = -1.*t1116*t4984;
  t5042 = t3617*t5032;
  t5061 = 0. + t4989 + t5042;
  t5118 = var2[4]*t5061;
  t5135 = t3617*t4984;
  t5141 = t1116*t5032;
  t5144 = 0. + t5135 + t5141;
  t5156 = t3849*t5144;
  t5190 = -1.*t3931*t5187;
  t5200 = 0. + t5156 + t5190;
  t5210 = var2[3]*t5200;
  t5212 = -0.930418*t4754;
  t5218 = 0.366501*t4839;
  t5221 = 0. + t5212 + t5218;
  t5222 = var2[7]*t5221;
  t5224 = -1.*t3952*t4754;
  t5225 = -1.*t4049*t4839;
  t5230 = -1.*t4094*t4914;
  t5240 = 0. + t5224 + t5225 + t5230;
  t5241 = var2[6]*t5240;
  t5253 = var2[5]*t5187;
  t5257 = t4391 + t4529 + t5118 + t5210 + t5222 + t5241 + t5253;
  t5332 = 0.930418*t5291;
  t5362 = 0.366501*t5359;
  t5374 = 0. + t5332 + t5362;
  t5377 = var2[8]*t5374;
  t5561 = -1.*t1116*t5558;
  t5581 = t3617*t5576;
  t5593 = 0. + t5561 + t5581;
  t5602 = var2[4]*t5593;
  t5607 = t3617*t5558;
  t5641 = t1116*t5576;
  t5644 = 0. + t5607 + t5641;
  t5647 = t3849*t5644;
  t5678 = -1.*t3931*t5675;
  t5681 = 0. + t5647 + t5678;
  t5699 = var2[3]*t5681;
  t5706 = -0.930418*t5428;
  t5707 = 0.366501*t5467;
  t5715 = 0. + t5706 + t5707;
  t5729 = var2[7]*t5715;
  t5731 = -1.*t3952*t5428;
  t5732 = -1.*t4049*t5467;
  t5740 = -1.*t4094*t5485;
  t5741 = 0. + t5731 + t5732 + t5740;
  t5745 = var2[6]*t5741;
  t5746 = var2[5]*t5675;
  t5750 = t4391 + t5377 + t5602 + t5699 + t5729 + t5745 + t5746;
  t5943 = 0.340999127418*t236*t5938;
  t5972 = t1758*t5969;
  t6004 = t259*t6000;
  t6007 = t5943 + t5972 + t6004;
  t6011 = t555*t5938;
  t6023 = t1949*t5969;
  t6027 = 0.340999127418*t236*t6000;
  t6035 = t6011 + t6023 + t6027;
  t6112 = -0.657905*t6007;
  t6116 = 0.259155*t6035;
  t6117 = t4452*t5938;
  t6121 = t4607*t5969;
  t6122 = t4509*t6000;
  t6128 = t6117 + t6121 + t6122;
  t4379 = 0.038903*t4372;
  t5261 = 0.000309*t5257;
  t5756 = 0.00004*t5750;
  t5757 = t4379 + t5261 + t5756;
  t6214 = t3617*t5759*t3931;
  t6235 = -1.*t5764*t1116;
  t6236 = t6214 + t6235;
  t6188 = t5764*t3617;
  t6190 = t5759*t3931*t1116;
  t6191 = t6188 + t6190;
  t6192 = t3071*t6191;
  t6239 = -1.*t6236*t1118;
  t6247 = t6192 + t6239;
  t6253 = t3071*t6236;
  t6255 = t6191*t1118;
  t6267 = t6253 + t6255;
  t6341 = t3849*t4094*t5759;
  t6342 = t6247*t2589;
  t6346 = t6267*t3400;
  t6355 = t6341 + t6342 + t6346;
  t6249 = -0.340999127418*t1247*t6247;
  t6271 = t3149*t6267;
  t6272 = t3849*t5759*t3952;
  t6288 = t6249 + t6271 + t6272;
  t6304 = t2201*t6247;
  t6306 = -0.340999127418*t1247*t6267;
  t6308 = t3849*t5759*t4049;
  t6309 = t6304 + t6306 + t6308;
  t6302 = 0.340999127418*t1354*t6288;
  t6340 = t2326*t6309;
  t6357 = t6355*t2747;
  t6358 = t6302 + t6340 + t6357;
  t6365 = t2666*t6355;
  t6369 = t6288*t2027;
  t6370 = t6309*t2414;
  t6377 = t6365 + t6369 + t6370;
  t6392 = t1470*t6288;
  t6394 = 0.340999127418*t1354*t6309;
  t6397 = t6355*t2883;
  t6398 = t6392 + t6394 + t6397;
  t6081 = 0.000309*t4372;
  t6093 = 0.004296*t5257;
  t6096 = 0.001393*t5750;
  t6098 = t6081 + t6093 + t6096;
  t6359 = 0.340999127418*t236*t6358;
  t6384 = t1758*t6377;
  t6402 = t259*t6398;
  t6407 = t6359 + t6384 + t6402;
  t6412 = t555*t6358;
  t6425 = t1949*t6377;
  t6429 = 0.340999127418*t236*t6398;
  t6434 = t6412 + t6425 + t6429;
  t6156 = 0.00004*t4372;
  t6161 = 0.001393*t5257;
  t6162 = 0.036157*t5750;
  t6164 = t6156 + t6161 + t6162;
  t6457 = -0.657905*t6407;
  t6458 = 0.259155*t6434;
  t6459 = t4452*t6358;
  t6461 = t4607*t6377;
  t6469 = t4509*t6398;
  t6476 = t6459 + t6461 + t6469;
  t6521 = t3849*t3071*t1116;
  t6524 = -1.*t3849*t3617*t1118;
  t6529 = t6521 + t6524;
  t6535 = t3849*t3617*t3071;
  t6544 = t3849*t1116*t1118;
  t6549 = t6535 + t6544;
  t6584 = -1.*t4094*t3931;
  t6587 = t6529*t2589;
  t6594 = t6549*t3400;
  t6595 = t6584 + t6587 + t6594;
  t6534 = -0.340999127418*t1247*t6529;
  t6550 = t3149*t6549;
  t6553 = -1.*t3931*t3952;
  t6570 = t6534 + t6550 + t6553;
  t6572 = t2201*t6529;
  t6577 = -0.340999127418*t1247*t6549;
  t6580 = -1.*t3931*t4049;
  t6581 = t6572 + t6577 + t6580;
  t6571 = 0.340999127418*t1354*t6570;
  t6582 = t2326*t6581;
  t6603 = t6595*t2747;
  t6605 = t6571 + t6582 + t6603;
  t6607 = t2666*t6595;
  t6609 = t6570*t2027;
  t6620 = t6581*t2414;
  t6626 = t6607 + t6609 + t6620;
  t6630 = t1470*t6570;
  t6632 = 0.340999127418*t1354*t6581;
  t6633 = t6595*t2883;
  t6639 = t6630 + t6632 + t6633;
  t6606 = 0.340999127418*t236*t6605;
  t6628 = t1758*t6626;
  t6650 = t259*t6639;
  t6655 = t6606 + t6628 + t6650;
  t6658 = t555*t6605;
  t6663 = t1949*t6626;
  t6667 = 0.340999127418*t236*t6639;
  t6669 = t6658 + t6663 + t6667;
  t6680 = -0.657905*t6655;
  t6681 = 0.259155*t6669;
  t6690 = t4452*t6605;
  t6691 = t4607*t6626;
  t6692 = t4509*t6639;
  t6695 = t6690 + t6691 + t6692;
  p_output1[0]=t5757*(-0.366501*t6007 - 0.930418*t6035) + t6098*(t6112 + t6116 - 0.707107*t6128) + (t6112 + t6116 + 0.707107*t6128)*t6164;
  p_output1[1]=t5757*(-0.366501*t6407 - 0.930418*t6434) + t6098*(t6457 + t6458 - 0.707107*t6476) + t6164*(t6457 + t6458 + 0.707107*t6476);
  p_output1[2]=t5757*(-0.366501*t6655 - 0.930418*t6669) + t6098*(t6680 + t6681 - 0.707107*t6695) + t6164*(t6680 + t6681 + 0.707107*t6695);
}



void AMWorld_left_knee_src(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}
