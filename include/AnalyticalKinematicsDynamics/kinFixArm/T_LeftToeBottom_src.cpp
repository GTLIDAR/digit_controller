/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:20:51 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "T_LeftToeBottom_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t250;
  double t246;
  double t258;
  double t247;
  double t291;
  double t224;
  double t227;
  double t231;
  double t236;
  double t300;
  double t301;
  double t308;
  double t249;
  double t292;
  double t297;
  double t319;
  double t187;
  double t201;
  double t218;
  double t299;
  double t320;
  double t323;
  double t343;
  double t349;
  double t377;
  double t381;
  double t385;
  double t466;
  double t480;
  double t483;
  double t488;
  double t493;
  double t494;
  double t504;
  double t505;
  double t509;
  double t510;
  double t326;
  double t329;
  double t338;
  double t378;
  double t388;
  double t390;
  double t402;
  double t403;
  double t517;
  double t418;
  double t422;
  double t427;
  double t428;
  double t431;
  double t433;
  double t435;
  double t453;
  double t167;
  double t170;
  double t186;
  double t152;
  double t404;
  double t411;
  double t414;
  double t454;
  double t528;
  double t532;
  double t533;
  double t534;
  double t537;
  double t594;
  double t610;
  double t613;
  double t616;
  double t631;
  double t632;
  double t638;
  double t640;
  double t646;
  double t647;
  double t701;
  double t702;
  double t703;
  double t704;
  double t709;
  double t720;
  double t731;
  double t736;
  double t801;
  double t804;
  double t807;
  double t535;
  double t564;
  double t571;
  double t648;
  double t676;
  double t700;
  double t745;
  double t746;
  double t765;
  double t766;
  double t767;
  double t770;
  double t772;
  double t776;
  double t783;
  double t784;
  double t822;
  double t823;
  double t851;
  double t864;
  double t865;
  double t872;
  double t879;
  double t881;
  double t890;
  double t897;
  double t917;
  double t919;
  double t926;
  double t22;
  double t28;
  double t42;
  double t77;
  double t158;
  double t166;
  double t748;
  double t756;
  double t764;
  double t796;
  double t814;
  double t815;
  double t898;
  double t900;
  double t939;
  double t950;
  double t952;
  double t963;
  double t965;
  double t969;
  double t974;
  double t980;
  double t1023;
  double t1025;
  double t1032;
  double t1039;
  double t1073;
  double t1080;
  double t1083;
  double t1088;
  double t1125;
  double t1124;
  double t80;
  double t82;
  double t910;
  double t984;
  double t985;
  double t997;
  double t1090;
  double t1107;
  double t1143;
  double t1145;
  double t1150;
  double t1155;
  double t1175;
  double t1189;
  double t1213;
  double t1214;
  double t1296;
  double t1304;
  double t1308;
  double t1310;
  double t1343;
  double t1358;
  double t1367;
  double t1379;
  double t1390;
  double t1396;
  double t43;
  double t71;
  double t1577;
  double t1579;
  double t1580;
  double t1558;
  double t1560;
  double t1569;
  double t1576;
  double t1583;
  double t1594;
  double t1602;
  double t1616;
  double t1631;
  double t1706;
  double t1720;
  double t1722;
  double t1814;
  double t1601;
  double t1646;
  double t1659;
  double t1660;
  double t1677;
  double t1682;
  double t1684;
  double t1691;
  double t1672;
  double t1699;
  double t1817;
  double t1842;
  double t1855;
  double t1874;
  double t1894;
  double t1899;
  double t1909;
  double t1911;
  double t1956;
  double t1982;
  double t1851;
  double t1902;
  double t1990;
  double t1994;
  double t2031;
  double t2045;
  double t2062;
  double t2071;
  double t2085;
  double t2099;
  double t2109;
  double t2114;
  double t1130;
  double t1136;
  double t2022;
  double t2083;
  double t2148;
  double t2151;
  double t2159;
  double t2167;
  double t2171;
  double t2177;
  double t2199;
  double t2227;
  double t2264;
  double t2267;
  double t1258;
  double t1260;
  double t1286;
  double t1481;
  double t1497;
  double t2153;
  double t2181;
  double t2275;
  double t2301;
  double t1505;
  double t1508;
  double t2305;
  double t2306;
  double t2315;
  double t2318;
  double t1514;
  double t1516;
  double t1520;
  double t2335;
  double t2346;
  double t2349;
  double t2364;
  double t2497;
  double t2513;
  double t2532;
  double t2552;
  double t2557;
  double t2560;
  double t2667;
  double t2687;
  double t2709;
  double t2722;
  double t2542;
  double t2579;
  double t2583;
  double t2592;
  double t2617;
  double t2618;
  double t2623;
  double t2627;
  double t2597;
  double t2659;
  double t2725;
  double t2726;
  double t2746;
  double t2750;
  double t2754;
  double t2783;
  double t2804;
  double t2811;
  double t2813;
  double t2820;
  double t2739;
  double t2801;
  double t2827;
  double t2832;
  double t2849;
  double t2854;
  double t2863;
  double t2878;
  double t2889;
  double t2902;
  double t2904;
  double t2906;
  double t2846;
  double t2883;
  double t2916;
  double t2923;
  double t2931;
  double t2933;
  double t2934;
  double t2948;
  double t2973;
  double t2980;
  double t2982;
  double t3007;
  double t2925;
  double t2950;
  double t3017;
  double t3027;
  double t3055;
  double t3062;
  double t3067;
  double t3096;
  double t3118;
  double t3119;
  double t3122;
  double t3123;
  double t1123;
  double t1216;
  double t1440;
  double t1463;
  double t1498;
  double t1513;
  double t1532;
  double t1535;
  double t3286;
  double t3292;
  double t3295;
  double t3303;
  double t3315;
  double t3319;
  double t2302;
  double t2324;
  double t2382;
  double t2392;
  double t2416;
  double t2419;
  double t2431;
  double t2432;
  double t3032;
  double t3113;
  double t3134;
  double t3184;
  double t3255;
  double t3262;
  double t3274;
  double t3281;
  double t3293;
  double t3304;
  double t3321;
  double t3326;
  double t3353;
  double t3363;
  double t3370;
  double t3381;
  double t3409;
  double t3410;
  double t3412;
  double t3416;
  double t3716;
  double t3750;
  double t3697;
  double t3502;
  double t3504;
  double t3506;
  double t3522;
  double t3531;
  double t3535;
  double t3552;
  double t3553;
  double t3569;
  double t3571;
  double t3580;
  double t3597;
  double t3624;
  double t3652;
  double t3661;
  double t3663;
  double t3668;
  double t3669;
  double t3687;
  double t3695;
  double t3710;
  double t3713;
  double t3726;
  double t3731;
  double t3735;
  double t3737;
  double t3743;
  double t3745;
  double t3748;
  double t3764;
  double t3766;
  double t3774;
  double t3792;
  double t3795;
  double t3806;
  double t3809;
  double t3835;
  double t3865;
  double t3867;
  double t3872;
  double t3873;
  double t3874;
  double t3879;
  double t3889;
  double t3892;
  double t3894;
  double t3895;
  double t3900;
  double t3909;
  double t3911;
  double t3914;
  double t3916;
  double t3919;
  double t3921;
  double t3934;
  double t3938;
  double t3940;
  double t3941;
  double t3946;
  double t3966;
  double t3967;
  double t3968;
  double t3971;
  double t3980;
  double t3983;
  double t4001;
  double t4009;
  double t4014;
  double t4021;
  double t4022;
  double t4032;
  double t4041;
  double t4047;
  double t4048;
  double t4049;
  double t4057;
  double t4063;
  double t4069;
  double t4070;
  double t4086;
  double t4087;
  double t4092;
  double t4094;
  double t4103;
  double t4105;
  double t4108;
  double t4110;
  t250 = Cos(var1[3]);
  t246 = Cos(var1[5]);
  t258 = Sin(var1[4]);
  t247 = Sin(var1[3]);
  t291 = Sin(var1[5]);
  t224 = Cos(var1[7]);
  t227 = -1.*t224;
  t231 = 1. + t227;
  t236 = Cos(var1[6]);
  t300 = t250*t246*t258;
  t301 = t247*t291;
  t308 = t300 + t301;
  t249 = -1.*t246*t247;
  t292 = t250*t258*t291;
  t297 = t249 + t292;
  t319 = Sin(var1[6]);
  t187 = Cos(var1[8]);
  t201 = -1.*t187;
  t218 = 1. + t201;
  t299 = t236*t297;
  t320 = -1.*t308*t319;
  t323 = t299 + t320;
  t343 = t236*t308;
  t349 = t297*t319;
  t377 = t343 + t349;
  t381 = Cos(var1[4]);
  t385 = Sin(var1[7]);
  t466 = -1.000000637725*t231;
  t480 = 1. + t466;
  t483 = t250*t381*t480;
  t488 = -0.930418*t385;
  t493 = 0. + t488;
  t494 = t323*t493;
  t504 = -0.366501*t385;
  t505 = 0. + t504;
  t509 = t377*t505;
  t510 = t483 + t494 + t509;
  t326 = -0.340999127418*t231*t323;
  t329 = -0.134322983001*t231;
  t338 = 1. + t329;
  t378 = t338*t377;
  t388 = 0.366501*t385;
  t390 = 0. + t388;
  t402 = t250*t381*t390;
  t403 = t326 + t378 + t402;
  t517 = Sin(var1[8]);
  t418 = -0.8656776547239999*t231;
  t422 = 1. + t418;
  t427 = t422*t323;
  t428 = -0.340999127418*t231*t377;
  t431 = 0.930418*t385;
  t433 = 0. + t431;
  t435 = t250*t381*t433;
  t453 = t427 + t428 + t435;
  t167 = Cos(var1[9]);
  t170 = -1.*t167;
  t186 = 1. + t170;
  t152 = Sin(var1[10]);
  t404 = 0.340999127418*t218*t403;
  t411 = -0.134322983001*t218;
  t414 = 1. + t411;
  t454 = t414*t453;
  t528 = -0.366501*t517;
  t532 = 0. + t528;
  t533 = t510*t532;
  t534 = t404 + t454 + t533;
  t537 = Sin(var1[9]);
  t594 = -1.000000637725*t218;
  t610 = 1. + t594;
  t613 = t610*t510;
  t616 = -0.930418*t517;
  t631 = 0. + t616;
  t632 = t403*t631;
  t638 = 0.366501*t517;
  t640 = 0. + t638;
  t646 = t453*t640;
  t647 = t613 + t632 + t646;
  t701 = -0.8656776547239999*t218;
  t702 = 1. + t701;
  t703 = t702*t403;
  t704 = 0.340999127418*t218*t453;
  t709 = 0.930418*t517;
  t720 = 0. + t709;
  t731 = t510*t720;
  t736 = t703 + t704 + t731;
  t801 = Cos(var1[10]);
  t804 = -1.*t801;
  t807 = 1. + t804;
  t535 = 0.340999127418*t186*t534;
  t564 = -0.930418*t537;
  t571 = 0. + t564;
  t648 = t571*t647;
  t676 = -0.8656776547239999*t186;
  t700 = 1. + t676;
  t745 = t700*t736;
  t746 = t535 + t648 + t745;
  t765 = -0.134322983001*t186;
  t766 = 1. + t765;
  t767 = t766*t534;
  t770 = 0.366501*t537;
  t772 = 0. + t770;
  t776 = t772*t647;
  t783 = 0.340999127418*t186*t736;
  t784 = t767 + t776 + t783;
  t822 = -0.366501*t537;
  t823 = 0. + t822;
  t851 = t823*t534;
  t864 = -1.000000637725*t186;
  t865 = 1. + t864;
  t872 = t865*t647;
  t879 = 0.930418*t537;
  t881 = 0. + t879;
  t890 = t881*t736;
  t897 = t851 + t872 + t890;
  t917 = Cos(var1[11]);
  t919 = -1.*t917;
  t926 = 1. + t919;
  t22 = Cos(var1[12]);
  t28 = -1.*t22;
  t42 = 1. + t28;
  t77 = Sin(var1[11]);
  t158 = 0.930418*t152;
  t166 = 0. + t158;
  t748 = t166*t746;
  t756 = -0.366501*t152;
  t764 = 0. + t756;
  t796 = t764*t784;
  t814 = -1.000000637725*t807;
  t815 = 1. + t814;
  t898 = t815*t897;
  t900 = t748 + t796 + t898;
  t939 = -0.8656776547239999*t807;
  t950 = 1. + t939;
  t952 = t950*t746;
  t963 = 0.340999127418*t807*t784;
  t965 = -0.930418*t152;
  t969 = 0. + t965;
  t974 = t969*t897;
  t980 = t952 + t963 + t974;
  t1023 = 0.340999127418*t807*t746;
  t1025 = -0.134322983001*t807;
  t1032 = 1. + t1025;
  t1039 = t1032*t784;
  t1073 = 0.366501*t152;
  t1080 = 0. + t1073;
  t1083 = t1080*t897;
  t1088 = t1023 + t1039 + t1083;
  t1125 = Sin(var1[12]);
  t1124 = -0.120666640478*t42;
  t80 = 0.366501*t77;
  t82 = 0. + t80;
  t910 = t82*t900;
  t984 = 0.340999127418*t926*t980;
  t985 = -0.134322983001*t926;
  t997 = 1. + t985;
  t1090 = t997*t1088;
  t1107 = t910 + t984 + t1090;
  t1143 = -0.930418*t77;
  t1145 = 0. + t1143;
  t1150 = t1145*t900;
  t1155 = -0.8656776547239999*t926;
  t1175 = 1. + t1155;
  t1189 = t1175*t980;
  t1213 = 0.340999127418*t926*t1088;
  t1214 = t1150 + t1189 + t1213;
  t1296 = -1.000000637725*t926;
  t1304 = 1. + t1296;
  t1308 = t1304*t900;
  t1310 = 0.930418*t77;
  t1343 = 0. + t1310;
  t1358 = t1343*t980;
  t1367 = -0.366501*t77;
  t1379 = 0. + t1367;
  t1390 = t1379*t1088;
  t1396 = t1308 + t1358 + t1390;
  t43 = -0.952469601425*t42;
  t71 = 1. + t43;
  t1577 = t246*t247*t258;
  t1579 = -1.*t250*t291;
  t1580 = t1577 + t1579;
  t1558 = t250*t246;
  t1560 = t247*t258*t291;
  t1569 = t1558 + t1560;
  t1576 = t236*t1569;
  t1583 = -1.*t1580*t319;
  t1594 = t1576 + t1583;
  t1602 = t236*t1580;
  t1616 = t1569*t319;
  t1631 = t1602 + t1616;
  t1706 = t381*t480*t247;
  t1720 = t1594*t493;
  t1722 = t1631*t505;
  t1814 = t1706 + t1720 + t1722;
  t1601 = -0.340999127418*t231*t1594;
  t1646 = t338*t1631;
  t1659 = t381*t247*t390;
  t1660 = t1601 + t1646 + t1659;
  t1677 = t422*t1594;
  t1682 = -0.340999127418*t231*t1631;
  t1684 = t381*t247*t433;
  t1691 = t1677 + t1682 + t1684;
  t1672 = 0.340999127418*t218*t1660;
  t1699 = t414*t1691;
  t1817 = t1814*t532;
  t1842 = t1672 + t1699 + t1817;
  t1855 = t610*t1814;
  t1874 = t1660*t631;
  t1894 = t1691*t640;
  t1899 = t1855 + t1874 + t1894;
  t1909 = t702*t1660;
  t1911 = 0.340999127418*t218*t1691;
  t1956 = t1814*t720;
  t1982 = t1909 + t1911 + t1956;
  t1851 = 0.340999127418*t186*t1842;
  t1902 = t571*t1899;
  t1990 = t700*t1982;
  t1994 = t1851 + t1902 + t1990;
  t2031 = t766*t1842;
  t2045 = t772*t1899;
  t2062 = 0.340999127418*t186*t1982;
  t2071 = t2031 + t2045 + t2062;
  t2085 = t823*t1842;
  t2099 = t865*t1899;
  t2109 = t881*t1982;
  t2114 = t2085 + t2099 + t2109;
  t1130 = 0.803828*t1125;
  t1136 = t1124 + t1130;
  t2022 = t166*t1994;
  t2083 = t764*t2071;
  t2148 = t815*t2114;
  t2151 = t2022 + t2083 + t2148;
  t2159 = t950*t1994;
  t2167 = 0.340999127418*t807*t2071;
  t2171 = t969*t2114;
  t2177 = t2159 + t2167 + t2171;
  t2199 = 0.340999127418*t807*t1994;
  t2227 = t1032*t2071;
  t2264 = t1080*t2114;
  t2267 = t2199 + t2227 + t2264;
  t1258 = -0.175248972904*t42;
  t1260 = -0.553471*t1125;
  t1286 = t1258 + t1260;
  t1481 = -0.803828*t1125;
  t1497 = t1124 + t1481;
  t2153 = t82*t2151;
  t2181 = 0.340999127418*t926*t2177;
  t2275 = t997*t2267;
  t2301 = t2153 + t2181 + t2275;
  t1505 = -0.693671301908*t42;
  t1508 = 1. + t1505;
  t2305 = t1145*t2151;
  t2306 = t1175*t2177;
  t2315 = 0.340999127418*t926*t2267;
  t2318 = t2305 + t2306 + t2315;
  t1514 = 0.444895486988*t42;
  t1516 = -0.218018*t1125;
  t1520 = t1514 + t1516;
  t2335 = t1304*t2151;
  t2346 = t1343*t2177;
  t2349 = t1379*t2267;
  t2364 = t2335 + t2346 + t2349;
  t2497 = t381*t236*t291;
  t2513 = -1.*t381*t246*t319;
  t2532 = t2497 + t2513;
  t2552 = t381*t246*t236;
  t2557 = t381*t291*t319;
  t2560 = t2552 + t2557;
  t2667 = -1.*t480*t258;
  t2687 = t2532*t493;
  t2709 = t2560*t505;
  t2722 = t2667 + t2687 + t2709;
  t2542 = -0.340999127418*t231*t2532;
  t2579 = t338*t2560;
  t2583 = -1.*t258*t390;
  t2592 = t2542 + t2579 + t2583;
  t2617 = t422*t2532;
  t2618 = -0.340999127418*t231*t2560;
  t2623 = -1.*t258*t433;
  t2627 = t2617 + t2618 + t2623;
  t2597 = 0.340999127418*t218*t2592;
  t2659 = t414*t2627;
  t2725 = t2722*t532;
  t2726 = t2597 + t2659 + t2725;
  t2746 = t610*t2722;
  t2750 = t2592*t631;
  t2754 = t2627*t640;
  t2783 = t2746 + t2750 + t2754;
  t2804 = t702*t2592;
  t2811 = 0.340999127418*t218*t2627;
  t2813 = t2722*t720;
  t2820 = t2804 + t2811 + t2813;
  t2739 = 0.340999127418*t186*t2726;
  t2801 = t571*t2783;
  t2827 = t700*t2820;
  t2832 = t2739 + t2801 + t2827;
  t2849 = t766*t2726;
  t2854 = t772*t2783;
  t2863 = 0.340999127418*t186*t2820;
  t2878 = t2849 + t2854 + t2863;
  t2889 = t823*t2726;
  t2902 = t865*t2783;
  t2904 = t881*t2820;
  t2906 = t2889 + t2902 + t2904;
  t2846 = t166*t2832;
  t2883 = t764*t2878;
  t2916 = t815*t2906;
  t2923 = t2846 + t2883 + t2916;
  t2931 = t950*t2832;
  t2933 = 0.340999127418*t807*t2878;
  t2934 = t969*t2906;
  t2948 = t2931 + t2933 + t2934;
  t2973 = 0.340999127418*t807*t2832;
  t2980 = t1032*t2878;
  t2982 = t1080*t2906;
  t3007 = t2973 + t2980 + t2982;
  t2925 = t82*t2923;
  t2950 = 0.340999127418*t926*t2948;
  t3017 = t997*t3007;
  t3027 = t2925 + t2950 + t3017;
  t3055 = t1145*t2923;
  t3062 = t1175*t2948;
  t3067 = 0.340999127418*t926*t3007;
  t3096 = t3055 + t3062 + t3067;
  t3118 = t1304*t2923;
  t3119 = t1343*t2948;
  t3122 = t1379*t3007;
  t3123 = t3118 + t3119 + t3122;
  t1123 = t71*t1107;
  t1216 = t1136*t1214;
  t1440 = t1286*t1396;
  t1463 = t1123 + t1216 + t1440;
  t1498 = t1497*t1107;
  t1513 = t1508*t1214;
  t1532 = t1520*t1396;
  t1535 = t1498 + t1513 + t1532;
  t3286 = 0.553471*t1125;
  t3292 = t1258 + t3286;
  t3295 = 0.218018*t1125;
  t3303 = t1514 + t3295;
  t3315 = -0.353861996165*t42;
  t3319 = 1. + t3315;
  t2302 = t71*t2301;
  t2324 = t1136*t2318;
  t2382 = t1286*t2364;
  t2392 = t2302 + t2324 + t2382;
  t2416 = t1497*t2301;
  t2419 = t1508*t2318;
  t2431 = t1520*t2364;
  t2432 = t2416 + t2419 + t2431;
  t3032 = t71*t3027;
  t3113 = t1136*t3096;
  t3134 = t1286*t3123;
  t3184 = t3032 + t3113 + t3134;
  t3255 = t1497*t3027;
  t3262 = t1508*t3096;
  t3274 = t1520*t3123;
  t3281 = t3255 + t3262 + t3274;
  t3293 = t3292*t1107;
  t3304 = t3303*t1214;
  t3321 = t3319*t1396;
  t3326 = t3293 + t3304 + t3321;
  t3353 = t3292*t2301;
  t3363 = t3303*t2318;
  t3370 = t3319*t2364;
  t3381 = t3353 + t3363 + t3370;
  t3409 = t3292*t3027;
  t3410 = t3303*t3096;
  t3412 = t3319*t3123;
  t3416 = t3409 + t3410 + t3412;
  t3716 = 0.120666640478*t42;
  t3750 = -0.444895486988*t42;
  t3697 = 0.175248972904*t42;
  t3502 = -1.*t236;
  t3504 = 1. + t3502;
  t3506 = 0.091*t3504;
  t3522 = 0. + t3506;
  t3531 = 0.091*t319;
  t3535 = 0. + t3531;
  t3552 = -0.04500040093286238*t231;
  t3553 = 0.07877663122399998*t493;
  t3569 = 0.031030906668*t505;
  t3571 = 0. + t3552 + t3553 + t3569;
  t3580 = -3.2909349868922137e-7*var1[7];
  t3597 = 0.03103092645718495*t231;
  t3624 = -0.045000372235*t390;
  t3652 = t3580 + t3597 + t3624;
  t3661 = 1.296332362046933e-7*var1[7];
  t3663 = 0.07877668146182712*t231;
  t3668 = -0.045000372235*t433;
  t3669 = t3661 + t3663 + t3668;
  t3687 = 2.838136523330542e-8*var1[12];
  t3695 = 0.2845150083511607*t42;
  t3710 = t3697 + t1260;
  t3713 = 0.44503472296900004*t3710;
  t3726 = t3716 + t1130;
  t3731 = -0.5286755231320001*t3726;
  t3735 = t3687 + t3695 + t3713 + t3731;
  t3737 = -7.20503013377005e-8*var1[12];
  t3743 = -0.3667270384178674*t42;
  t3745 = t3716 + t1481;
  t3748 = 0.29871295412*t3745;
  t3764 = t3750 + t1516;
  t3766 = 0.44503472296900004*t3764;
  t3774 = t3737 + t3743 + t3748 + t3766;
  t3792 = -1.0464152525368286e-7*var1[12];
  t3795 = 0.15748087543254813*t42;
  t3806 = t3750 + t3295;
  t3809 = -0.5286755231320001*t3806;
  t3835 = t3697 + t3286;
  t3865 = 0.29871295412*t3835;
  t3867 = t3792 + t3795 + t3809 + t3865;
  t3872 = 0.06199697675299678*t926;
  t3873 = 0.324290713329*t1379;
  t3874 = -0.823260828522*t1343;
  t3879 = 0. + t3872 + t3873 + t3874;
  t3889 = 2.95447451120871e-8*var1[11];
  t3892 = -0.8232613535360118*t926;
  t3894 = 0.061996937216*t1145;
  t3895 = t3889 + t3892 + t3894;
  t3900 = 7.500378623168247e-8*var1[11];
  t3909 = 0.32429092013729516*t926;
  t3911 = 0.061996937216*t82;
  t3914 = t3900 + t3909 + t3911;
  t3916 = 2.281945176511838e-8*var1[10];
  t3919 = -0.5905366811997648*t807;
  t3921 = -0.262809976934*t969;
  t3934 = t3916 + t3919 + t3921;
  t3938 = 5.7930615939377813e-8*var1[10];
  t3940 = 0.23261833304643187*t807;
  t3941 = -0.262809976934*t1080;
  t3946 = t3938 + t3940 + t3941;
  t3966 = -0.26281014453449253*t807;
  t3967 = 0.23261818470000004*t764;
  t3968 = -0.5905363046000001*t166;
  t3971 = 0. + t3966 + t3967 + t3968;
  t3980 = 3.2909349868922137e-7*var1[8];
  t3983 = 0.055653945343889656*t218;
  t4001 = -0.045000372235*t532;
  t4009 = t3980 + t3983 + t4001;
  t4014 = -1.5981976069815686e-7*var1[9];
  t4021 = 0.08675267452931407*t186;
  t4022 = 0.039853013046*t772;
  t4032 = t4014 + t4021 + t4022;
  t4041 = -0.04500040093286238*t218;
  t4047 = -0.141285834136*t631;
  t4048 = 0.055653909852*t640;
  t4049 = 0. + t4041 + t4047 + t4048;
  t4057 = 0.039853038461262744*t186;
  t4063 = 0.086752619205*t823;
  t4069 = -0.22023459268999998*t881;
  t4070 = 0. + t4057 + t4063 + t4069;
  t4086 = 1.296332362046933e-7*var1[8];
  t4087 = -0.14128592423750855*t218;
  t4092 = -0.045000372235*t720;
  t4094 = t4086 + t4087 + t4092;
  t4103 = -6.295460977284962e-8*var1[9];
  t4105 = -0.22023473313910558*t186;
  t4108 = 0.039853013046*t571;
  t4110 = t4103 + t4105 + t4108;
  p_output1[0]=0.930418*t1463 + 0.366501*t1535;
  p_output1[1]=0.930418*t2392 + 0.366501*t2432;
  p_output1[2]=0.930418*t3184 + 0.366501*t3281;
  p_output1[3]=0.;
  p_output1[4]=-0.294604*t1463 + 0.747896*t1535 - 0.594863*t3326;
  p_output1[5]=-0.294604*t2392 + 0.747896*t2432 - 0.594863*t3381;
  p_output1[6]=-0.294604*t3184 + 0.747896*t3281 - 0.594863*t3416;
  p_output1[7]=0.;
  p_output1[8]=-0.218018*t1463 + 0.553471*t1535 + 0.803828*t3326;
  p_output1[9]=-0.218018*t2392 + 0.553471*t2432 + 0.803828*t3381;
  p_output1[10]=-0.218018*t3184 + 0.553471*t3281 + 0.803828*t3416;
  p_output1[11]=0.;
  p_output1[12]=0. + 0.402602*t1463 - 0.792413*t1535 + 0.061997*t3326 + t297*t3522 + t308*t3535 + t323*t3669 + t1107*t3735 + t3652*t377 + t1214*t3774 + t250*t3571*t381 + t1396*t3867 + t1088*t3914 + t403*t4094 + t4009*t453 + t4049*t510 + t4032*t534 + t4070*t647 + t4110*t736 + t3934*t746 + t3946*t784 + t3971*t897 + t3879*t900 + t3895*t980 + var1[0];
  p_output1[13]=0. + 0.402602*t2392 - 0.792413*t2432 + 0.061997*t3381 + t1569*t3522 + t1580*t3535 + t1631*t3652 + t1594*t3669 + t2301*t3735 + t2318*t3774 + t247*t3571*t381 + t2364*t3867 + t2151*t3879 + t2177*t3895 + t2267*t3914 + t1994*t3934 + t2071*t3946 + t2114*t3971 + t1691*t4009 + t1842*t4032 + t1814*t4049 + t1899*t4070 + t1660*t4094 + t1982*t4110 + var1[1];
  p_output1[14]=0. + 0.402602*t3184 - 0.792413*t3281 + 0.061997*t3416 - 1.*t258*t3571 + t2560*t3652 + t2532*t3669 + t3027*t3735 + t3096*t3774 + t291*t3522*t381 + t246*t3535*t381 + t3123*t3867 + t2923*t3879 + t2948*t3895 + t3007*t3914 + t2832*t3934 + t2878*t3946 + t2906*t3971 + t2627*t4009 + t2726*t4032 + t2722*t4049 + t2783*t4070 + t2592*t4094 + t2820*t4110 + var1[2];
  p_output1[15]=1.;
}



void T_LeftToeBottom_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
