/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:50:36 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_LeftToeBottomFront_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t483;
  double t270;
  double t508;
  double t284;
  double t545;
  double t1499;
  double t157;
  double t916;
  double t920;
  double t938;
  double t297;
  double t583;
  double t900;
  double t970;
  double t1163;
  double t1175;
  double t1253;
  double t2019;
  double t2020;
  double t2056;
  double t1744;
  double t1769;
  double t1773;
  double t1106;
  double t1873;
  double t1910;
  double t2682;
  double t2683;
  double t2689;
  double t2151;
  double t2170;
  double t1618;
  double t1623;
  double t1693;
  double t1727;
  double t2888;
  double t2900;
  double t2911;
  double t2913;
  double t2914;
  double t2941;
  double t2710;
  double t2712;
  double t2737;
  double t2743;
  double t2785;
  double t2786;
  double t2942;
  double t2823;
  double t2826;
  double t2829;
  double t2838;
  double t2839;
  double t2841;
  double t2642;
  double t2658;
  double t2662;
  double t2583;
  double t2817;
  double t2820;
  double t2822;
  double t2863;
  double t2943;
  double t2944;
  double t2945;
  double t2949;
  double t2952;
  double t2967;
  double t2995;
  double t3008;
  double t3015;
  double t3019;
  double t3024;
  double t3031;
  double t3032;
  double t3033;
  double t3044;
  double t3075;
  double t3080;
  double t3081;
  double t3084;
  double t3086;
  double t3087;
  double t3088;
  double t3104;
  double t3185;
  double t3190;
  double t3193;
  double t2950;
  double t2964;
  double t2966;
  double t3047;
  double t3048;
  double t3070;
  double t3117;
  double t3127;
  double t3150;
  double t3160;
  double t3164;
  double t3166;
  double t3168;
  double t3169;
  double t3170;
  double t3183;
  double t3202;
  double t3206;
  double t3221;
  double t3222;
  double t3223;
  double t3231;
  double t3240;
  double t3241;
  double t3245;
  double t3246;
  double t3266;
  double t3279;
  double t3281;
  double t2413;
  double t2414;
  double t2421;
  double t2483;
  double t2546;
  double t2586;
  double t2641;
  double t3128;
  double t3143;
  double t3144;
  double t3184;
  double t3194;
  double t3196;
  double t3257;
  double t3260;
  double t3287;
  double t3293;
  double t3297;
  double t3302;
  double t3304;
  double t3306;
  double t3308;
  double t3314;
  double t3321;
  double t3324;
  double t3325;
  double t3336;
  double t3337;
  double t3341;
  double t3344;
  double t3347;
  double t2580;
  double t2582;
  double t3261;
  double t3316;
  double t3318;
  double t3319;
  double t3352;
  double t3353;
  double t3364;
  double t3369;
  double t3377;
  double t3381;
  double t3384;
  double t3385;
  double t3394;
  double t3398;
  double t2478;
  double t3404;
  double t3406;
  double t3409;
  double t3416;
  double t3418;
  double t3420;
  double t3425;
  double t3427;
  double t3429;
  double t3437;
  double t3455;
  double t3356;
  double t3468;
  double t3459;
  double t3552;
  double t3491;
  double t3527;
  double t3588;
  double t3359;
  double t3547;
  double t2486;
  double t190;
  double t199;
  double t260;
  double t267;
  double t1026;
  double t1042;
  double t1482;
  double t1635;
  double t1728;
  double t1733;
  double t3877;
  double t3878;
  double t3882;
  double t3869;
  double t3870;
  double t3872;
  double t1842;
  double t1865;
  double t1923;
  double t1949;
  double t2062;
  double t2146;
  double t2410;
  double t2411;
  double t2488;
  double t3905;
  double t3910;
  double t3911;
  double t3890;
  double t3891;
  double t3898;
  double t3947;
  double t3961;
  double t3963;
  double t3964;
  double t3914;
  double t3919;
  double t3921;
  double t3926;
  double t3935;
  double t3937;
  double t3941;
  double t3942;
  double t3929;
  double t3944;
  double t3967;
  double t3970;
  double t3972;
  double t3974;
  double t3977;
  double t3978;
  double t3980;
  double t3981;
  double t3986;
  double t3987;
  double t3971;
  double t3979;
  double t3988;
  double t3989;
  double t3994;
  double t3995;
  double t3996;
  double t3999;
  double t4003;
  double t4005;
  double t4019;
  double t4023;
  double t3361;
  double t3992;
  double t4000;
  double t4025;
  double t4028;
  double t4031;
  double t4037;
  double t4039;
  double t4041;
  double t4049;
  double t4052;
  double t4056;
  double t4059;
  double t3402;
  double t3403;
  double t3448;
  double t3449;
  double t4030;
  double t4043;
  double t4061;
  double t4062;
  double t3462;
  double t4074;
  double t4079;
  double t4080;
  double t4086;
  double t3470;
  double t4096;
  double t4098;
  double t4099;
  double t4100;
  double t3492;
  double t3515;
  double t3519;
  double t3537;
  double t3542;
  double t3546;
  double t3549;
  double t3551;
  double t3559;
  double t3562;
  double t3563;
  double t3573;
  double t3576;
  double t3579;
  double t3581;
  double t3594;
  double t3599;
  double t3603;
  double t3608;
  double t3610;
  double t3613;
  double t3614;
  double t3617;
  double t3618;
  double t3621;
  double t3625;
  double t3627;
  double t3629;
  double t3631;
  double t3640;
  double t3644;
  double t3645;
  double t3657;
  double t3679;
  double t3682;
  double t3684;
  double t3687;
  double t3701;
  double t3702;
  double t3711;
  double t3721;
  double t3732;
  double t3733;
  double t3742;
  double t3744;
  double t3755;
  double t3756;
  double t3760;
  double t3766;
  double t3771;
  double t3772;
  double t3773;
  double t3774;
  double t3776;
  double t3780;
  double t3781;
  double t3782;
  double t3793;
  double t3808;
  double t3810;
  double t3811;
  double t3815;
  double t3816;
  double t3818;
  double t3820;
  double t3826;
  double t3837;
  double t3839;
  double t3842;
  double t3851;
  double t3856;
  double t3857;
  double t3859;
  double t4194;
  double t4195;
  double t4196;
  double t4178;
  double t4179;
  double t4188;
  double t4228;
  double t4233;
  double t4242;
  double t4243;
  double t4198;
  double t4202;
  double t4207;
  double t4210;
  double t4215;
  double t4217;
  double t4218;
  double t4222;
  double t4212;
  double t4225;
  double t4244;
  double t4252;
  double t4258;
  double t4261;
  double t4262;
  double t4265;
  double t4269;
  double t4270;
  double t4271;
  double t4272;
  double t4256;
  double t4267;
  double t4273;
  double t4274;
  double t4278;
  double t4280;
  double t4282;
  double t4284;
  double t4287;
  double t4289;
  double t4293;
  double t4295;
  double t4276;
  double t4285;
  double t4296;
  double t4300;
  double t4305;
  double t4307;
  double t4310;
  double t4314;
  double t4317;
  double t4320;
  double t4322;
  double t4326;
  double t4303;
  double t4315;
  double t4327;
  double t4330;
  double t4339;
  double t4343;
  double t4344;
  double t4346;
  double t4349;
  double t4350;
  double t4351;
  double t4353;
  t483 = Cos(var1[3]);
  t270 = Cos(var1[5]);
  t508 = Sin(var1[4]);
  t284 = Sin(var1[3]);
  t545 = Sin(var1[5]);
  t1499 = Sin(var1[7]);
  t157 = Cos(var1[6]);
  t916 = t483*t270*t508;
  t920 = t284*t545;
  t938 = t916 + t920;
  t297 = -1.*t270*t284;
  t583 = t483*t508*t545;
  t900 = t297 + t583;
  t970 = Sin(var1[6]);
  t1163 = Cos(var1[7]);
  t1175 = -1.*t1163;
  t1253 = 1. + t1175;
  t2019 = t157*t900;
  t2020 = -1.*t938*t970;
  t2056 = t2019 + t2020;
  t1744 = t157*t938;
  t1769 = t900*t970;
  t1773 = t1744 + t1769;
  t1106 = Cos(var1[4]);
  t1873 = 0.366501*t1499;
  t1910 = 0. + t1873;
  t2682 = Cos(var1[8]);
  t2683 = -1.*t2682;
  t2689 = 1. + t2683;
  t2151 = 0.930418*t1499;
  t2170 = 0. + t2151;
  t1618 = -0.930418*t1499;
  t1623 = 0. + t1618;
  t1693 = -0.366501*t1499;
  t1727 = 0. + t1693;
  t2888 = -1.000000637725*t1253;
  t2900 = 1. + t2888;
  t2911 = t483*t1106*t2900;
  t2913 = t2056*t1623;
  t2914 = t1773*t1727;
  t2941 = t2911 + t2913 + t2914;
  t2710 = -0.340999127418*t1253*t2056;
  t2712 = -0.134322983001*t1253;
  t2737 = 1. + t2712;
  t2743 = t2737*t1773;
  t2785 = t483*t1106*t1910;
  t2786 = t2710 + t2743 + t2785;
  t2942 = Sin(var1[8]);
  t2823 = -0.8656776547239999*t1253;
  t2826 = 1. + t2823;
  t2829 = t2826*t2056;
  t2838 = -0.340999127418*t1253*t1773;
  t2839 = t483*t1106*t2170;
  t2841 = t2829 + t2838 + t2839;
  t2642 = Cos(var1[9]);
  t2658 = -1.*t2642;
  t2662 = 1. + t2658;
  t2583 = Sin(var1[10]);
  t2817 = 0.340999127418*t2689*t2786;
  t2820 = -0.134322983001*t2689;
  t2822 = 1. + t2820;
  t2863 = t2822*t2841;
  t2943 = -0.366501*t2942;
  t2944 = 0. + t2943;
  t2945 = t2941*t2944;
  t2949 = t2817 + t2863 + t2945;
  t2952 = Sin(var1[9]);
  t2967 = -1.000000637725*t2689;
  t2995 = 1. + t2967;
  t3008 = t2995*t2941;
  t3015 = -0.930418*t2942;
  t3019 = 0. + t3015;
  t3024 = t2786*t3019;
  t3031 = 0.366501*t2942;
  t3032 = 0. + t3031;
  t3033 = t2841*t3032;
  t3044 = t3008 + t3024 + t3033;
  t3075 = -0.8656776547239999*t2689;
  t3080 = 1. + t3075;
  t3081 = t3080*t2786;
  t3084 = 0.340999127418*t2689*t2841;
  t3086 = 0.930418*t2942;
  t3087 = 0. + t3086;
  t3088 = t2941*t3087;
  t3104 = t3081 + t3084 + t3088;
  t3185 = Cos(var1[10]);
  t3190 = -1.*t3185;
  t3193 = 1. + t3190;
  t2950 = 0.340999127418*t2662*t2949;
  t2964 = -0.930418*t2952;
  t2966 = 0. + t2964;
  t3047 = t2966*t3044;
  t3048 = -0.8656776547239999*t2662;
  t3070 = 1. + t3048;
  t3117 = t3070*t3104;
  t3127 = t2950 + t3047 + t3117;
  t3150 = -0.134322983001*t2662;
  t3160 = 1. + t3150;
  t3164 = t3160*t2949;
  t3166 = 0.366501*t2952;
  t3168 = 0. + t3166;
  t3169 = t3168*t3044;
  t3170 = 0.340999127418*t2662*t3104;
  t3183 = t3164 + t3169 + t3170;
  t3202 = -0.366501*t2952;
  t3206 = 0. + t3202;
  t3221 = t3206*t2949;
  t3222 = -1.000000637725*t2662;
  t3223 = 1. + t3222;
  t3231 = t3223*t3044;
  t3240 = 0.930418*t2952;
  t3241 = 0. + t3240;
  t3245 = t3241*t3104;
  t3246 = t3221 + t3231 + t3245;
  t3266 = Cos(var1[11]);
  t3279 = -1.*t3266;
  t3281 = 1. + t3279;
  t2413 = Cos(var1[12]);
  t2414 = -1.*t2413;
  t2421 = 1. + t2414;
  t2483 = Sin(var1[12]);
  t2546 = Sin(var1[11]);
  t2586 = 0.930418*t2583;
  t2641 = 0. + t2586;
  t3128 = t2641*t3127;
  t3143 = -0.366501*t2583;
  t3144 = 0. + t3143;
  t3184 = t3144*t3183;
  t3194 = -1.000000637725*t3193;
  t3196 = 1. + t3194;
  t3257 = t3196*t3246;
  t3260 = t3128 + t3184 + t3257;
  t3287 = -0.8656776547239999*t3193;
  t3293 = 1. + t3287;
  t3297 = t3293*t3127;
  t3302 = 0.340999127418*t3193*t3183;
  t3304 = -0.930418*t2583;
  t3306 = 0. + t3304;
  t3308 = t3306*t3246;
  t3314 = t3297 + t3302 + t3308;
  t3321 = 0.340999127418*t3193*t3127;
  t3324 = -0.134322983001*t3193;
  t3325 = 1. + t3324;
  t3336 = t3325*t3183;
  t3337 = 0.366501*t2583;
  t3341 = 0. + t3337;
  t3344 = t3341*t3246;
  t3347 = t3321 + t3336 + t3344;
  t2580 = 0.366501*t2546;
  t2582 = 0. + t2580;
  t3261 = t2582*t3260;
  t3316 = 0.340999127418*t3281*t3314;
  t3318 = -0.134322983001*t3281;
  t3319 = 1. + t3318;
  t3352 = t3319*t3347;
  t3353 = t3261 + t3316 + t3352;
  t3364 = -0.930418*t2546;
  t3369 = 0. + t3364;
  t3377 = t3369*t3260;
  t3381 = -0.8656776547239999*t3281;
  t3384 = 1. + t3381;
  t3385 = t3384*t3314;
  t3394 = 0.340999127418*t3281*t3347;
  t3398 = t3377 + t3385 + t3394;
  t2478 = -0.175248972904*t2421;
  t3404 = -1.000000637725*t3281;
  t3406 = 1. + t3404;
  t3409 = t3406*t3260;
  t3416 = 0.930418*t2546;
  t3418 = 0. + t3416;
  t3420 = t3418*t3314;
  t3425 = -0.366501*t2546;
  t3427 = 0. + t3425;
  t3429 = t3427*t3347;
  t3437 = t3409 + t3420 + t3429;
  t3455 = -0.120666640478*t2421;
  t3356 = 0.444895486988*t2421;
  t3468 = -0.553471*t2483;
  t3459 = 0.803828*t2483;
  t3552 = 0.120666640478*t2421;
  t3491 = -0.803828*t2483;
  t3527 = -0.218018*t2483;
  t3588 = -0.444895486988*t2421;
  t3359 = 0.218018*t2483;
  t3547 = 0.175248972904*t2421;
  t2486 = 0.553471*t2483;
  t190 = -1.*t157;
  t199 = 1. + t190;
  t260 = 0.091*t199;
  t267 = 0. + t260;
  t1026 = 0.091*t970;
  t1042 = 0. + t1026;
  t1482 = -0.04500040093286238*t1253;
  t1635 = 0.07877663122399998*t1623;
  t1728 = 0.031030906668*t1727;
  t1733 = 0. + t1482 + t1635 + t1728;
  t3877 = t270*t284*t508;
  t3878 = -1.*t483*t545;
  t3882 = t3877 + t3878;
  t3869 = t483*t270;
  t3870 = t284*t508*t545;
  t3872 = t3869 + t3870;
  t1842 = -3.2909349868922137e-7*var1[7];
  t1865 = 0.03103092645718495*t1253;
  t1923 = -0.045000372235*t1910;
  t1949 = t1842 + t1865 + t1923;
  t2062 = 1.296332362046933e-7*var1[7];
  t2146 = 0.07877668146182712*t1253;
  t2410 = -0.045000372235*t2170;
  t2411 = t2062 + t2146 + t2410;
  t2488 = t2478 + t2486;
  t3905 = t157*t3872;
  t3910 = -1.*t3882*t970;
  t3911 = t3905 + t3910;
  t3890 = t157*t3882;
  t3891 = t3872*t970;
  t3898 = t3890 + t3891;
  t3947 = t1106*t2900*t284;
  t3961 = t3911*t1623;
  t3963 = t3898*t1727;
  t3964 = t3947 + t3961 + t3963;
  t3914 = -0.340999127418*t1253*t3911;
  t3919 = t2737*t3898;
  t3921 = t1106*t284*t1910;
  t3926 = t3914 + t3919 + t3921;
  t3935 = t2826*t3911;
  t3937 = -0.340999127418*t1253*t3898;
  t3941 = t1106*t284*t2170;
  t3942 = t3935 + t3937 + t3941;
  t3929 = 0.340999127418*t2689*t3926;
  t3944 = t2822*t3942;
  t3967 = t3964*t2944;
  t3970 = t3929 + t3944 + t3967;
  t3972 = t2995*t3964;
  t3974 = t3926*t3019;
  t3977 = t3942*t3032;
  t3978 = t3972 + t3974 + t3977;
  t3980 = t3080*t3926;
  t3981 = 0.340999127418*t2689*t3942;
  t3986 = t3964*t3087;
  t3987 = t3980 + t3981 + t3986;
  t3971 = 0.340999127418*t2662*t3970;
  t3979 = t2966*t3978;
  t3988 = t3070*t3987;
  t3989 = t3971 + t3979 + t3988;
  t3994 = t3160*t3970;
  t3995 = t3168*t3978;
  t3996 = 0.340999127418*t2662*t3987;
  t3999 = t3994 + t3995 + t3996;
  t4003 = t3206*t3970;
  t4005 = t3223*t3978;
  t4019 = t3241*t3987;
  t4023 = t4003 + t4005 + t4019;
  t3361 = t3356 + t3359;
  t3992 = t2641*t3989;
  t4000 = t3144*t3999;
  t4025 = t3196*t4023;
  t4028 = t3992 + t4000 + t4025;
  t4031 = t3293*t3989;
  t4037 = 0.340999127418*t3193*t3999;
  t4039 = t3306*t4023;
  t4041 = t4031 + t4037 + t4039;
  t4049 = 0.340999127418*t3193*t3989;
  t4052 = t3325*t3999;
  t4056 = t3341*t4023;
  t4059 = t4049 + t4052 + t4056;
  t3402 = -0.353861996165*t2421;
  t3403 = 1. + t3402;
  t3448 = -0.952469601425*t2421;
  t3449 = 1. + t3448;
  t4030 = t2582*t4028;
  t4043 = 0.340999127418*t3281*t4041;
  t4061 = t3319*t4059;
  t4062 = t4030 + t4043 + t4061;
  t3462 = t3455 + t3459;
  t4074 = t3369*t4028;
  t4079 = t3384*t4041;
  t4080 = 0.340999127418*t3281*t4059;
  t4086 = t4074 + t4079 + t4080;
  t3470 = t2478 + t3468;
  t4096 = t3406*t4028;
  t4098 = t3418*t4041;
  t4099 = t3427*t4059;
  t4100 = t4096 + t4098 + t4099;
  t3492 = t3455 + t3491;
  t3515 = -0.693671301908*t2421;
  t3519 = 1. + t3515;
  t3537 = t3356 + t3527;
  t3542 = 2.838136523330542e-8*var1[12];
  t3546 = 0.2845150083511607*t2421;
  t3549 = t3547 + t3468;
  t3551 = 0.44503472296900004*t3549;
  t3559 = t3552 + t3459;
  t3562 = -0.5286755231320001*t3559;
  t3563 = t3542 + t3546 + t3551 + t3562;
  t3573 = -7.20503013377005e-8*var1[12];
  t3576 = -0.3667270384178674*t2421;
  t3579 = t3552 + t3491;
  t3581 = 0.29871295412*t3579;
  t3594 = t3588 + t3527;
  t3599 = 0.44503472296900004*t3594;
  t3603 = t3573 + t3576 + t3581 + t3599;
  t3608 = -1.0464152525368286e-7*var1[12];
  t3610 = 0.15748087543254813*t2421;
  t3613 = t3588 + t3359;
  t3614 = -0.5286755231320001*t3613;
  t3617 = t3547 + t2486;
  t3618 = 0.29871295412*t3617;
  t3621 = t3608 + t3610 + t3614 + t3618;
  t3625 = 0.06199697675299678*t3281;
  t3627 = 0.324290713329*t3427;
  t3629 = -0.823260828522*t3418;
  t3631 = 0. + t3625 + t3627 + t3629;
  t3640 = 2.95447451120871e-8*var1[11];
  t3644 = -0.8232613535360118*t3281;
  t3645 = 0.061996937216*t3369;
  t3657 = t3640 + t3644 + t3645;
  t3679 = 7.500378623168247e-8*var1[11];
  t3682 = 0.32429092013729516*t3281;
  t3684 = 0.061996937216*t2582;
  t3687 = t3679 + t3682 + t3684;
  t3701 = 2.281945176511838e-8*var1[10];
  t3702 = -0.5905366811997648*t3193;
  t3711 = -0.262809976934*t3306;
  t3721 = t3701 + t3702 + t3711;
  t3732 = 5.7930615939377813e-8*var1[10];
  t3733 = 0.23261833304643187*t3193;
  t3742 = -0.262809976934*t3341;
  t3744 = t3732 + t3733 + t3742;
  t3755 = -0.26281014453449253*t3193;
  t3756 = 0.23261818470000004*t3144;
  t3760 = -0.5905363046000001*t2641;
  t3766 = 0. + t3755 + t3756 + t3760;
  t3771 = 3.2909349868922137e-7*var1[8];
  t3772 = 0.055653945343889656*t2689;
  t3773 = -0.045000372235*t2944;
  t3774 = t3771 + t3772 + t3773;
  t3776 = -1.5981976069815686e-7*var1[9];
  t3780 = 0.08675267452931407*t2662;
  t3781 = 0.039853013046*t3168;
  t3782 = t3776 + t3780 + t3781;
  t3793 = -0.04500040093286238*t2689;
  t3808 = -0.141285834136*t3019;
  t3810 = 0.055653909852*t3032;
  t3811 = 0. + t3793 + t3808 + t3810;
  t3815 = 0.039853038461262744*t2662;
  t3816 = 0.086752619205*t3206;
  t3818 = -0.22023459268999998*t3241;
  t3820 = 0. + t3815 + t3816 + t3818;
  t3826 = 1.296332362046933e-7*var1[8];
  t3837 = -0.14128592423750855*t2689;
  t3839 = -0.045000372235*t3087;
  t3842 = t3826 + t3837 + t3839;
  t3851 = -6.295460977284962e-8*var1[9];
  t3856 = -0.22023473313910558*t2662;
  t3857 = 0.039853013046*t2966;
  t3859 = t3851 + t3856 + t3857;
  t4194 = t1106*t157*t545;
  t4195 = -1.*t1106*t270*t970;
  t4196 = t4194 + t4195;
  t4178 = t1106*t270*t157;
  t4179 = t1106*t545*t970;
  t4188 = t4178 + t4179;
  t4228 = -1.*t2900*t508;
  t4233 = t4196*t1623;
  t4242 = t4188*t1727;
  t4243 = t4228 + t4233 + t4242;
  t4198 = -0.340999127418*t1253*t4196;
  t4202 = t2737*t4188;
  t4207 = -1.*t508*t1910;
  t4210 = t4198 + t4202 + t4207;
  t4215 = t2826*t4196;
  t4217 = -0.340999127418*t1253*t4188;
  t4218 = -1.*t508*t2170;
  t4222 = t4215 + t4217 + t4218;
  t4212 = 0.340999127418*t2689*t4210;
  t4225 = t2822*t4222;
  t4244 = t4243*t2944;
  t4252 = t4212 + t4225 + t4244;
  t4258 = t2995*t4243;
  t4261 = t4210*t3019;
  t4262 = t4222*t3032;
  t4265 = t4258 + t4261 + t4262;
  t4269 = t3080*t4210;
  t4270 = 0.340999127418*t2689*t4222;
  t4271 = t4243*t3087;
  t4272 = t4269 + t4270 + t4271;
  t4256 = 0.340999127418*t2662*t4252;
  t4267 = t2966*t4265;
  t4273 = t3070*t4272;
  t4274 = t4256 + t4267 + t4273;
  t4278 = t3160*t4252;
  t4280 = t3168*t4265;
  t4282 = 0.340999127418*t2662*t4272;
  t4284 = t4278 + t4280 + t4282;
  t4287 = t3206*t4252;
  t4289 = t3223*t4265;
  t4293 = t3241*t4272;
  t4295 = t4287 + t4289 + t4293;
  t4276 = t2641*t4274;
  t4285 = t3144*t4284;
  t4296 = t3196*t4295;
  t4300 = t4276 + t4285 + t4296;
  t4305 = t3293*t4274;
  t4307 = 0.340999127418*t3193*t4284;
  t4310 = t3306*t4295;
  t4314 = t4305 + t4307 + t4310;
  t4317 = 0.340999127418*t3193*t4274;
  t4320 = t3325*t4284;
  t4322 = t3341*t4295;
  t4326 = t4317 + t4320 + t4322;
  t4303 = t2582*t4300;
  t4315 = 0.340999127418*t3281*t4314;
  t4327 = t3319*t4326;
  t4330 = t4303 + t4315 + t4327;
  t4339 = t3369*t4300;
  t4343 = t3384*t4314;
  t4344 = 0.340999127418*t3281*t4326;
  t4346 = t4339 + t4343 + t4344;
  t4349 = t3406*t4300;
  t4350 = t3418*t4314;
  t4351 = t3427*t4326;
  t4353 = t4349 + t4350 + t4351;
  p_output1[0]=0. + t1773*t1949 + t2056*t2411 + 0.061997*(t2488*t3353 + t3361*t3398 + t3403*t3437) + 0.481688*(t3353*t3449 + t3398*t3462 + t3437*t3470) - 0.76126*(t3353*t3492 + t3398*t3519 + t3437*t3537) + t3353*t3563 + t3398*t3603 + t3437*t3621 + t3260*t3631 + t3314*t3657 + t3347*t3687 + t3127*t3721 + t3183*t3744 + t3246*t3766 + t2841*t3774 + t2949*t3782 + t2941*t3811 + t3044*t3820 + t2786*t3842 + t3104*t3859 + t1106*t1733*t483 + t267*t900 + t1042*t938 + var1[0];
  p_output1[1]=0. + t1106*t1733*t284 + t267*t3872 + t1042*t3882 + t1949*t3898 + t2411*t3911 + t3842*t3926 + t3774*t3942 + t3811*t3964 + t3782*t3970 + t3820*t3978 + t3859*t3987 + t3721*t3989 + t3744*t3999 + t3766*t4023 + t3631*t4028 + t3657*t4041 + t3687*t4059 + t3563*t4062 + t3603*t4086 + t3621*t4100 + 0.061997*(t2488*t4062 + t3361*t4086 + t3403*t4100) + 0.481688*(t3449*t4062 + t3462*t4086 + t3470*t4100) - 0.76126*(t3492*t4062 + t3519*t4086 + t3537*t4100) + var1[1];
  p_output1[2]=0. + t1042*t1106*t270 + t1949*t4188 + t2411*t4196 + t3842*t4210 + t3774*t4222 + t3811*t4243 + t3782*t4252 + t3820*t4265 + t3859*t4272 + t3721*t4274 + t3744*t4284 + t3766*t4295 + t3631*t4300 + t3657*t4314 + t3687*t4326 + t3563*t4330 + t3603*t4346 + t3621*t4353 + 0.061997*(t2488*t4330 + t3361*t4346 + t3403*t4353) + 0.481688*(t3449*t4330 + t3462*t4346 + t3470*t4353) - 0.76126*(t3492*t4330 + t3519*t4346 + t3537*t4353) - 1.*t1733*t508 + t1106*t267*t545 + var1[2];
}



void p_LeftToeBottomFront_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
