/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:42:46 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "p_RightToeBottomBack_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t714;
  double t315;
  double t1591;
  double t1794;
  double t1664;
  double t1909;
  double t545;
  double t688;
  double t691;
  double t1435;
  double t1716;
  double t1974;
  double t1993;
  double t2079;
  double t2216;
  double t2281;
  double t2283;
  double t544;
  double t2502;
  double t2509;
  double t2465;
  double t2467;
  double t2474;
  double t2520;
  double t2522;
  double t2542;
  double t2586;
  double t2587;
  double t2595;
  double t2626;
  double t2354;
  double t2358;
  double t735;
  double t793;
  double t996;
  double t1008;
  double t3032;
  double t2926;
  double t2929;
  double t2696;
  double t2709;
  double t2710;
  double t2714;
  double t2720;
  double t2722;
  double t2898;
  double t2899;
  double t2822;
  double t2823;
  double t2826;
  double t2834;
  double t2868;
  double t2869;
  double t2936;
  double t2940;
  double t2958;
  double t2994;
  double t3002;
  double t3017;
  double t3026;
  double t3028;
  double t3030;
  double t2630;
  double t2681;
  double t2803;
  double t2818;
  double t3192;
  double t3194;
  double t3087;
  double t3088;
  double t3089;
  double t3090;
  double t3092;
  double t3094;
  double t3145;
  double t3152;
  double t3154;
  double t3170;
  double t3172;
  double t3174;
  double t3206;
  double t3224;
  double t3228;
  double t3229;
  double t3233;
  double t3234;
  double t3245;
  double t3249;
  double t3250;
  double t3267;
  double t3106;
  double t3112;
  double t3033;
  double t3034;
  double t3044;
  double t3069;
  double t3431;
  double t3376;
  double t3379;
  double t3296;
  double t3299;
  double t3300;
  double t3301;
  double t3302;
  double t3307;
  double t3357;
  double t3358;
  double t3337;
  double t3338;
  double t3339;
  double t3341;
  double t3344;
  double t3345;
  double t3387;
  double t3388;
  double t3389;
  double t3390;
  double t3398;
  double t3402;
  double t3413;
  double t3421;
  double t3422;
  double t3271;
  double t3280;
  double t3319;
  double t3320;
  double t3590;
  double t3592;
  double t3593;
  double t3597;
  double t3544;
  double t3547;
  double t3471;
  double t3475;
  double t3488;
  double t3489;
  double t3503;
  double t3506;
  double t3525;
  double t3527;
  double t3530;
  double t3531;
  double t3535;
  double t3538;
  double t3550;
  double t3554;
  double t3555;
  double t3563;
  double t3567;
  double t3570;
  double t3596;
  double t3520;
  double t3521;
  double t3606;
  double t3646;
  double t3456;
  double t3466;
  double t3432;
  double t3442;
  double t3714;
  double t3618;
  double t3623;
  double t3624;
  double t3629;
  double t3632;
  double t3633;
  double t3725;
  double t3681;
  double t3682;
  double t3703;
  double t3705;
  double t3706;
  double t3708;
  double t3734;
  double t3737;
  double t3742;
  double t3743;
  double t3745;
  double t3754;
  double t3661;
  double t3769;
  double t3647;
  double t3784;
  double t3601;
  double t3757;
  double t3607;
  double t693;
  double t993;
  double t1166;
  double t1235;
  double t1516;
  double t1529;
  double t2145;
  double t2167;
  double t2212;
  double t2214;
  double t2315;
  double t2325;
  double t2419;
  double t2432;
  double t3829;
  double t3832;
  double t3833;
  double t3837;
  double t3839;
  double t3840;
  double t2478;
  double t2498;
  double t2515;
  double t2519;
  double t2584;
  double t2615;
  double t2683;
  double t2686;
  double t3846;
  double t3847;
  double t3849;
  double t3856;
  double t3857;
  double t3858;
  double t2758;
  double t2759;
  double t2820;
  double t2821;
  double t2890;
  double t2902;
  double t2931;
  double t2932;
  double t3031;
  double t3041;
  double t3078;
  double t3081;
  double t3862;
  double t3866;
  double t3870;
  double t3872;
  double t3875;
  double t3878;
  double t3879;
  double t3882;
  double t3885;
  double t3888;
  double t3892;
  double t3893;
  double t3097;
  double t3104;
  double t3123;
  double t3144;
  double t3184;
  double t3185;
  double t3195;
  double t3203;
  double t3242;
  double t3257;
  double t3292;
  double t3294;
  double t3896;
  double t3899;
  double t3902;
  double t3903;
  double t3911;
  double t3912;
  double t3914;
  double t3919;
  double t3927;
  double t3930;
  double t3932;
  double t3933;
  double t3317;
  double t3318;
  double t3324;
  double t3336;
  double t3354;
  double t3375;
  double t3382;
  double t3385;
  double t3425;
  double t3453;
  double t3467;
  double t3469;
  double t3936;
  double t3940;
  double t3942;
  double t3945;
  double t3958;
  double t3959;
  double t3963;
  double t3964;
  double t3967;
  double t3968;
  double t3969;
  double t3970;
  double t3512;
  double t3518;
  double t3522;
  double t3524;
  double t3540;
  double t3543;
  double t3548;
  double t3549;
  double t3581;
  double t3595;
  double t3602;
  double t3604;
  double t3613;
  double t3614;
  double t3616;
  double t3973;
  double t3978;
  double t3979;
  double t3985;
  double t3987;
  double t3989;
  double t3990;
  double t3993;
  double t4002;
  double t4007;
  double t4012;
  double t4014;
  double t3641;
  double t3645;
  double t3654;
  double t3655;
  double t3672;
  double t3673;
  double t3678;
  double t3712;
  double t3713;
  double t3717;
  double t3722;
  double t3727;
  double t3728;
  double t3731;
  double t3765;
  double t4024;
  double t4025;
  double t4026;
  double t4029;
  double t3770;
  double t4031;
  double t4032;
  double t4033;
  double t4038;
  double t3772;
  double t3776;
  double t4049;
  double t4056;
  double t4057;
  double t4065;
  double t3787;
  double t3791;
  double t3793;
  double t3795;
  double t3807;
  double t3808;
  double t3811;
  double t3817;
  double t4147;
  double t4152;
  double t4155;
  double t4166;
  double t4168;
  double t4173;
  double t4191;
  double t4197;
  double t4204;
  double t4207;
  double t4210;
  double t4213;
  double t4214;
  double t4216;
  double t4222;
  double t4226;
  double t4229;
  double t4230;
  double t4237;
  double t4239;
  double t4240;
  double t4241;
  double t4250;
  double t4254;
  double t4267;
  double t4270;
  double t4285;
  double t4289;
  double t4293;
  double t4300;
  double t4307;
  double t4309;
  double t4310;
  double t4314;
  double t4321;
  double t4325;
  double t4326;
  double t4327;
  double t4337;
  double t4339;
  double t4344;
  double t4345;
  double t4348;
  double t4349;
  double t4350;
  double t4351;
  double t4353;
  double t4354;
  double t4355;
  double t4356;
  double t4358;
  double t4359;
  double t4360;
  double t4363;
  double t4367;
  double t4374;
  double t4379;
  double t4381;
  double t4387;
  double t4389;
  double t4390;
  double t4391;
  double t4401;
  double t4404;
  double t4406;
  double t4410;
  t714 = Sin(var1[14]);
  t315 = Cos(var1[3]);
  t1591 = Cos(var1[5]);
  t1794 = Sin(var1[3]);
  t1664 = Sin(var1[4]);
  t1909 = Sin(var1[5]);
  t545 = Cos(var1[14]);
  t688 = -1.*t545;
  t691 = 1. + t688;
  t1435 = Sin(var1[13]);
  t1716 = t315*t1591*t1664;
  t1974 = t1794*t1909;
  t1993 = t1716 + t1974;
  t2079 = Cos(var1[13]);
  t2216 = -1.*t1591*t1794;
  t2281 = t315*t1664*t1909;
  t2283 = t2216 + t2281;
  t544 = Cos(var1[4]);
  t2502 = -0.366501*t714;
  t2509 = 0. + t2502;
  t2465 = -1.*t1435*t1993;
  t2467 = t2079*t2283;
  t2474 = t2465 + t2467;
  t2520 = t2079*t1993;
  t2522 = t1435*t2283;
  t2542 = t2520 + t2522;
  t2586 = Cos(var1[15]);
  t2587 = -1.*t2586;
  t2595 = 1. + t2587;
  t2626 = Sin(var1[15]);
  t2354 = 0.930418*t714;
  t2358 = 0. + t2354;
  t735 = -0.930418*t714;
  t793 = 0. + t735;
  t996 = 0.366501*t714;
  t1008 = 0. + t996;
  t3032 = Sin(var1[16]);
  t2926 = 0.930418*t2626;
  t2929 = 0. + t2926;
  t2696 = t315*t544*t2509;
  t2709 = 0.340999127418*t691*t2474;
  t2710 = -0.134322983001*t691;
  t2714 = 1. + t2710;
  t2720 = t2714*t2542;
  t2722 = t2696 + t2709 + t2720;
  t2898 = 0.366501*t2626;
  t2899 = 0. + t2898;
  t2822 = t315*t544*t2358;
  t2823 = -0.8656776547239999*t691;
  t2826 = 1. + t2823;
  t2834 = t2826*t2474;
  t2868 = 0.340999127418*t691*t2542;
  t2869 = t2822 + t2834 + t2868;
  t2936 = -1.000000637725*t691;
  t2940 = 1. + t2936;
  t2958 = t2940*t315*t544;
  t2994 = t793*t2474;
  t3002 = t1008*t2542;
  t3017 = t2958 + t2994 + t3002;
  t3026 = Cos(var1[16]);
  t3028 = -1.*t3026;
  t3030 = 1. + t3028;
  t2630 = -0.930418*t2626;
  t2681 = 0. + t2630;
  t2803 = -0.366501*t2626;
  t2818 = 0. + t2803;
  t3192 = 0.366501*t3032;
  t3194 = 0. + t3192;
  t3087 = t2929*t2722;
  t3088 = t2899*t2869;
  t3089 = -1.000000637725*t2595;
  t3090 = 1. + t3089;
  t3092 = t3090*t3017;
  t3094 = t3087 + t3088 + t3092;
  t3145 = -0.8656776547239999*t2595;
  t3152 = 1. + t3145;
  t3154 = t3152*t2722;
  t3170 = -0.340999127418*t2595*t2869;
  t3172 = t2681*t3017;
  t3174 = t3154 + t3170 + t3172;
  t3206 = -0.340999127418*t2595*t2722;
  t3224 = -0.134322983001*t2595;
  t3228 = 1. + t3224;
  t3229 = t3228*t2869;
  t3233 = t2818*t3017;
  t3234 = t3206 + t3229 + t3233;
  t3245 = Cos(var1[17]);
  t3249 = -1.*t3245;
  t3250 = 1. + t3249;
  t3267 = Sin(var1[17]);
  t3106 = 0.930418*t3032;
  t3112 = 0. + t3106;
  t3033 = -0.930418*t3032;
  t3034 = 0. + t3033;
  t3044 = -0.366501*t3032;
  t3069 = 0. + t3044;
  t3431 = Sin(var1[18]);
  t3376 = -0.366501*t3267;
  t3379 = 0. + t3376;
  t3296 = t3194*t3094;
  t3299 = -0.340999127418*t3030*t3174;
  t3300 = -0.134322983001*t3030;
  t3301 = 1. + t3300;
  t3302 = t3301*t3234;
  t3307 = t3296 + t3299 + t3302;
  t3357 = -0.930418*t3267;
  t3358 = 0. + t3357;
  t3337 = t3112*t3094;
  t3338 = -0.8656776547239999*t3030;
  t3339 = 1. + t3338;
  t3341 = t3339*t3174;
  t3344 = -0.340999127418*t3030*t3234;
  t3345 = t3337 + t3341 + t3344;
  t3387 = -1.000000637725*t3030;
  t3388 = 1. + t3387;
  t3389 = t3388*t3094;
  t3390 = t3034*t3174;
  t3398 = t3069*t3234;
  t3402 = t3389 + t3390 + t3398;
  t3413 = Cos(var1[18]);
  t3421 = -1.*t3413;
  t3422 = 1. + t3421;
  t3271 = 0.366501*t3267;
  t3280 = 0. + t3271;
  t3319 = 0.930418*t3267;
  t3320 = 0. + t3319;
  t3590 = Cos(var1[19]);
  t3592 = -1.*t3590;
  t3593 = 1. + t3592;
  t3597 = Sin(var1[19]);
  t3544 = 0.930418*t3431;
  t3547 = 0. + t3544;
  t3471 = t3379*t3307;
  t3475 = t3358*t3345;
  t3488 = -1.000000637725*t3250;
  t3489 = 1. + t3488;
  t3503 = t3489*t3402;
  t3506 = t3471 + t3475 + t3503;
  t3525 = -0.134322983001*t3250;
  t3527 = 1. + t3525;
  t3530 = t3527*t3307;
  t3531 = -0.340999127418*t3250*t3345;
  t3535 = t3280*t3402;
  t3538 = t3530 + t3531 + t3535;
  t3550 = -0.340999127418*t3250*t3307;
  t3554 = -0.8656776547239999*t3250;
  t3555 = 1. + t3554;
  t3563 = t3555*t3345;
  t3567 = t3320*t3402;
  t3570 = t3550 + t3563 + t3567;
  t3596 = -0.120666640478*t3593;
  t3520 = 0.366501*t3431;
  t3521 = 0. + t3520;
  t3606 = -0.444895486988*t3593;
  t3646 = -0.175248972904*t3593;
  t3456 = -0.366501*t3431;
  t3466 = 0. + t3456;
  t3432 = -0.930418*t3431;
  t3442 = 0. + t3432;
  t3714 = -0.218018*t3597;
  t3618 = t3547*t3506;
  t3623 = -0.340999127418*t3422*t3538;
  t3624 = -0.8656776547239999*t3422;
  t3629 = 1. + t3624;
  t3632 = t3629*t3570;
  t3633 = t3618 + t3623 + t3632;
  t3725 = 0.553471*t3597;
  t3681 = t3521*t3506;
  t3682 = -0.134322983001*t3422;
  t3703 = 1. + t3682;
  t3705 = t3703*t3538;
  t3706 = -0.340999127418*t3422*t3570;
  t3708 = t3681 + t3705 + t3706;
  t3734 = -1.000000637725*t3422;
  t3737 = 1. + t3734;
  t3742 = t3737*t3506;
  t3743 = t3466*t3538;
  t3745 = t3442*t3570;
  t3754 = t3742 + t3743 + t3745;
  t3661 = 0.803828*t3597;
  t3769 = 0.175248972904*t3593;
  t3647 = -0.553471*t3597;
  t3784 = 0.120666640478*t3593;
  t3601 = -0.803828*t3597;
  t3757 = 0.444895486988*t3593;
  t3607 = 0.218018*t3597;
  t693 = -0.04500040093286238*t691;
  t993 = -0.07877663122399998*t793;
  t1166 = 0.031030906668*t1008;
  t1235 = 0. + t693 + t993 + t1166;
  t1516 = -0.091*t1435;
  t1529 = 0. + t1516;
  t2145 = -1.*t2079;
  t2167 = 1. + t2145;
  t2212 = -0.091*t2167;
  t2214 = 0. + t2212;
  t2315 = 1.296332362046933e-7*var1[14];
  t2325 = -0.07877668146182712*t691;
  t2419 = -0.045000372235*t2358;
  t2432 = t2315 + t2325 + t2419;
  t3829 = t1591*t1794*t1664;
  t3832 = -1.*t315*t1909;
  t3833 = t3829 + t3832;
  t3837 = t315*t1591;
  t3839 = t1794*t1664*t1909;
  t3840 = t3837 + t3839;
  t2478 = 3.2909349868922137e-7*var1[14];
  t2498 = 0.03103092645718495*t691;
  t2515 = -0.045000372235*t2509;
  t2519 = t2478 + t2498 + t2515;
  t2584 = -1.296332362046933e-7*var1[15];
  t2615 = -0.14128592423750855*t2595;
  t2683 = -0.045000372235*t2681;
  t2686 = t2584 + t2615 + t2683;
  t3846 = -1.*t1435*t3833;
  t3847 = t2079*t3840;
  t3849 = t3846 + t3847;
  t3856 = t2079*t3833;
  t3857 = t1435*t3840;
  t3858 = t3856 + t3857;
  t2758 = 3.2909349868922137e-7*var1[15];
  t2759 = -0.055653945343889656*t2595;
  t2820 = -0.045000372235*t2818;
  t2821 = t2758 + t2759 + t2820;
  t2890 = -0.04500040093286238*t2595;
  t2902 = -0.055653909852*t2899;
  t2931 = -0.141285834136*t2929;
  t2932 = 0. + t2890 + t2902 + t2931;
  t3031 = 0.039853038461262744*t3030;
  t3041 = -0.22023459268999998*t3034;
  t3078 = -0.086752619205*t3069;
  t3081 = 0. + t3031 + t3041 + t3078;
  t3862 = t544*t2509*t1794;
  t3866 = 0.340999127418*t691*t3849;
  t3870 = t2714*t3858;
  t3872 = t3862 + t3866 + t3870;
  t3875 = t544*t2358*t1794;
  t3878 = t2826*t3849;
  t3879 = 0.340999127418*t691*t3858;
  t3882 = t3875 + t3878 + t3879;
  t3885 = t2940*t544*t1794;
  t3888 = t793*t3849;
  t3892 = t1008*t3858;
  t3893 = t3885 + t3888 + t3892;
  t3097 = 6.295460977284962e-8*var1[16];
  t3104 = -0.22023473313910558*t3030;
  t3123 = 0.039853013046*t3112;
  t3144 = t3097 + t3104 + t3123;
  t3184 = -1.5981976069815686e-7*var1[16];
  t3185 = -0.08675267452931407*t3030;
  t3195 = 0.039853013046*t3194;
  t3203 = t3184 + t3185 + t3195;
  t3242 = 5.7930615939377813e-8*var1[17];
  t3257 = -0.23261833304643187*t3250;
  t3292 = -0.262809976934*t3280;
  t3294 = t3242 + t3257 + t3292;
  t3896 = t2929*t3872;
  t3899 = t2899*t3882;
  t3902 = t3090*t3893;
  t3903 = t3896 + t3899 + t3902;
  t3911 = t3152*t3872;
  t3912 = -0.340999127418*t2595*t3882;
  t3914 = t2681*t3893;
  t3919 = t3911 + t3912 + t3914;
  t3927 = -0.340999127418*t2595*t3872;
  t3930 = t3228*t3882;
  t3932 = t2818*t3893;
  t3933 = t3927 + t3930 + t3932;
  t3317 = -2.281945176511838e-8*var1[17];
  t3318 = -0.5905366811997648*t3250;
  t3324 = -0.262809976934*t3320;
  t3336 = t3317 + t3318 + t3324;
  t3354 = -0.26281014453449253*t3250;
  t3375 = -0.5905363046000001*t3358;
  t3382 = -0.23261818470000004*t3379;
  t3385 = 0. + t3354 + t3375 + t3382;
  t3425 = 0.06199697675299678*t3422;
  t3453 = -0.823260828522*t3442;
  t3467 = -0.324290713329*t3466;
  t3469 = 0. + t3425 + t3453 + t3467;
  t3936 = t3194*t3903;
  t3940 = -0.340999127418*t3030*t3919;
  t3942 = t3301*t3933;
  t3945 = t3936 + t3940 + t3942;
  t3958 = t3112*t3903;
  t3959 = t3339*t3919;
  t3963 = -0.340999127418*t3030*t3933;
  t3964 = t3958 + t3959 + t3963;
  t3967 = t3388*t3903;
  t3968 = t3034*t3919;
  t3969 = t3069*t3933;
  t3970 = t3967 + t3968 + t3969;
  t3512 = 7.500378623168247e-8*var1[18];
  t3518 = -0.32429092013729516*t3422;
  t3522 = 0.061996937216*t3521;
  t3524 = t3512 + t3518 + t3522;
  t3540 = -2.95447451120871e-8*var1[18];
  t3543 = -0.8232613535360118*t3422;
  t3548 = 0.061996937216*t3547;
  t3549 = t3540 + t3543 + t3548;
  t3581 = 7.20503013377005e-8*var1[19];
  t3595 = -0.3667270384178674*t3593;
  t3602 = t3596 + t3601;
  t3604 = -0.29871295412*t3602;
  t3613 = t3606 + t3607;
  t3614 = 0.44503472296900004*t3613;
  t3616 = t3581 + t3595 + t3604 + t3614;
  t3973 = t3379*t3945;
  t3978 = t3358*t3964;
  t3979 = t3489*t3970;
  t3985 = t3973 + t3978 + t3979;
  t3987 = t3527*t3945;
  t3989 = -0.340999127418*t3250*t3964;
  t3990 = t3280*t3970;
  t3993 = t3987 + t3989 + t3990;
  t4002 = -0.340999127418*t3250*t3945;
  t4007 = t3555*t3964;
  t4012 = t3320*t3970;
  t4014 = t4002 + t4007 + t4012;
  t3641 = 2.838136523330542e-8*var1[19];
  t3645 = -0.2845150083511607*t3593;
  t3654 = t3646 + t3647;
  t3655 = 0.44503472296900004*t3654;
  t3672 = t3596 + t3661;
  t3673 = -0.5286755231320001*t3672;
  t3678 = t3641 + t3645 + t3655 + t3673;
  t3712 = 1.0464152525368286e-7*var1[19];
  t3713 = 0.15748087543254813*t3593;
  t3717 = t3606 + t3714;
  t3722 = -0.5286755231320001*t3717;
  t3727 = t3646 + t3725;
  t3728 = -0.29871295412*t3727;
  t3731 = t3712 + t3713 + t3722 + t3728;
  t3765 = t3757 + t3714;
  t4024 = t3547*t3985;
  t4025 = -0.340999127418*t3422*t3993;
  t4026 = t3629*t4014;
  t4029 = t4024 + t4025 + t4026;
  t3770 = t3769 + t3725;
  t4031 = t3521*t3985;
  t4032 = t3703*t3993;
  t4033 = -0.340999127418*t3422*t4014;
  t4038 = t4031 + t4032 + t4033;
  t3772 = -0.353861996165*t3593;
  t3776 = 1. + t3772;
  t4049 = t3737*t3985;
  t4056 = t3466*t3993;
  t4057 = t3442*t4014;
  t4065 = t4049 + t4056 + t4057;
  t3787 = t3784 + t3661;
  t3791 = -0.952469601425*t3593;
  t3793 = 1. + t3791;
  t3795 = t3769 + t3647;
  t3807 = -0.693671301908*t3593;
  t3808 = 1. + t3807;
  t3811 = t3784 + t3601;
  t3817 = t3757 + t3607;
  t4147 = -1.*t544*t1591*t1435;
  t4152 = t2079*t544*t1909;
  t4155 = t4147 + t4152;
  t4166 = t2079*t544*t1591;
  t4168 = t544*t1435*t1909;
  t4173 = t4166 + t4168;
  t4191 = -1.*t2509*t1664;
  t4197 = 0.340999127418*t691*t4155;
  t4204 = t2714*t4173;
  t4207 = t4191 + t4197 + t4204;
  t4210 = -1.*t2358*t1664;
  t4213 = t2826*t4155;
  t4214 = 0.340999127418*t691*t4173;
  t4216 = t4210 + t4213 + t4214;
  t4222 = -1.*t2940*t1664;
  t4226 = t793*t4155;
  t4229 = t1008*t4173;
  t4230 = t4222 + t4226 + t4229;
  t4237 = t2929*t4207;
  t4239 = t2899*t4216;
  t4240 = t3090*t4230;
  t4241 = t4237 + t4239 + t4240;
  t4250 = t3152*t4207;
  t4254 = -0.340999127418*t2595*t4216;
  t4267 = t2681*t4230;
  t4270 = t4250 + t4254 + t4267;
  t4285 = -0.340999127418*t2595*t4207;
  t4289 = t3228*t4216;
  t4293 = t2818*t4230;
  t4300 = t4285 + t4289 + t4293;
  t4307 = t3194*t4241;
  t4309 = -0.340999127418*t3030*t4270;
  t4310 = t3301*t4300;
  t4314 = t4307 + t4309 + t4310;
  t4321 = t3112*t4241;
  t4325 = t3339*t4270;
  t4326 = -0.340999127418*t3030*t4300;
  t4327 = t4321 + t4325 + t4326;
  t4337 = t3388*t4241;
  t4339 = t3034*t4270;
  t4344 = t3069*t4300;
  t4345 = t4337 + t4339 + t4344;
  t4348 = t3379*t4314;
  t4349 = t3358*t4327;
  t4350 = t3489*t4345;
  t4351 = t4348 + t4349 + t4350;
  t4353 = t3527*t4314;
  t4354 = -0.340999127418*t3250*t4327;
  t4355 = t3280*t4345;
  t4356 = t4353 + t4354 + t4355;
  t4358 = -0.340999127418*t3250*t4314;
  t4359 = t3555*t4327;
  t4360 = t3320*t4345;
  t4363 = t4358 + t4359 + t4360;
  t4367 = t3547*t4351;
  t4374 = -0.340999127418*t3422*t4356;
  t4379 = t3629*t4363;
  t4381 = t4367 + t4374 + t4379;
  t4387 = t3521*t4351;
  t4389 = t3703*t4356;
  t4390 = -0.340999127418*t3422*t4363;
  t4391 = t4387 + t4389 + t4390;
  t4401 = t3737*t4351;
  t4404 = t3466*t4356;
  t4406 = t3442*t4363;
  t4410 = t4401 + t4404 + t4406;
  p_output1[0]=0. + t1529*t1993 + t2214*t2283 + t2432*t2474 + t2519*t2542 + t2686*t2722 + t2821*t2869 + t2932*t3017 + t3081*t3094 + t3144*t3174 + t3203*t3234 + t3294*t3307 + t3336*t3345 + t3385*t3402 + t3469*t3506 + t3524*t3538 + t3549*t3570 + t3616*t3633 + t3678*t3708 + t3731*t3754 + 0.061997*(t3633*t3765 + t3708*t3770 + t3754*t3776) - 0.323516*(t3633*t3787 + t3708*t3793 + t3754*t3795) - 0.823565*(t3633*t3808 + t3708*t3811 + t3754*t3817) + t1235*t315*t544 + var1[0];
  p_output1[1]=0. + t1529*t3833 + t2214*t3840 + t2432*t3849 + t2519*t3858 + t2686*t3872 + t2821*t3882 + t2932*t3893 + t3081*t3903 + t3144*t3919 + t3203*t3933 + t3294*t3945 + t3336*t3964 + t3385*t3970 + t3469*t3985 + t3524*t3993 + t3549*t4014 + t3616*t4029 + t3678*t4038 + t3731*t4065 + 0.061997*(t3765*t4029 + t3770*t4038 + t3776*t4065) - 0.323516*(t3787*t4029 + t3793*t4038 + t3795*t4065) - 0.823565*(t3808*t4029 + t3811*t4038 + t3817*t4065) + t1235*t1794*t544 + var1[1];
  p_output1[2]=0. - 1.*t1235*t1664 + t2432*t4155 + t2519*t4173 + t2686*t4207 + t2821*t4216 + t2932*t4230 + t3081*t4241 + t3144*t4270 + t3203*t4300 + t3294*t4314 + t3336*t4327 + t3385*t4345 + t3469*t4351 + t3524*t4356 + t3549*t4363 + t3616*t4381 + t3678*t4391 + t3731*t4410 + 0.061997*(t3765*t4381 + t3770*t4391 + t3776*t4410) - 0.323516*(t3787*t4381 + t3793*t4391 + t3795*t4410) - 0.823565*(t3808*t4381 + t3811*t4391 + t3817*t4410) + t1529*t1591*t544 + t1909*t2214*t544 + var1[2];
}



void p_RightToeBottomBack_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
