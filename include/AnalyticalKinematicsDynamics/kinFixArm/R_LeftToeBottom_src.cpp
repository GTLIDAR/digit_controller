/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:20:57 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_LeftToeBottom_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1559;
  double t1516;
  double t1576;
  double t1520;
  double t1577;
  double t1293;
  double t1390;
  double t1400;
  double t1430;
  double t1666;
  double t1668;
  double t1691;
  double t1558;
  double t1594;
  double t1595;
  double t1698;
  double t1189;
  double t1214;
  double t1216;
  double t1601;
  double t1722;
  double t1728;
  double t1853;
  double t1869;
  double t1891;
  double t1899;
  double t1902;
  double t2241;
  double t2260;
  double t2264;
  double t2301;
  double t2302;
  double t2305;
  double t2490;
  double t2532;
  double t2542;
  double t2560;
  double t1748;
  double t1789;
  double t1809;
  double t1895;
  double t1904;
  double t1909;
  double t1951;
  double t1976;
  double t2579;
  double t2083;
  double t2085;
  double t2102;
  double t2120;
  double t2142;
  double t2148;
  double t2199;
  double t2202;
  double t1080;
  double t1106;
  double t1186;
  double t808;
  double t2060;
  double t2074;
  double t2076;
  double t2231;
  double t2592;
  double t2593;
  double t2639;
  double t2659;
  double t2722;
  double t2813;
  double t2832;
  double t2854;
  double t2863;
  double t2878;
  double t2883;
  double t2916;
  double t2923;
  double t2925;
  double t2934;
  double t3027;
  double t3031;
  double t3032;
  double t3037;
  double t3133;
  double t3134;
  double t3142;
  double t3148;
  double t3394;
  double t3395;
  double t3398;
  double t2670;
  double t2726;
  double t2797;
  double t2998;
  double t3007;
  double t3017;
  double t3225;
  double t3255;
  double t3321;
  double t3326;
  double t3338;
  double t3340;
  double t3343;
  double t3348;
  double t3350;
  double t3353;
  double t3436;
  double t3439;
  double t3441;
  double t3470;
  double t3474;
  double t3477;
  double t3484;
  double t3487;
  double t3493;
  double t3499;
  double t3530;
  double t3531;
  double t3533;
  double t426;
  double t435;
  double t446;
  double t472;
  double t878;
  double t982;
  double t3262;
  double t3286;
  double t3304;
  double t3375;
  double t3409;
  double t3410;
  double t3501;
  double t3506;
  double t3535;
  double t3539;
  double t3552;
  double t3553;
  double t3569;
  double t3592;
  double t3597;
  double t3603;
  double t3652;
  double t3663;
  double t3668;
  double t3669;
  double t3676;
  double t3677;
  double t3679;
  double t3690;
  double t3716;
  double t3713;
  double t706;
  double t707;
  double t3522;
  double t3610;
  double t3624;
  double t3632;
  double t3695;
  double t3697;
  double t3737;
  double t3743;
  double t3745;
  double t3748;
  double t3752;
  double t3764;
  double t3766;
  double t3767;
  double t3806;
  double t3809;
  double t3817;
  double t3835;
  double t3865;
  double t3867;
  double t3871;
  double t3874;
  double t3879;
  double t3885;
  double t447;
  double t471;
  double t3971;
  double t3974;
  double t3980;
  double t3964;
  double t3966;
  double t3967;
  double t3968;
  double t3983;
  double t3985;
  double t4004;
  double t4009;
  double t4011;
  double t4054;
  double t4057;
  double t4063;
  double t4069;
  double t4001;
  double t4014;
  double t4021;
  double t4022;
  double t4034;
  double t4041;
  double t4047;
  double t4048;
  double t4032;
  double t4049;
  double t4070;
  double t4075;
  double t4087;
  double t4092;
  double t4094;
  double t4103;
  double t4108;
  double t4110;
  double t4111;
  double t4116;
  double t4086;
  double t4105;
  double t4128;
  double t4129;
  double t4137;
  double t4145;
  double t4147;
  double t4156;
  double t4159;
  double t4164;
  double t4165;
  double t4167;
  double t3726;
  double t3736;
  double t4132;
  double t4157;
  double t4176;
  double t4177;
  double t4183;
  double t4187;
  double t4193;
  double t4194;
  double t4203;
  double t4206;
  double t4209;
  double t4213;
  double t3791;
  double t3792;
  double t3795;
  double t3897;
  double t3900;
  double t4178;
  double t4199;
  double t4214;
  double t4215;
  double t3914;
  double t3916;
  double t4228;
  double t4229;
  double t4230;
  double t4234;
  double t3921;
  double t3934;
  double t3936;
  double t4240;
  double t4241;
  double t4242;
  double t4243;
  double t4276;
  double t4277;
  double t4279;
  double t4282;
  double t4285;
  double t4287;
  double t4307;
  double t4310;
  double t4322;
  double t4328;
  double t4280;
  double t4289;
  double t4291;
  double t4293;
  double t4299;
  double t4302;
  double t4303;
  double t4304;
  double t4294;
  double t4305;
  double t4332;
  double t4335;
  double t4343;
  double t4347;
  double t4349;
  double t4350;
  double t4355;
  double t4356;
  double t4357;
  double t4358;
  double t4336;
  double t4353;
  double t4360;
  double t4364;
  double t4369;
  double t4370;
  double t4372;
  double t4375;
  double t4377;
  double t4382;
  double t4402;
  double t4416;
  double t4368;
  double t4376;
  double t4428;
  double t4429;
  double t4453;
  double t4454;
  double t4457;
  double t4462;
  double t4469;
  double t4494;
  double t4498;
  double t4499;
  double t4437;
  double t4465;
  double t4500;
  double t4512;
  double t4525;
  double t4532;
  double t4537;
  double t4545;
  double t4559;
  double t4560;
  double t4561;
  double t4573;
  double t3710;
  double t3774;
  double t3886;
  double t3889;
  double t3911;
  double t3919;
  double t3938;
  double t3940;
  double t4624;
  double t4640;
  double t4653;
  double t4654;
  double t4667;
  double t4672;
  double t4222;
  double t4238;
  double t4244;
  double t4249;
  double t4252;
  double t4257;
  double t4265;
  double t4266;
  double t4523;
  double t4558;
  double t4574;
  double t4578;
  double t4585;
  double t4591;
  double t4604;
  double t4616;
  double t4645;
  double t4658;
  double t4673;
  double t4674;
  double t4718;
  double t4729;
  double t4730;
  double t4734;
  double t4750;
  double t4757;
  double t4763;
  double t4764;
  t1559 = Cos(var1[3]);
  t1516 = Cos(var1[5]);
  t1576 = Sin(var1[4]);
  t1520 = Sin(var1[3]);
  t1577 = Sin(var1[5]);
  t1293 = Cos(var1[7]);
  t1390 = -1.*t1293;
  t1400 = 1. + t1390;
  t1430 = Cos(var1[6]);
  t1666 = t1559*t1516*t1576;
  t1668 = t1520*t1577;
  t1691 = t1666 + t1668;
  t1558 = -1.*t1516*t1520;
  t1594 = t1559*t1576*t1577;
  t1595 = t1558 + t1594;
  t1698 = Sin(var1[6]);
  t1189 = Cos(var1[8]);
  t1214 = -1.*t1189;
  t1216 = 1. + t1214;
  t1601 = t1430*t1595;
  t1722 = -1.*t1691*t1698;
  t1728 = t1601 + t1722;
  t1853 = t1430*t1691;
  t1869 = t1595*t1698;
  t1891 = t1853 + t1869;
  t1899 = Cos(var1[4]);
  t1902 = Sin(var1[7]);
  t2241 = -1.000000637725*t1400;
  t2260 = 1. + t2241;
  t2264 = t1559*t1899*t2260;
  t2301 = -0.930418*t1902;
  t2302 = 0. + t2301;
  t2305 = t1728*t2302;
  t2490 = -0.366501*t1902;
  t2532 = 0. + t2490;
  t2542 = t1891*t2532;
  t2560 = t2264 + t2305 + t2542;
  t1748 = -0.340999127418*t1400*t1728;
  t1789 = -0.134322983001*t1400;
  t1809 = 1. + t1789;
  t1895 = t1809*t1891;
  t1904 = 0.366501*t1902;
  t1909 = 0. + t1904;
  t1951 = t1559*t1899*t1909;
  t1976 = t1748 + t1895 + t1951;
  t2579 = Sin(var1[8]);
  t2083 = -0.8656776547239999*t1400;
  t2085 = 1. + t2083;
  t2102 = t2085*t1728;
  t2120 = -0.340999127418*t1400*t1891;
  t2142 = 0.930418*t1902;
  t2148 = 0. + t2142;
  t2199 = t1559*t1899*t2148;
  t2202 = t2102 + t2120 + t2199;
  t1080 = Cos(var1[9]);
  t1106 = -1.*t1080;
  t1186 = 1. + t1106;
  t808 = Sin(var1[10]);
  t2060 = 0.340999127418*t1216*t1976;
  t2074 = -0.134322983001*t1216;
  t2076 = 1. + t2074;
  t2231 = t2076*t2202;
  t2592 = -0.366501*t2579;
  t2593 = 0. + t2592;
  t2639 = t2560*t2593;
  t2659 = t2060 + t2231 + t2639;
  t2722 = Sin(var1[9]);
  t2813 = -1.000000637725*t1216;
  t2832 = 1. + t2813;
  t2854 = t2832*t2560;
  t2863 = -0.930418*t2579;
  t2878 = 0. + t2863;
  t2883 = t1976*t2878;
  t2916 = 0.366501*t2579;
  t2923 = 0. + t2916;
  t2925 = t2202*t2923;
  t2934 = t2854 + t2883 + t2925;
  t3027 = -0.8656776547239999*t1216;
  t3031 = 1. + t3027;
  t3032 = t3031*t1976;
  t3037 = 0.340999127418*t1216*t2202;
  t3133 = 0.930418*t2579;
  t3134 = 0. + t3133;
  t3142 = t2560*t3134;
  t3148 = t3032 + t3037 + t3142;
  t3394 = Cos(var1[10]);
  t3395 = -1.*t3394;
  t3398 = 1. + t3395;
  t2670 = 0.340999127418*t1186*t2659;
  t2726 = -0.930418*t2722;
  t2797 = 0. + t2726;
  t2998 = t2797*t2934;
  t3007 = -0.8656776547239999*t1186;
  t3017 = 1. + t3007;
  t3225 = t3017*t3148;
  t3255 = t2670 + t2998 + t3225;
  t3321 = -0.134322983001*t1186;
  t3326 = 1. + t3321;
  t3338 = t3326*t2659;
  t3340 = 0.366501*t2722;
  t3343 = 0. + t3340;
  t3348 = t3343*t2934;
  t3350 = 0.340999127418*t1186*t3148;
  t3353 = t3338 + t3348 + t3350;
  t3436 = -0.366501*t2722;
  t3439 = 0. + t3436;
  t3441 = t3439*t2659;
  t3470 = -1.000000637725*t1186;
  t3474 = 1. + t3470;
  t3477 = t3474*t2934;
  t3484 = 0.930418*t2722;
  t3487 = 0. + t3484;
  t3493 = t3487*t3148;
  t3499 = t3441 + t3477 + t3493;
  t3530 = Cos(var1[11]);
  t3531 = -1.*t3530;
  t3533 = 1. + t3531;
  t426 = Cos(var1[12]);
  t435 = -1.*t426;
  t446 = 1. + t435;
  t472 = Sin(var1[11]);
  t878 = 0.930418*t808;
  t982 = 0. + t878;
  t3262 = t982*t3255;
  t3286 = -0.366501*t808;
  t3304 = 0. + t3286;
  t3375 = t3304*t3353;
  t3409 = -1.000000637725*t3398;
  t3410 = 1. + t3409;
  t3501 = t3410*t3499;
  t3506 = t3262 + t3375 + t3501;
  t3535 = -0.8656776547239999*t3398;
  t3539 = 1. + t3535;
  t3552 = t3539*t3255;
  t3553 = 0.340999127418*t3398*t3353;
  t3569 = -0.930418*t808;
  t3592 = 0. + t3569;
  t3597 = t3592*t3499;
  t3603 = t3552 + t3553 + t3597;
  t3652 = 0.340999127418*t3398*t3255;
  t3663 = -0.134322983001*t3398;
  t3668 = 1. + t3663;
  t3669 = t3668*t3353;
  t3676 = 0.366501*t808;
  t3677 = 0. + t3676;
  t3679 = t3677*t3499;
  t3690 = t3652 + t3669 + t3679;
  t3716 = Sin(var1[12]);
  t3713 = -0.120666640478*t446;
  t706 = 0.366501*t472;
  t707 = 0. + t706;
  t3522 = t707*t3506;
  t3610 = 0.340999127418*t3533*t3603;
  t3624 = -0.134322983001*t3533;
  t3632 = 1. + t3624;
  t3695 = t3632*t3690;
  t3697 = t3522 + t3610 + t3695;
  t3737 = -0.930418*t472;
  t3743 = 0. + t3737;
  t3745 = t3743*t3506;
  t3748 = -0.8656776547239999*t3533;
  t3752 = 1. + t3748;
  t3764 = t3752*t3603;
  t3766 = 0.340999127418*t3533*t3690;
  t3767 = t3745 + t3764 + t3766;
  t3806 = -1.000000637725*t3533;
  t3809 = 1. + t3806;
  t3817 = t3809*t3506;
  t3835 = 0.930418*t472;
  t3865 = 0. + t3835;
  t3867 = t3865*t3603;
  t3871 = -0.366501*t472;
  t3874 = 0. + t3871;
  t3879 = t3874*t3690;
  t3885 = t3817 + t3867 + t3879;
  t447 = -0.952469601425*t446;
  t471 = 1. + t447;
  t3971 = t1516*t1520*t1576;
  t3974 = -1.*t1559*t1577;
  t3980 = t3971 + t3974;
  t3964 = t1559*t1516;
  t3966 = t1520*t1576*t1577;
  t3967 = t3964 + t3966;
  t3968 = t1430*t3967;
  t3983 = -1.*t3980*t1698;
  t3985 = t3968 + t3983;
  t4004 = t1430*t3980;
  t4009 = t3967*t1698;
  t4011 = t4004 + t4009;
  t4054 = t1899*t2260*t1520;
  t4057 = t3985*t2302;
  t4063 = t4011*t2532;
  t4069 = t4054 + t4057 + t4063;
  t4001 = -0.340999127418*t1400*t3985;
  t4014 = t1809*t4011;
  t4021 = t1899*t1520*t1909;
  t4022 = t4001 + t4014 + t4021;
  t4034 = t2085*t3985;
  t4041 = -0.340999127418*t1400*t4011;
  t4047 = t1899*t1520*t2148;
  t4048 = t4034 + t4041 + t4047;
  t4032 = 0.340999127418*t1216*t4022;
  t4049 = t2076*t4048;
  t4070 = t4069*t2593;
  t4075 = t4032 + t4049 + t4070;
  t4087 = t2832*t4069;
  t4092 = t4022*t2878;
  t4094 = t4048*t2923;
  t4103 = t4087 + t4092 + t4094;
  t4108 = t3031*t4022;
  t4110 = 0.340999127418*t1216*t4048;
  t4111 = t4069*t3134;
  t4116 = t4108 + t4110 + t4111;
  t4086 = 0.340999127418*t1186*t4075;
  t4105 = t2797*t4103;
  t4128 = t3017*t4116;
  t4129 = t4086 + t4105 + t4128;
  t4137 = t3326*t4075;
  t4145 = t3343*t4103;
  t4147 = 0.340999127418*t1186*t4116;
  t4156 = t4137 + t4145 + t4147;
  t4159 = t3439*t4075;
  t4164 = t3474*t4103;
  t4165 = t3487*t4116;
  t4167 = t4159 + t4164 + t4165;
  t3726 = 0.803828*t3716;
  t3736 = t3713 + t3726;
  t4132 = t982*t4129;
  t4157 = t3304*t4156;
  t4176 = t3410*t4167;
  t4177 = t4132 + t4157 + t4176;
  t4183 = t3539*t4129;
  t4187 = 0.340999127418*t3398*t4156;
  t4193 = t3592*t4167;
  t4194 = t4183 + t4187 + t4193;
  t4203 = 0.340999127418*t3398*t4129;
  t4206 = t3668*t4156;
  t4209 = t3677*t4167;
  t4213 = t4203 + t4206 + t4209;
  t3791 = -0.175248972904*t446;
  t3792 = -0.553471*t3716;
  t3795 = t3791 + t3792;
  t3897 = -0.803828*t3716;
  t3900 = t3713 + t3897;
  t4178 = t707*t4177;
  t4199 = 0.340999127418*t3533*t4194;
  t4214 = t3632*t4213;
  t4215 = t4178 + t4199 + t4214;
  t3914 = -0.693671301908*t446;
  t3916 = 1. + t3914;
  t4228 = t3743*t4177;
  t4229 = t3752*t4194;
  t4230 = 0.340999127418*t3533*t4213;
  t4234 = t4228 + t4229 + t4230;
  t3921 = 0.444895486988*t446;
  t3934 = -0.218018*t3716;
  t3936 = t3921 + t3934;
  t4240 = t3809*t4177;
  t4241 = t3865*t4194;
  t4242 = t3874*t4213;
  t4243 = t4240 + t4241 + t4242;
  t4276 = t1899*t1430*t1577;
  t4277 = -1.*t1899*t1516*t1698;
  t4279 = t4276 + t4277;
  t4282 = t1899*t1516*t1430;
  t4285 = t1899*t1577*t1698;
  t4287 = t4282 + t4285;
  t4307 = -1.*t2260*t1576;
  t4310 = t4279*t2302;
  t4322 = t4287*t2532;
  t4328 = t4307 + t4310 + t4322;
  t4280 = -0.340999127418*t1400*t4279;
  t4289 = t1809*t4287;
  t4291 = -1.*t1576*t1909;
  t4293 = t4280 + t4289 + t4291;
  t4299 = t2085*t4279;
  t4302 = -0.340999127418*t1400*t4287;
  t4303 = -1.*t1576*t2148;
  t4304 = t4299 + t4302 + t4303;
  t4294 = 0.340999127418*t1216*t4293;
  t4305 = t2076*t4304;
  t4332 = t4328*t2593;
  t4335 = t4294 + t4305 + t4332;
  t4343 = t2832*t4328;
  t4347 = t4293*t2878;
  t4349 = t4304*t2923;
  t4350 = t4343 + t4347 + t4349;
  t4355 = t3031*t4293;
  t4356 = 0.340999127418*t1216*t4304;
  t4357 = t4328*t3134;
  t4358 = t4355 + t4356 + t4357;
  t4336 = 0.340999127418*t1186*t4335;
  t4353 = t2797*t4350;
  t4360 = t3017*t4358;
  t4364 = t4336 + t4353 + t4360;
  t4369 = t3326*t4335;
  t4370 = t3343*t4350;
  t4372 = 0.340999127418*t1186*t4358;
  t4375 = t4369 + t4370 + t4372;
  t4377 = t3439*t4335;
  t4382 = t3474*t4350;
  t4402 = t3487*t4358;
  t4416 = t4377 + t4382 + t4402;
  t4368 = t982*t4364;
  t4376 = t3304*t4375;
  t4428 = t3410*t4416;
  t4429 = t4368 + t4376 + t4428;
  t4453 = t3539*t4364;
  t4454 = 0.340999127418*t3398*t4375;
  t4457 = t3592*t4416;
  t4462 = t4453 + t4454 + t4457;
  t4469 = 0.340999127418*t3398*t4364;
  t4494 = t3668*t4375;
  t4498 = t3677*t4416;
  t4499 = t4469 + t4494 + t4498;
  t4437 = t707*t4429;
  t4465 = 0.340999127418*t3533*t4462;
  t4500 = t3632*t4499;
  t4512 = t4437 + t4465 + t4500;
  t4525 = t3743*t4429;
  t4532 = t3752*t4462;
  t4537 = 0.340999127418*t3533*t4499;
  t4545 = t4525 + t4532 + t4537;
  t4559 = t3809*t4429;
  t4560 = t3865*t4462;
  t4561 = t3874*t4499;
  t4573 = t4559 + t4560 + t4561;
  t3710 = t471*t3697;
  t3774 = t3736*t3767;
  t3886 = t3795*t3885;
  t3889 = t3710 + t3774 + t3886;
  t3911 = t3900*t3697;
  t3919 = t3916*t3767;
  t3938 = t3936*t3885;
  t3940 = t3911 + t3919 + t3938;
  t4624 = 0.553471*t3716;
  t4640 = t3791 + t4624;
  t4653 = 0.218018*t3716;
  t4654 = t3921 + t4653;
  t4667 = -0.353861996165*t446;
  t4672 = 1. + t4667;
  t4222 = t471*t4215;
  t4238 = t3736*t4234;
  t4244 = t3795*t4243;
  t4249 = t4222 + t4238 + t4244;
  t4252 = t3900*t4215;
  t4257 = t3916*t4234;
  t4265 = t3936*t4243;
  t4266 = t4252 + t4257 + t4265;
  t4523 = t471*t4512;
  t4558 = t3736*t4545;
  t4574 = t3795*t4573;
  t4578 = t4523 + t4558 + t4574;
  t4585 = t3900*t4512;
  t4591 = t3916*t4545;
  t4604 = t3936*t4573;
  t4616 = t4585 + t4591 + t4604;
  t4645 = t4640*t3697;
  t4658 = t4654*t3767;
  t4673 = t4672*t3885;
  t4674 = t4645 + t4658 + t4673;
  t4718 = t4640*t4215;
  t4729 = t4654*t4234;
  t4730 = t4672*t4243;
  t4734 = t4718 + t4729 + t4730;
  t4750 = t4640*t4512;
  t4757 = t4654*t4545;
  t4763 = t4672*t4573;
  t4764 = t4750 + t4757 + t4763;
  p_output1[0]=0.930418*t3889 + 0.366501*t3940;
  p_output1[1]=0.930418*t4249 + 0.366501*t4266;
  p_output1[2]=0.930418*t4578 + 0.366501*t4616;
  p_output1[3]=-0.294604*t3889 + 0.747896*t3940 - 0.594863*t4674;
  p_output1[4]=-0.294604*t4249 + 0.747896*t4266 - 0.594863*t4734;
  p_output1[5]=-0.294604*t4578 + 0.747896*t4616 - 0.594863*t4764;
  p_output1[6]=-0.218018*t3889 + 0.553471*t3940 + 0.803828*t4674;
  p_output1[7]=-0.218018*t4249 + 0.553471*t4266 + 0.803828*t4734;
  p_output1[8]=-0.218018*t4578 + 0.553471*t4616 + 0.803828*t4764;
}



void R_LeftToeBottom_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
