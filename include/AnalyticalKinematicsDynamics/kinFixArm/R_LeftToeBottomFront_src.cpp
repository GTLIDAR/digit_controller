/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:52:22 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_LeftToeBottomFront_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1395;
  double t1369;
  double t1398;
  double t1375;
  double t1434;
  double t1175;
  double t1249;
  double t1263;
  double t1323;
  double t1507;
  double t1517;
  double t1544;
  double t1381;
  double t1446;
  double t1448;
  double t1553;
  double t1130;
  double t1133;
  double t1163;
  double t1454;
  double t1554;
  double t1559;
  double t1614;
  double t1622;
  double t1638;
  double t1661;
  double t1668;
  double t1788;
  double t1790;
  double t1800;
  double t1803;
  double t1853;
  double t1863;
  double t1866;
  double t1870;
  double t1886;
  double t1898;
  double t1572;
  double t1574;
  double t1585;
  double t1647;
  double t1670;
  double t1672;
  double t1677;
  double t1678;
  double t1900;
  double t1742;
  double t1743;
  double t1757;
  double t1760;
  double t1762;
  double t1767;
  double t1768;
  double t1784;
  double t1075;
  double t1101;
  double t1123;
  double t1024;
  double t1685;
  double t1697;
  double t1700;
  double t1787;
  double t1901;
  double t1913;
  double t1915;
  double t1926;
  double t1954;
  double t1975;
  double t1982;
  double t1988;
  double t1989;
  double t2034;
  double t2035;
  double t2036;
  double t2047;
  double t2048;
  double t2054;
  double t2067;
  double t2072;
  double t2086;
  double t2087;
  double t2091;
  double t2092;
  double t2093;
  double t2094;
  double t2163;
  double t2166;
  double t2169;
  double t1928;
  double t1967;
  double t1974;
  double t2056;
  double t2057;
  double t2060;
  double t2095;
  double t2105;
  double t2117;
  double t2121;
  double t2125;
  double t2126;
  double t2130;
  double t2134;
  double t2139;
  double t2144;
  double t2184;
  double t2187;
  double t2188;
  double t2193;
  double t2194;
  double t2196;
  double t2203;
  double t2205;
  double t2224;
  double t2230;
  double t2247;
  double t2253;
  double t2263;
  double t339;
  double t462;
  double t464;
  double t685;
  double t1031;
  double t1050;
  double t2111;
  double t2115;
  double t2116;
  double t2157;
  double t2174;
  double t2182;
  double t2235;
  double t2239;
  double t2265;
  double t2266;
  double t2271;
  double t2275;
  double t2278;
  double t2280;
  double t2290;
  double t2292;
  double t2303;
  double t2304;
  double t2306;
  double t2307;
  double t2308;
  double t2309;
  double t2311;
  double t2316;
  double t2332;
  double t2330;
  double t832;
  double t987;
  double t2242;
  double t2296;
  double t2300;
  double t2301;
  double t2322;
  double t2328;
  double t2341;
  double t2343;
  double t2344;
  double t2346;
  double t2355;
  double t2356;
  double t2360;
  double t2363;
  double t2374;
  double t2376;
  double t2380;
  double t2382;
  double t2385;
  double t2386;
  double t2395;
  double t2399;
  double t2400;
  double t2405;
  double t476;
  double t650;
  double t2453;
  double t2454;
  double t2456;
  double t2446;
  double t2447;
  double t2451;
  double t2452;
  double t2457;
  double t2458;
  double t2466;
  double t2469;
  double t2476;
  double t2498;
  double t2499;
  double t2500;
  double t2501;
  double t2461;
  double t2478;
  double t2479;
  double t2480;
  double t2484;
  double t2485;
  double t2486;
  double t2495;
  double t2481;
  double t2497;
  double t2503;
  double t2504;
  double t2507;
  double t2508;
  double t2512;
  double t2514;
  double t2525;
  double t2530;
  double t2533;
  double t2549;
  double t2506;
  double t2515;
  double t2551;
  double t2558;
  double t2563;
  double t2566;
  double t2569;
  double t2570;
  double t2581;
  double t2583;
  double t2585;
  double t2592;
  double t2334;
  double t2337;
  double t2559;
  double t2572;
  double t2594;
  double t2597;
  double t2600;
  double t2602;
  double t2604;
  double t2605;
  double t2611;
  double t2618;
  double t2621;
  double t2622;
  double t2365;
  double t2367;
  double t2371;
  double t2410;
  double t2413;
  double t2599;
  double t2609;
  double t2624;
  double t2626;
  double t2417;
  double t2418;
  double t2630;
  double t2637;
  double t2640;
  double t2642;
  double t2423;
  double t2430;
  double t2431;
  double t2649;
  double t2652;
  double t2656;
  double t2658;
  double t2676;
  double t2677;
  double t2679;
  double t2685;
  double t2686;
  double t2690;
  double t2711;
  double t2725;
  double t2726;
  double t2729;
  double t2684;
  double t2691;
  double t2692;
  double t2693;
  double t2695;
  double t2696;
  double t2703;
  double t2707;
  double t2694;
  double t2710;
  double t2730;
  double t2734;
  double t2740;
  double t2743;
  double t2745;
  double t2757;
  double t2760;
  double t2763;
  double t2769;
  double t2771;
  double t2736;
  double t2758;
  double t2772;
  double t2776;
  double t2779;
  double t2782;
  double t2783;
  double t2785;
  double t2788;
  double t2798;
  double t2817;
  double t2818;
  double t2777;
  double t2787;
  double t2823;
  double t2826;
  double t2831;
  double t2834;
  double t2835;
  double t2846;
  double t2854;
  double t2857;
  double t2859;
  double t2862;
  double t2828;
  double t2847;
  double t2867;
  double t2869;
  double t2874;
  double t2875;
  double t2876;
  double t2881;
  double t2883;
  double t2884;
  double t2885;
  double t2886;
  double t2329;
  double t2364;
  double t2406;
  double t2407;
  double t2416;
  double t2419;
  double t2436;
  double t2438;
  double t2911;
  double t2913;
  double t2917;
  double t2920;
  double t2928;
  double t2940;
  double t2627;
  double t2643;
  double t2659;
  double t2663;
  double t2667;
  double t2668;
  double t2670;
  double t2671;
  double t2870;
  double t2882;
  double t2889;
  double t2891;
  double t2893;
  double t2898;
  double t2899;
  double t2901;
  double t2914;
  double t2927;
  double t2942;
  double t2949;
  double t2957;
  double t2960;
  double t2964;
  double t2965;
  double t2988;
  double t2989;
  double t2990;
  double t2992;
  t1395 = Cos(var1[3]);
  t1369 = Cos(var1[5]);
  t1398 = Sin(var1[4]);
  t1375 = Sin(var1[3]);
  t1434 = Sin(var1[5]);
  t1175 = Cos(var1[7]);
  t1249 = -1.*t1175;
  t1263 = 1. + t1249;
  t1323 = Cos(var1[6]);
  t1507 = t1395*t1369*t1398;
  t1517 = t1375*t1434;
  t1544 = t1507 + t1517;
  t1381 = -1.*t1369*t1375;
  t1446 = t1395*t1398*t1434;
  t1448 = t1381 + t1446;
  t1553 = Sin(var1[6]);
  t1130 = Cos(var1[8]);
  t1133 = -1.*t1130;
  t1163 = 1. + t1133;
  t1454 = t1323*t1448;
  t1554 = -1.*t1544*t1553;
  t1559 = t1454 + t1554;
  t1614 = t1323*t1544;
  t1622 = t1448*t1553;
  t1638 = t1614 + t1622;
  t1661 = Cos(var1[4]);
  t1668 = Sin(var1[7]);
  t1788 = -1.000000637725*t1263;
  t1790 = 1. + t1788;
  t1800 = t1395*t1661*t1790;
  t1803 = -0.930418*t1668;
  t1853 = 0. + t1803;
  t1863 = t1559*t1853;
  t1866 = -0.366501*t1668;
  t1870 = 0. + t1866;
  t1886 = t1638*t1870;
  t1898 = t1800 + t1863 + t1886;
  t1572 = -0.340999127418*t1263*t1559;
  t1574 = -0.134322983001*t1263;
  t1585 = 1. + t1574;
  t1647 = t1585*t1638;
  t1670 = 0.366501*t1668;
  t1672 = 0. + t1670;
  t1677 = t1395*t1661*t1672;
  t1678 = t1572 + t1647 + t1677;
  t1900 = Sin(var1[8]);
  t1742 = -0.8656776547239999*t1263;
  t1743 = 1. + t1742;
  t1757 = t1743*t1559;
  t1760 = -0.340999127418*t1263*t1638;
  t1762 = 0.930418*t1668;
  t1767 = 0. + t1762;
  t1768 = t1395*t1661*t1767;
  t1784 = t1757 + t1760 + t1768;
  t1075 = Cos(var1[9]);
  t1101 = -1.*t1075;
  t1123 = 1. + t1101;
  t1024 = Sin(var1[10]);
  t1685 = 0.340999127418*t1163*t1678;
  t1697 = -0.134322983001*t1163;
  t1700 = 1. + t1697;
  t1787 = t1700*t1784;
  t1901 = -0.366501*t1900;
  t1913 = 0. + t1901;
  t1915 = t1898*t1913;
  t1926 = t1685 + t1787 + t1915;
  t1954 = Sin(var1[9]);
  t1975 = -1.000000637725*t1163;
  t1982 = 1. + t1975;
  t1988 = t1982*t1898;
  t1989 = -0.930418*t1900;
  t2034 = 0. + t1989;
  t2035 = t1678*t2034;
  t2036 = 0.366501*t1900;
  t2047 = 0. + t2036;
  t2048 = t1784*t2047;
  t2054 = t1988 + t2035 + t2048;
  t2067 = -0.8656776547239999*t1163;
  t2072 = 1. + t2067;
  t2086 = t2072*t1678;
  t2087 = 0.340999127418*t1163*t1784;
  t2091 = 0.930418*t1900;
  t2092 = 0. + t2091;
  t2093 = t1898*t2092;
  t2094 = t2086 + t2087 + t2093;
  t2163 = Cos(var1[10]);
  t2166 = -1.*t2163;
  t2169 = 1. + t2166;
  t1928 = 0.340999127418*t1123*t1926;
  t1967 = -0.930418*t1954;
  t1974 = 0. + t1967;
  t2056 = t1974*t2054;
  t2057 = -0.8656776547239999*t1123;
  t2060 = 1. + t2057;
  t2095 = t2060*t2094;
  t2105 = t1928 + t2056 + t2095;
  t2117 = -0.134322983001*t1123;
  t2121 = 1. + t2117;
  t2125 = t2121*t1926;
  t2126 = 0.366501*t1954;
  t2130 = 0. + t2126;
  t2134 = t2130*t2054;
  t2139 = 0.340999127418*t1123*t2094;
  t2144 = t2125 + t2134 + t2139;
  t2184 = -0.366501*t1954;
  t2187 = 0. + t2184;
  t2188 = t2187*t1926;
  t2193 = -1.000000637725*t1123;
  t2194 = 1. + t2193;
  t2196 = t2194*t2054;
  t2203 = 0.930418*t1954;
  t2205 = 0. + t2203;
  t2224 = t2205*t2094;
  t2230 = t2188 + t2196 + t2224;
  t2247 = Cos(var1[11]);
  t2253 = -1.*t2247;
  t2263 = 1. + t2253;
  t339 = Cos(var1[12]);
  t462 = -1.*t339;
  t464 = 1. + t462;
  t685 = Sin(var1[11]);
  t1031 = 0.930418*t1024;
  t1050 = 0. + t1031;
  t2111 = t1050*t2105;
  t2115 = -0.366501*t1024;
  t2116 = 0. + t2115;
  t2157 = t2116*t2144;
  t2174 = -1.000000637725*t2169;
  t2182 = 1. + t2174;
  t2235 = t2182*t2230;
  t2239 = t2111 + t2157 + t2235;
  t2265 = -0.8656776547239999*t2169;
  t2266 = 1. + t2265;
  t2271 = t2266*t2105;
  t2275 = 0.340999127418*t2169*t2144;
  t2278 = -0.930418*t1024;
  t2280 = 0. + t2278;
  t2290 = t2280*t2230;
  t2292 = t2271 + t2275 + t2290;
  t2303 = 0.340999127418*t2169*t2105;
  t2304 = -0.134322983001*t2169;
  t2306 = 1. + t2304;
  t2307 = t2306*t2144;
  t2308 = 0.366501*t1024;
  t2309 = 0. + t2308;
  t2311 = t2309*t2230;
  t2316 = t2303 + t2307 + t2311;
  t2332 = Sin(var1[12]);
  t2330 = -0.120666640478*t464;
  t832 = 0.366501*t685;
  t987 = 0. + t832;
  t2242 = t987*t2239;
  t2296 = 0.340999127418*t2263*t2292;
  t2300 = -0.134322983001*t2263;
  t2301 = 1. + t2300;
  t2322 = t2301*t2316;
  t2328 = t2242 + t2296 + t2322;
  t2341 = -0.930418*t685;
  t2343 = 0. + t2341;
  t2344 = t2343*t2239;
  t2346 = -0.8656776547239999*t2263;
  t2355 = 1. + t2346;
  t2356 = t2355*t2292;
  t2360 = 0.340999127418*t2263*t2316;
  t2363 = t2344 + t2356 + t2360;
  t2374 = -1.000000637725*t2263;
  t2376 = 1. + t2374;
  t2380 = t2376*t2239;
  t2382 = 0.930418*t685;
  t2385 = 0. + t2382;
  t2386 = t2385*t2292;
  t2395 = -0.366501*t685;
  t2399 = 0. + t2395;
  t2400 = t2399*t2316;
  t2405 = t2380 + t2386 + t2400;
  t476 = -0.952469601425*t464;
  t650 = 1. + t476;
  t2453 = t1369*t1375*t1398;
  t2454 = -1.*t1395*t1434;
  t2456 = t2453 + t2454;
  t2446 = t1395*t1369;
  t2447 = t1375*t1398*t1434;
  t2451 = t2446 + t2447;
  t2452 = t1323*t2451;
  t2457 = -1.*t2456*t1553;
  t2458 = t2452 + t2457;
  t2466 = t1323*t2456;
  t2469 = t2451*t1553;
  t2476 = t2466 + t2469;
  t2498 = t1661*t1790*t1375;
  t2499 = t2458*t1853;
  t2500 = t2476*t1870;
  t2501 = t2498 + t2499 + t2500;
  t2461 = -0.340999127418*t1263*t2458;
  t2478 = t1585*t2476;
  t2479 = t1661*t1375*t1672;
  t2480 = t2461 + t2478 + t2479;
  t2484 = t1743*t2458;
  t2485 = -0.340999127418*t1263*t2476;
  t2486 = t1661*t1375*t1767;
  t2495 = t2484 + t2485 + t2486;
  t2481 = 0.340999127418*t1163*t2480;
  t2497 = t1700*t2495;
  t2503 = t2501*t1913;
  t2504 = t2481 + t2497 + t2503;
  t2507 = t1982*t2501;
  t2508 = t2480*t2034;
  t2512 = t2495*t2047;
  t2514 = t2507 + t2508 + t2512;
  t2525 = t2072*t2480;
  t2530 = 0.340999127418*t1163*t2495;
  t2533 = t2501*t2092;
  t2549 = t2525 + t2530 + t2533;
  t2506 = 0.340999127418*t1123*t2504;
  t2515 = t1974*t2514;
  t2551 = t2060*t2549;
  t2558 = t2506 + t2515 + t2551;
  t2563 = t2121*t2504;
  t2566 = t2130*t2514;
  t2569 = 0.340999127418*t1123*t2549;
  t2570 = t2563 + t2566 + t2569;
  t2581 = t2187*t2504;
  t2583 = t2194*t2514;
  t2585 = t2205*t2549;
  t2592 = t2581 + t2583 + t2585;
  t2334 = 0.803828*t2332;
  t2337 = t2330 + t2334;
  t2559 = t1050*t2558;
  t2572 = t2116*t2570;
  t2594 = t2182*t2592;
  t2597 = t2559 + t2572 + t2594;
  t2600 = t2266*t2558;
  t2602 = 0.340999127418*t2169*t2570;
  t2604 = t2280*t2592;
  t2605 = t2600 + t2602 + t2604;
  t2611 = 0.340999127418*t2169*t2558;
  t2618 = t2306*t2570;
  t2621 = t2309*t2592;
  t2622 = t2611 + t2618 + t2621;
  t2365 = -0.175248972904*t464;
  t2367 = -0.553471*t2332;
  t2371 = t2365 + t2367;
  t2410 = -0.803828*t2332;
  t2413 = t2330 + t2410;
  t2599 = t987*t2597;
  t2609 = 0.340999127418*t2263*t2605;
  t2624 = t2301*t2622;
  t2626 = t2599 + t2609 + t2624;
  t2417 = -0.693671301908*t464;
  t2418 = 1. + t2417;
  t2630 = t2343*t2597;
  t2637 = t2355*t2605;
  t2640 = 0.340999127418*t2263*t2622;
  t2642 = t2630 + t2637 + t2640;
  t2423 = 0.444895486988*t464;
  t2430 = -0.218018*t2332;
  t2431 = t2423 + t2430;
  t2649 = t2376*t2597;
  t2652 = t2385*t2605;
  t2656 = t2399*t2622;
  t2658 = t2649 + t2652 + t2656;
  t2676 = t1661*t1323*t1434;
  t2677 = -1.*t1661*t1369*t1553;
  t2679 = t2676 + t2677;
  t2685 = t1661*t1369*t1323;
  t2686 = t1661*t1434*t1553;
  t2690 = t2685 + t2686;
  t2711 = -1.*t1790*t1398;
  t2725 = t2679*t1853;
  t2726 = t2690*t1870;
  t2729 = t2711 + t2725 + t2726;
  t2684 = -0.340999127418*t1263*t2679;
  t2691 = t1585*t2690;
  t2692 = -1.*t1398*t1672;
  t2693 = t2684 + t2691 + t2692;
  t2695 = t1743*t2679;
  t2696 = -0.340999127418*t1263*t2690;
  t2703 = -1.*t1398*t1767;
  t2707 = t2695 + t2696 + t2703;
  t2694 = 0.340999127418*t1163*t2693;
  t2710 = t1700*t2707;
  t2730 = t2729*t1913;
  t2734 = t2694 + t2710 + t2730;
  t2740 = t1982*t2729;
  t2743 = t2693*t2034;
  t2745 = t2707*t2047;
  t2757 = t2740 + t2743 + t2745;
  t2760 = t2072*t2693;
  t2763 = 0.340999127418*t1163*t2707;
  t2769 = t2729*t2092;
  t2771 = t2760 + t2763 + t2769;
  t2736 = 0.340999127418*t1123*t2734;
  t2758 = t1974*t2757;
  t2772 = t2060*t2771;
  t2776 = t2736 + t2758 + t2772;
  t2779 = t2121*t2734;
  t2782 = t2130*t2757;
  t2783 = 0.340999127418*t1123*t2771;
  t2785 = t2779 + t2782 + t2783;
  t2788 = t2187*t2734;
  t2798 = t2194*t2757;
  t2817 = t2205*t2771;
  t2818 = t2788 + t2798 + t2817;
  t2777 = t1050*t2776;
  t2787 = t2116*t2785;
  t2823 = t2182*t2818;
  t2826 = t2777 + t2787 + t2823;
  t2831 = t2266*t2776;
  t2834 = 0.340999127418*t2169*t2785;
  t2835 = t2280*t2818;
  t2846 = t2831 + t2834 + t2835;
  t2854 = 0.340999127418*t2169*t2776;
  t2857 = t2306*t2785;
  t2859 = t2309*t2818;
  t2862 = t2854 + t2857 + t2859;
  t2828 = t987*t2826;
  t2847 = 0.340999127418*t2263*t2846;
  t2867 = t2301*t2862;
  t2869 = t2828 + t2847 + t2867;
  t2874 = t2343*t2826;
  t2875 = t2355*t2846;
  t2876 = 0.340999127418*t2263*t2862;
  t2881 = t2874 + t2875 + t2876;
  t2883 = t2376*t2826;
  t2884 = t2385*t2846;
  t2885 = t2399*t2862;
  t2886 = t2883 + t2884 + t2885;
  t2329 = t650*t2328;
  t2364 = t2337*t2363;
  t2406 = t2371*t2405;
  t2407 = t2329 + t2364 + t2406;
  t2416 = t2413*t2328;
  t2419 = t2418*t2363;
  t2436 = t2431*t2405;
  t2438 = t2416 + t2419 + t2436;
  t2911 = 0.553471*t2332;
  t2913 = t2365 + t2911;
  t2917 = 0.218018*t2332;
  t2920 = t2423 + t2917;
  t2928 = -0.353861996165*t464;
  t2940 = 1. + t2928;
  t2627 = t650*t2626;
  t2643 = t2337*t2642;
  t2659 = t2371*t2658;
  t2663 = t2627 + t2643 + t2659;
  t2667 = t2413*t2626;
  t2668 = t2418*t2642;
  t2670 = t2431*t2658;
  t2671 = t2667 + t2668 + t2670;
  t2870 = t650*t2869;
  t2882 = t2337*t2881;
  t2889 = t2371*t2886;
  t2891 = t2870 + t2882 + t2889;
  t2893 = t2413*t2869;
  t2898 = t2418*t2881;
  t2899 = t2431*t2886;
  t2901 = t2893 + t2898 + t2899;
  t2914 = t2913*t2328;
  t2927 = t2920*t2363;
  t2942 = t2940*t2405;
  t2949 = t2914 + t2927 + t2942;
  t2957 = t2913*t2626;
  t2960 = t2920*t2642;
  t2964 = t2940*t2658;
  t2965 = t2957 + t2960 + t2964;
  t2988 = t2913*t2869;
  t2989 = t2920*t2881;
  t2990 = t2940*t2886;
  t2992 = t2988 + t2989 + t2990;
  p_output1[0]=0.930418*t2407 + 0.366501*t2438;
  p_output1[1]=0.930418*t2663 + 0.366501*t2671;
  p_output1[2]=0.930418*t2891 + 0.366501*t2901;
  p_output1[3]=-0.294604*t2407 + 0.747896*t2438 - 0.594863*t2949;
  p_output1[4]=-0.294604*t2663 + 0.747896*t2671 - 0.594863*t2965;
  p_output1[5]=-0.294604*t2891 + 0.747896*t2901 - 0.594863*t2992;
  p_output1[6]=-0.218018*t2407 + 0.553471*t2438 + 0.803828*t2949;
  p_output1[7]=-0.218018*t2663 + 0.553471*t2671 + 0.803828*t2965;
  p_output1[8]=-0.218018*t2891 + 0.553471*t2901 + 0.803828*t2992;
}



void R_LeftToeBottomFront_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
