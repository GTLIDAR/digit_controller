/*
 * Automatically Generated from Mathematica.
 * Sun 16 Oct 2022 21:28:54 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "R_RightToeBottom_src.h"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double Csc(double x) { return 1.0/sin(x); }
INLINE double Sec(double x) { return 1.0/cos(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t338;
  double t1001;
  double t1112;
  double t1007;
  double t1119;
  double t942;
  double t992;
  double t993;
  double t1303;
  double t1078;
  double t1146;
  double t1248;
  double t998;
  double t1311;
  double t1313;
  double t1326;
  double t253;
  double t358;
  double t754;
  double t1277;
  double t1423;
  double t1458;
  double t1467;
  double t1560;
  double t1569;
  double t1806;
  double t1811;
  double t1825;
  double t755;
  double t825;
  double t853;
  double t1461;
  double t1464;
  double t1465;
  double t1619;
  double t1654;
  double t1697;
  double t1716;
  double t1728;
  double t1735;
  double t1749;
  double t1765;
  double t1775;
  double t1802;
  double t1881;
  double t1959;
  double t1962;
  double t1963;
  double t1972;
  double t1973;
  double t1974;
  double t1975;
  double t1976;
  double t1982;
  double t2018;
  double t2033;
  double t2036;
  double t162;
  double t186;
  double t264;
  double t329;
  double t1662;
  double t1667;
  double t1689;
  double t1803;
  double t1846;
  double t1866;
  double t1983;
  double t2009;
  double t2051;
  double t2064;
  double t2102;
  double t2107;
  double t2113;
  double t2114;
  double t2116;
  double t2123;
  double t2136;
  double t2137;
  double t2141;
  double t2165;
  double t2166;
  double t2168;
  double t2169;
  double t2172;
  double t2280;
  double t2285;
  double t2294;
  double t222;
  double t223;
  double t2012;
  double t2129;
  double t2130;
  double t2132;
  double t2181;
  double t2190;
  double t2227;
  double t2228;
  double t2229;
  double t2235;
  double t2239;
  double t2240;
  double t2255;
  double t2256;
  double t2304;
  double t2308;
  double t2309;
  double t2312;
  double t2316;
  double t2320;
  double t2323;
  double t2331;
  double t2335;
  double t2336;
  double t2348;
  double t2354;
  double t2357;
  double t82;
  double t91;
  double t99;
  double t144;
  double t167;
  double t170;
  double t2213;
  double t2224;
  double t2226;
  double t2263;
  double t2298;
  double t2302;
  double t2343;
  double t2345;
  double t2366;
  double t2369;
  double t2371;
  double t2374;
  double t2375;
  double t2383;
  double t2385;
  double t2386;
  double t2401;
  double t2408;
  double t2409;
  double t2413;
  double t2414;
  double t2417;
  double t2421;
  double t2422;
  double t104;
  double t145;
  double t161;
  double t2346;
  double t2392;
  double t2396;
  double t2399;
  double t2426;
  double t2432;
  double t100;
  double t2438;
  double t2439;
  double t2441;
  double t2444;
  double t2446;
  double t2448;
  double t2449;
  double t2451;
  double t2470;
  double t2472;
  double t2474;
  double t2476;
  double t2477;
  double t2478;
  double t2481;
  double t2483;
  double t2484;
  double t2485;
  double t106;
  double t118;
  double t2573;
  double t2575;
  double t2577;
  double t2583;
  double t2585;
  double t2594;
  double t2582;
  double t2603;
  double t2610;
  double t2613;
  double t2616;
  double t2623;
  double t2563;
  double t2612;
  double t2628;
  double t2632;
  double t2634;
  double t2635;
  double t2643;
  double t2644;
  double t2649;
  double t2650;
  double t2652;
  double t2654;
  double t2633;
  double t2645;
  double t2656;
  double t2658;
  double t2663;
  double t2667;
  double t2671;
  double t2674;
  double t2691;
  double t2693;
  double t2694;
  double t2695;
  double t2660;
  double t2678;
  double t2696;
  double t2702;
  double t2710;
  double t2714;
  double t2717;
  double t2721;
  double t2730;
  double t2738;
  double t2744;
  double t2748;
  double t2434;
  double t2437;
  double t2706;
  double t2722;
  double t2749;
  double t2754;
  double t2763;
  double t2766;
  double t2769;
  double t2774;
  double t2790;
  double t2792;
  double t2794;
  double t2799;
  double t2457;
  double t2465;
  double t2467;
  double t2506;
  double t2507;
  double t2757;
  double t2777;
  double t2802;
  double t2808;
  double t2523;
  double t2527;
  double t2812;
  double t2815;
  double t2816;
  double t2818;
  double t2543;
  double t2545;
  double t2549;
  double t2821;
  double t2823;
  double t2832;
  double t2841;
  double t2867;
  double t2868;
  double t2872;
  double t2876;
  double t2877;
  double t2880;
  double t2866;
  double t2874;
  double t2883;
  double t2885;
  double t2890;
  double t2892;
  double t2894;
  double t2903;
  double t2909;
  double t2910;
  double t2913;
  double t2915;
  double t2889;
  double t2905;
  double t2916;
  double t2917;
  double t2919;
  double t2922;
  double t2924;
  double t2926;
  double t2944;
  double t2948;
  double t2950;
  double t2951;
  double t2918;
  double t2931;
  double t2953;
  double t2961;
  double t2971;
  double t2973;
  double t2975;
  double t2981;
  double t2983;
  double t2986;
  double t2990;
  double t2991;
  double t2962;
  double t2982;
  double t2992;
  double t2996;
  double t3003;
  double t3004;
  double t3006;
  double t3008;
  double t3031;
  double t3032;
  double t3041;
  double t3047;
  double t2998;
  double t3027;
  double t3055;
  double t3056;
  double t3058;
  double t3065;
  double t3067;
  double t3069;
  double t3077;
  double t3080;
  double t3083;
  double t3084;
  double t2433;
  double t2456;
  double t2486;
  double t2493;
  double t2515;
  double t2530;
  double t2551;
  double t2552;
  double t3102;
  double t3103;
  double t3111;
  double t3120;
  double t3131;
  double t3139;
  double t2811;
  double t2820;
  double t2842;
  double t2847;
  double t2851;
  double t2853;
  double t2856;
  double t2860;
  double t3057;
  double t3076;
  double t3085;
  double t3088;
  double t3091;
  double t3092;
  double t3097;
  double t3098;
  double t3110;
  double t3123;
  double t3141;
  double t3153;
  double t3168;
  double t3169;
  double t3172;
  double t3179;
  double t3195;
  double t3196;
  double t3209;
  double t3210;
  t338 = Cos(var1[3]);
  t1001 = Cos(var1[5]);
  t1112 = Sin(var1[3]);
  t1007 = Sin(var1[4]);
  t1119 = Sin(var1[5]);
  t942 = Cos(var1[14]);
  t992 = -1.*t942;
  t993 = 1. + t992;
  t1303 = Cos(var1[13]);
  t1078 = t338*t1001*t1007;
  t1146 = t1112*t1119;
  t1248 = t1078 + t1146;
  t998 = Sin(var1[13]);
  t1311 = -1.*t1001*t1112;
  t1313 = t338*t1007*t1119;
  t1326 = t1311 + t1313;
  t253 = Sin(var1[15]);
  t358 = Cos(var1[4]);
  t754 = Sin(var1[14]);
  t1277 = -1.*t998*t1248;
  t1423 = t1303*t1326;
  t1458 = t1277 + t1423;
  t1467 = t1303*t1248;
  t1560 = t998*t1326;
  t1569 = t1467 + t1560;
  t1806 = Cos(var1[15]);
  t1811 = -1.*t1806;
  t1825 = 1. + t1811;
  t755 = -0.366501*t754;
  t825 = 0. + t755;
  t853 = t338*t358*t825;
  t1461 = 0.340999127418*t993*t1458;
  t1464 = -0.134322983001*t993;
  t1465 = 1. + t1464;
  t1619 = t1465*t1569;
  t1654 = t853 + t1461 + t1619;
  t1697 = 0.930418*t754;
  t1716 = 0. + t1697;
  t1728 = t338*t358*t1716;
  t1735 = -0.8656776547239999*t993;
  t1749 = 1. + t1735;
  t1765 = t1749*t1458;
  t1775 = 0.340999127418*t993*t1569;
  t1802 = t1728 + t1765 + t1775;
  t1881 = -1.000000637725*t993;
  t1959 = 1. + t1881;
  t1962 = t1959*t338*t358;
  t1963 = -0.930418*t754;
  t1972 = 0. + t1963;
  t1973 = t1972*t1458;
  t1974 = 0.366501*t754;
  t1975 = 0. + t1974;
  t1976 = t1975*t1569;
  t1982 = t1962 + t1973 + t1976;
  t2018 = Cos(var1[16]);
  t2033 = -1.*t2018;
  t2036 = 1. + t2033;
  t162 = Sin(var1[17]);
  t186 = Sin(var1[16]);
  t264 = 0.930418*t253;
  t329 = 0. + t264;
  t1662 = t329*t1654;
  t1667 = 0.366501*t253;
  t1689 = 0. + t1667;
  t1803 = t1689*t1802;
  t1846 = -1.000000637725*t1825;
  t1866 = 1. + t1846;
  t1983 = t1866*t1982;
  t2009 = t1662 + t1803 + t1983;
  t2051 = -0.8656776547239999*t1825;
  t2064 = 1. + t2051;
  t2102 = t2064*t1654;
  t2107 = -0.340999127418*t1825*t1802;
  t2113 = -0.930418*t253;
  t2114 = 0. + t2113;
  t2116 = t2114*t1982;
  t2123 = t2102 + t2107 + t2116;
  t2136 = -0.340999127418*t1825*t1654;
  t2137 = -0.134322983001*t1825;
  t2141 = 1. + t2137;
  t2165 = t2141*t1802;
  t2166 = -0.366501*t253;
  t2168 = 0. + t2166;
  t2169 = t2168*t1982;
  t2172 = t2136 + t2165 + t2169;
  t2280 = Cos(var1[17]);
  t2285 = -1.*t2280;
  t2294 = 1. + t2285;
  t222 = 0.366501*t186;
  t223 = 0. + t222;
  t2012 = t223*t2009;
  t2129 = -0.340999127418*t2036*t2123;
  t2130 = -0.134322983001*t2036;
  t2132 = 1. + t2130;
  t2181 = t2132*t2172;
  t2190 = t2012 + t2129 + t2181;
  t2227 = 0.930418*t186;
  t2228 = 0. + t2227;
  t2229 = t2228*t2009;
  t2235 = -0.8656776547239999*t2036;
  t2239 = 1. + t2235;
  t2240 = t2239*t2123;
  t2255 = -0.340999127418*t2036*t2172;
  t2256 = t2229 + t2240 + t2255;
  t2304 = -1.000000637725*t2036;
  t2308 = 1. + t2304;
  t2309 = t2308*t2009;
  t2312 = -0.930418*t186;
  t2316 = 0. + t2312;
  t2320 = t2316*t2123;
  t2323 = -0.366501*t186;
  t2331 = 0. + t2323;
  t2335 = t2331*t2172;
  t2336 = t2309 + t2320 + t2335;
  t2348 = Cos(var1[18]);
  t2354 = -1.*t2348;
  t2357 = 1. + t2354;
  t82 = Cos(var1[19]);
  t91 = -1.*t82;
  t99 = 1. + t91;
  t144 = Sin(var1[18]);
  t167 = -0.366501*t162;
  t170 = 0. + t167;
  t2213 = t170*t2190;
  t2224 = -0.930418*t162;
  t2226 = 0. + t2224;
  t2263 = t2226*t2256;
  t2298 = -1.000000637725*t2294;
  t2302 = 1. + t2298;
  t2343 = t2302*t2336;
  t2345 = t2213 + t2263 + t2343;
  t2366 = -0.134322983001*t2294;
  t2369 = 1. + t2366;
  t2371 = t2369*t2190;
  t2374 = -0.340999127418*t2294*t2256;
  t2375 = 0.366501*t162;
  t2383 = 0. + t2375;
  t2385 = t2383*t2336;
  t2386 = t2371 + t2374 + t2385;
  t2401 = -0.340999127418*t2294*t2190;
  t2408 = -0.8656776547239999*t2294;
  t2409 = 1. + t2408;
  t2413 = t2409*t2256;
  t2414 = 0.930418*t162;
  t2417 = 0. + t2414;
  t2421 = t2417*t2336;
  t2422 = t2401 + t2413 + t2421;
  t104 = Sin(var1[19]);
  t145 = 0.930418*t144;
  t161 = 0. + t145;
  t2346 = t161*t2345;
  t2392 = -0.340999127418*t2357*t2386;
  t2396 = -0.8656776547239999*t2357;
  t2399 = 1. + t2396;
  t2426 = t2399*t2422;
  t2432 = t2346 + t2392 + t2426;
  t100 = 0.120666640478*t99;
  t2438 = 0.366501*t144;
  t2439 = 0. + t2438;
  t2441 = t2439*t2345;
  t2444 = -0.134322983001*t2357;
  t2446 = 1. + t2444;
  t2448 = t2446*t2386;
  t2449 = -0.340999127418*t2357*t2422;
  t2451 = t2441 + t2448 + t2449;
  t2470 = -1.000000637725*t2357;
  t2472 = 1. + t2470;
  t2474 = t2472*t2345;
  t2476 = -0.366501*t144;
  t2477 = 0. + t2476;
  t2478 = t2477*t2386;
  t2481 = -0.930418*t144;
  t2483 = 0. + t2481;
  t2484 = t2483*t2422;
  t2485 = t2474 + t2478 + t2484;
  t106 = 0.803828*t104;
  t118 = t100 + t106;
  t2573 = t1001*t1112*t1007;
  t2575 = -1.*t338*t1119;
  t2577 = t2573 + t2575;
  t2583 = t338*t1001;
  t2585 = t1112*t1007*t1119;
  t2594 = t2583 + t2585;
  t2582 = -1.*t998*t2577;
  t2603 = t1303*t2594;
  t2610 = t2582 + t2603;
  t2613 = t1303*t2577;
  t2616 = t998*t2594;
  t2623 = t2613 + t2616;
  t2563 = t358*t825*t1112;
  t2612 = 0.340999127418*t993*t2610;
  t2628 = t1465*t2623;
  t2632 = t2563 + t2612 + t2628;
  t2634 = t358*t1716*t1112;
  t2635 = t1749*t2610;
  t2643 = 0.340999127418*t993*t2623;
  t2644 = t2634 + t2635 + t2643;
  t2649 = t1959*t358*t1112;
  t2650 = t1972*t2610;
  t2652 = t1975*t2623;
  t2654 = t2649 + t2650 + t2652;
  t2633 = t329*t2632;
  t2645 = t1689*t2644;
  t2656 = t1866*t2654;
  t2658 = t2633 + t2645 + t2656;
  t2663 = t2064*t2632;
  t2667 = -0.340999127418*t1825*t2644;
  t2671 = t2114*t2654;
  t2674 = t2663 + t2667 + t2671;
  t2691 = -0.340999127418*t1825*t2632;
  t2693 = t2141*t2644;
  t2694 = t2168*t2654;
  t2695 = t2691 + t2693 + t2694;
  t2660 = t223*t2658;
  t2678 = -0.340999127418*t2036*t2674;
  t2696 = t2132*t2695;
  t2702 = t2660 + t2678 + t2696;
  t2710 = t2228*t2658;
  t2714 = t2239*t2674;
  t2717 = -0.340999127418*t2036*t2695;
  t2721 = t2710 + t2714 + t2717;
  t2730 = t2308*t2658;
  t2738 = t2316*t2674;
  t2744 = t2331*t2695;
  t2748 = t2730 + t2738 + t2744;
  t2434 = -0.952469601425*t99;
  t2437 = 1. + t2434;
  t2706 = t170*t2702;
  t2722 = t2226*t2721;
  t2749 = t2302*t2748;
  t2754 = t2706 + t2722 + t2749;
  t2763 = t2369*t2702;
  t2766 = -0.340999127418*t2294*t2721;
  t2769 = t2383*t2748;
  t2774 = t2763 + t2766 + t2769;
  t2790 = -0.340999127418*t2294*t2702;
  t2792 = t2409*t2721;
  t2794 = t2417*t2748;
  t2799 = t2790 + t2792 + t2794;
  t2457 = 0.175248972904*t99;
  t2465 = -0.553471*t104;
  t2467 = t2457 + t2465;
  t2506 = -0.693671301908*t99;
  t2507 = 1. + t2506;
  t2757 = t161*t2754;
  t2777 = -0.340999127418*t2357*t2774;
  t2802 = t2399*t2799;
  t2808 = t2757 + t2777 + t2802;
  t2523 = -0.803828*t104;
  t2527 = t100 + t2523;
  t2812 = t2439*t2754;
  t2815 = t2446*t2774;
  t2816 = -0.340999127418*t2357*t2799;
  t2818 = t2812 + t2815 + t2816;
  t2543 = 0.444895486988*t99;
  t2545 = 0.218018*t104;
  t2549 = t2543 + t2545;
  t2821 = t2472*t2754;
  t2823 = t2477*t2774;
  t2832 = t2483*t2799;
  t2841 = t2821 + t2823 + t2832;
  t2867 = -1.*t358*t1001*t998;
  t2868 = t1303*t358*t1119;
  t2872 = t2867 + t2868;
  t2876 = t1303*t358*t1001;
  t2877 = t358*t998*t1119;
  t2880 = t2876 + t2877;
  t2866 = -1.*t825*t1007;
  t2874 = 0.340999127418*t993*t2872;
  t2883 = t1465*t2880;
  t2885 = t2866 + t2874 + t2883;
  t2890 = -1.*t1716*t1007;
  t2892 = t1749*t2872;
  t2894 = 0.340999127418*t993*t2880;
  t2903 = t2890 + t2892 + t2894;
  t2909 = -1.*t1959*t1007;
  t2910 = t1972*t2872;
  t2913 = t1975*t2880;
  t2915 = t2909 + t2910 + t2913;
  t2889 = t329*t2885;
  t2905 = t1689*t2903;
  t2916 = t1866*t2915;
  t2917 = t2889 + t2905 + t2916;
  t2919 = t2064*t2885;
  t2922 = -0.340999127418*t1825*t2903;
  t2924 = t2114*t2915;
  t2926 = t2919 + t2922 + t2924;
  t2944 = -0.340999127418*t1825*t2885;
  t2948 = t2141*t2903;
  t2950 = t2168*t2915;
  t2951 = t2944 + t2948 + t2950;
  t2918 = t223*t2917;
  t2931 = -0.340999127418*t2036*t2926;
  t2953 = t2132*t2951;
  t2961 = t2918 + t2931 + t2953;
  t2971 = t2228*t2917;
  t2973 = t2239*t2926;
  t2975 = -0.340999127418*t2036*t2951;
  t2981 = t2971 + t2973 + t2975;
  t2983 = t2308*t2917;
  t2986 = t2316*t2926;
  t2990 = t2331*t2951;
  t2991 = t2983 + t2986 + t2990;
  t2962 = t170*t2961;
  t2982 = t2226*t2981;
  t2992 = t2302*t2991;
  t2996 = t2962 + t2982 + t2992;
  t3003 = t2369*t2961;
  t3004 = -0.340999127418*t2294*t2981;
  t3006 = t2383*t2991;
  t3008 = t3003 + t3004 + t3006;
  t3031 = -0.340999127418*t2294*t2961;
  t3032 = t2409*t2981;
  t3041 = t2417*t2991;
  t3047 = t3031 + t3032 + t3041;
  t2998 = t161*t2996;
  t3027 = -0.340999127418*t2357*t3008;
  t3055 = t2399*t3047;
  t3056 = t2998 + t3027 + t3055;
  t3058 = t2439*t2996;
  t3065 = t2446*t3008;
  t3067 = -0.340999127418*t2357*t3047;
  t3069 = t3058 + t3065 + t3067;
  t3077 = t2472*t2996;
  t3080 = t2477*t3008;
  t3083 = t2483*t3047;
  t3084 = t3077 + t3080 + t3083;
  t2433 = t118*t2432;
  t2456 = t2437*t2451;
  t2486 = t2467*t2485;
  t2493 = t2433 + t2456 + t2486;
  t2515 = t2507*t2432;
  t2530 = t2527*t2451;
  t2551 = t2549*t2485;
  t2552 = t2515 + t2530 + t2551;
  t3102 = -0.218018*t104;
  t3103 = t2543 + t3102;
  t3111 = 0.553471*t104;
  t3120 = t2457 + t3111;
  t3131 = -0.353861996165*t99;
  t3139 = 1. + t3131;
  t2811 = t118*t2808;
  t2820 = t2437*t2818;
  t2842 = t2467*t2841;
  t2847 = t2811 + t2820 + t2842;
  t2851 = t2507*t2808;
  t2853 = t2527*t2818;
  t2856 = t2549*t2841;
  t2860 = t2851 + t2853 + t2856;
  t3057 = t118*t3056;
  t3076 = t2437*t3069;
  t3085 = t2467*t3084;
  t3088 = t3057 + t3076 + t3085;
  t3091 = t2507*t3056;
  t3092 = t2527*t3069;
  t3097 = t2549*t3084;
  t3098 = t3091 + t3092 + t3097;
  t3110 = t3103*t2432;
  t3123 = t3120*t2451;
  t3141 = t3139*t2485;
  t3153 = t3110 + t3123 + t3141;
  t3168 = t3103*t2808;
  t3169 = t3120*t2818;
  t3172 = t3139*t2841;
  t3179 = t3168 + t3169 + t3172;
  t3195 = t3103*t3056;
  t3196 = t3120*t3069;
  t3209 = t3139*t3084;
  t3210 = t3195 + t3196 + t3209;
  p_output1[0]=-0.930418*t2493 + 0.366501*t2552;
  p_output1[1]=-0.930418*t2847 + 0.366501*t2860;
  p_output1[2]=-0.930418*t3088 + 0.366501*t3098;
  p_output1[3]=-0.294604*t2493 - 0.747896*t2552 + 0.594863*t3153;
  p_output1[4]=-0.294604*t2847 - 0.747896*t2860 + 0.594863*t3179;
  p_output1[5]=-0.294604*t3088 - 0.747896*t3098 + 0.594863*t3210;
  p_output1[6]=0.218018*t2493 + 0.553471*t2552 + 0.803828*t3153;
  p_output1[7]=0.218018*t2847 + 0.553471*t2860 + 0.803828*t3179;
  p_output1[8]=0.218018*t3088 + 0.553471*t3098 + 0.803828*t3210;
}



void R_RightToeBottom_src(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
